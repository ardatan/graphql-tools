# source: https://api.graph.cool/simple/v1/cja80ky0u23b00144w6zqtdxv
# timestamp: Mon Nov 20 2017 11:36:08 GMT+0100 (CET)

enum _ModelMutationType {
  CREATED
  UPDATED
  DELETED
}

# Meta information about the query.
type _QueryMeta {
  count: Int!
}

type AddToBookeePayload {
  bookeeUser: User
  bookingsBooking: Booking
}

type AddToCityNeighbourhoodPayload {
  neighbourhoodsNeighbourhood: Neighbourhood
  cityCity: City
}

type AddToExperienceHostPayload {
  hostUser: User
  hostingExperiencesExperience: Experience
}

type AddToExperienceReviewsPayload {
  experienceExperience: Experience
  reviewsReview: Review
}

type AddToNeighbourhoodPayload {
  locationsLocation: Location
  neighbourHoodNeighbourhood: Neighbourhood
}

type AddToNotificationsPayload {
  userUser: User
  notificationsNotification: Notification
}

type AddToPaymentAccountsPayload {
  paymentsPayment: Payment
  paymentMethodPaymentAccount: PaymentAccount
}

type AddToPlaceBookingPayload {
  placePlace: Place
  bookingsBooking: Booking
}

type AddToPlaceOwnerPayload {
  hostUser: User
  ownedPlacesPlace: Place
}

type AddToPlacePicturesPayload {
  placePlace: Place
  picturesPicture: Picture
}

type AddToPlaceReviewsPayload {
  placePlace: Place
  reviewsReview: Review
}

type AddToReceivedMessagesPayload {
  toUser: User
  receivedMessagesMessage: Message
}

type AddToRestaurantPicturePayload {
  picturesPicture: Picture
  reservationRestaurant: Restaurant
}

type AddToSentMessagesPayload {
  fromUser: User
  sentMessagesMessage: Message
}

type AddToUserPaymentAccountsPayload {
  userUser: User
  paymentAccountPaymentAccount: PaymentAccount
}

type Amenities implements Node {
  airConditioning: Boolean!
  babyBath: Boolean!
  babyMonitor: Boolean!
  babysitterRecommendations: Boolean!
  bathtub: Boolean!
  breakfast: Boolean!
  buzzerWirelessIntercom: Boolean!
  cableTv: Boolean!
  changingTable: Boolean!
  childrensBooksAndToys: Boolean!
  childrensDinnerware: Boolean!
  crib: Boolean!
  doorman: Boolean!
  dryer: Boolean!
  elevator: Boolean!
  essentials: Boolean!
  familyKidFriendly: Boolean!
  freeParkingOnPremises: Boolean!
  freeParkingOnStreet: Boolean!
  gym: Boolean!
  hairDryer: Boolean!
  hangers: Boolean!
  heating: Boolean!
  hotTub: Boolean!
  id: ID!
  indoorFireplace: Boolean!
  internet: Boolean!
  iron: Boolean!
  kitchen: Boolean!
  laptopFriendlyWorkspace: Boolean!
  paidParkingOffPremises: Boolean!
  petsAllowed: Boolean!
  place(filter: PlaceFilter): Place!
  pool: Boolean!
  privateEntrance: Boolean!
  shampoo: Boolean!
  smokingAllowed: Boolean!
  suitableForEvents: Boolean!
  tv: Boolean!
  washer: Boolean!
  wheelchairAccessible: Boolean!
  wirelessInternet: Boolean!
}

input AmenitiesFilter {
  # Logical AND on all given filters.
  AND: [AmenitiesFilter!]

  # Logical OR on all given filters.
  OR: [AmenitiesFilter!]
  airConditioning: Boolean

  # All values that are not equal to given value.
  airConditioning_not: Boolean
  babyBath: Boolean

  # All values that are not equal to given value.
  babyBath_not: Boolean
  babyMonitor: Boolean

  # All values that are not equal to given value.
  babyMonitor_not: Boolean
  babysitterRecommendations: Boolean

  # All values that are not equal to given value.
  babysitterRecommendations_not: Boolean
  bathtub: Boolean

  # All values that are not equal to given value.
  bathtub_not: Boolean
  breakfast: Boolean

  # All values that are not equal to given value.
  breakfast_not: Boolean
  buzzerWirelessIntercom: Boolean

  # All values that are not equal to given value.
  buzzerWirelessIntercom_not: Boolean
  cableTv: Boolean

  # All values that are not equal to given value.
  cableTv_not: Boolean
  changingTable: Boolean

  # All values that are not equal to given value.
  changingTable_not: Boolean
  childrensBooksAndToys: Boolean

  # All values that are not equal to given value.
  childrensBooksAndToys_not: Boolean
  childrensDinnerware: Boolean

  # All values that are not equal to given value.
  childrensDinnerware_not: Boolean
  crib: Boolean

  # All values that are not equal to given value.
  crib_not: Boolean
  doorman: Boolean

  # All values that are not equal to given value.
  doorman_not: Boolean
  dryer: Boolean

  # All values that are not equal to given value.
  dryer_not: Boolean
  elevator: Boolean

  # All values that are not equal to given value.
  elevator_not: Boolean
  essentials: Boolean

  # All values that are not equal to given value.
  essentials_not: Boolean
  familyKidFriendly: Boolean

  # All values that are not equal to given value.
  familyKidFriendly_not: Boolean
  freeParkingOnPremises: Boolean

  # All values that are not equal to given value.
  freeParkingOnPremises_not: Boolean
  freeParkingOnStreet: Boolean

  # All values that are not equal to given value.
  freeParkingOnStreet_not: Boolean
  gym: Boolean

  # All values that are not equal to given value.
  gym_not: Boolean
  hairDryer: Boolean

  # All values that are not equal to given value.
  hairDryer_not: Boolean
  hangers: Boolean

  # All values that are not equal to given value.
  hangers_not: Boolean
  heating: Boolean

  # All values that are not equal to given value.
  heating_not: Boolean
  hotTub: Boolean

  # All values that are not equal to given value.
  hotTub_not: Boolean
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  indoorFireplace: Boolean

  # All values that are not equal to given value.
  indoorFireplace_not: Boolean
  internet: Boolean

  # All values that are not equal to given value.
  internet_not: Boolean
  iron: Boolean

  # All values that are not equal to given value.
  iron_not: Boolean
  kitchen: Boolean

  # All values that are not equal to given value.
  kitchen_not: Boolean
  laptopFriendlyWorkspace: Boolean

  # All values that are not equal to given value.
  laptopFriendlyWorkspace_not: Boolean
  paidParkingOffPremises: Boolean

  # All values that are not equal to given value.
  paidParkingOffPremises_not: Boolean
  petsAllowed: Boolean

  # All values that are not equal to given value.
  petsAllowed_not: Boolean
  pool: Boolean

  # All values that are not equal to given value.
  pool_not: Boolean
  privateEntrance: Boolean

  # All values that are not equal to given value.
  privateEntrance_not: Boolean
  shampoo: Boolean

  # All values that are not equal to given value.
  shampoo_not: Boolean
  smokingAllowed: Boolean

  # All values that are not equal to given value.
  smokingAllowed_not: Boolean
  suitableForEvents: Boolean

  # All values that are not equal to given value.
  suitableForEvents_not: Boolean
  tv: Boolean

  # All values that are not equal to given value.
  tv_not: Boolean
  washer: Boolean

  # All values that are not equal to given value.
  washer_not: Boolean
  wheelchairAccessible: Boolean

  # All values that are not equal to given value.
  wheelchairAccessible_not: Boolean
  wirelessInternet: Boolean

  # All values that are not equal to given value.
  wirelessInternet_not: Boolean
  place: PlaceFilter
}

enum AmenitiesOrderBy {
  airConditioning_ASC
  airConditioning_DESC
  babyBath_ASC
  babyBath_DESC
  babyMonitor_ASC
  babyMonitor_DESC
  babysitterRecommendations_ASC
  babysitterRecommendations_DESC
  bathtub_ASC
  bathtub_DESC
  breakfast_ASC
  breakfast_DESC
  buzzerWirelessIntercom_ASC
  buzzerWirelessIntercom_DESC
  cableTv_ASC
  cableTv_DESC
  changingTable_ASC
  changingTable_DESC
  childrensBooksAndToys_ASC
  childrensBooksAndToys_DESC
  childrensDinnerware_ASC
  childrensDinnerware_DESC
  crib_ASC
  crib_DESC
  doorman_ASC
  doorman_DESC
  dryer_ASC
  dryer_DESC
  elevator_ASC
  elevator_DESC
  essentials_ASC
  essentials_DESC
  familyKidFriendly_ASC
  familyKidFriendly_DESC
  freeParkingOnPremises_ASC
  freeParkingOnPremises_DESC
  freeParkingOnStreet_ASC
  freeParkingOnStreet_DESC
  gym_ASC
  gym_DESC
  hairDryer_ASC
  hairDryer_DESC
  hangers_ASC
  hangers_DESC
  heating_ASC
  heating_DESC
  hotTub_ASC
  hotTub_DESC
  id_ASC
  id_DESC
  indoorFireplace_ASC
  indoorFireplace_DESC
  internet_ASC
  internet_DESC
  iron_ASC
  iron_DESC
  kitchen_ASC
  kitchen_DESC
  laptopFriendlyWorkspace_ASC
  laptopFriendlyWorkspace_DESC
  paidParkingOffPremises_ASC
  paidParkingOffPremises_DESC
  petsAllowed_ASC
  petsAllowed_DESC
  pool_ASC
  pool_DESC
  privateEntrance_ASC
  privateEntrance_DESC
  shampoo_ASC
  shampoo_DESC
  smokingAllowed_ASC
  smokingAllowed_DESC
  suitableForEvents_ASC
  suitableForEvents_DESC
  tv_ASC
  tv_DESC
  washer_ASC
  washer_DESC
  wheelchairAccessible_ASC
  wheelchairAccessible_DESC
  wirelessInternet_ASC
  wirelessInternet_DESC
}

input AmenitiesplacePlace {
  description: String!
  maxGuests: Int!
  name: String
  numBaths: Int!
  numBedrooms: Int!
  numBeds: Int!
  popularity: Int!
  shortDescription: String!
  size: PLACE_SIZES
  slug: String!
  guestRequirementsId: ID
  guestRequirements: PlaceguestRequirementsGuestRequirements
  hostId: ID
  host: PlacehostUser
  houseRulesId: ID
  houseRules: PlacehouseRulesHouseRules
  locationId: ID
  location: PlacelocationLocation
  policiesId: ID
  policies: PlacepoliciesPolicies
  pricingId: ID
  pricing: PlacepricingPricing
  viewsId: ID
  views: PlaceviewsPlaceViews
  bookingsIds: [ID!]
  bookings: [PlacebookingsBooking!]
  picturesIds: [ID!]
  pictures: [PlacepicturesPicture!]
  reviewsIds: [ID!]
  reviews: [PlacereviewsReview!]
}

type AmenitiesPreviousValues {
  airConditioning: Boolean!
  babyBath: Boolean!
  babyMonitor: Boolean!
  babysitterRecommendations: Boolean!
  bathtub: Boolean!
  breakfast: Boolean!
  buzzerWirelessIntercom: Boolean!
  cableTv: Boolean!
  changingTable: Boolean!
  childrensBooksAndToys: Boolean!
  childrensDinnerware: Boolean!
  crib: Boolean!
  doorman: Boolean!
  dryer: Boolean!
  elevator: Boolean!
  essentials: Boolean!
  familyKidFriendly: Boolean!
  freeParkingOnPremises: Boolean!
  freeParkingOnStreet: Boolean!
  gym: Boolean!
  hairDryer: Boolean!
  hangers: Boolean!
  heating: Boolean!
  hotTub: Boolean!
  id: ID!
  indoorFireplace: Boolean!
  internet: Boolean!
  iron: Boolean!
  kitchen: Boolean!
  laptopFriendlyWorkspace: Boolean!
  paidParkingOffPremises: Boolean!
  petsAllowed: Boolean!
  pool: Boolean!
  privateEntrance: Boolean!
  shampoo: Boolean!
  smokingAllowed: Boolean!
  suitableForEvents: Boolean!
  tv: Boolean!
  washer: Boolean!
  wheelchairAccessible: Boolean!
  wirelessInternet: Boolean!
}

input AmenitiesSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [AmenitiesSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [AmenitiesSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: AmenitiesSubscriptionFilterNode
}

input AmenitiesSubscriptionFilterNode {
  airConditioning: Boolean

  # All values that are not equal to given value.
  airConditioning_not: Boolean
  babyBath: Boolean

  # All values that are not equal to given value.
  babyBath_not: Boolean
  babyMonitor: Boolean

  # All values that are not equal to given value.
  babyMonitor_not: Boolean
  babysitterRecommendations: Boolean

  # All values that are not equal to given value.
  babysitterRecommendations_not: Boolean
  bathtub: Boolean

  # All values that are not equal to given value.
  bathtub_not: Boolean
  breakfast: Boolean

  # All values that are not equal to given value.
  breakfast_not: Boolean
  buzzerWirelessIntercom: Boolean

  # All values that are not equal to given value.
  buzzerWirelessIntercom_not: Boolean
  cableTv: Boolean

  # All values that are not equal to given value.
  cableTv_not: Boolean
  changingTable: Boolean

  # All values that are not equal to given value.
  changingTable_not: Boolean
  childrensBooksAndToys: Boolean

  # All values that are not equal to given value.
  childrensBooksAndToys_not: Boolean
  childrensDinnerware: Boolean

  # All values that are not equal to given value.
  childrensDinnerware_not: Boolean
  crib: Boolean

  # All values that are not equal to given value.
  crib_not: Boolean
  doorman: Boolean

  # All values that are not equal to given value.
  doorman_not: Boolean
  dryer: Boolean

  # All values that are not equal to given value.
  dryer_not: Boolean
  elevator: Boolean

  # All values that are not equal to given value.
  elevator_not: Boolean
  essentials: Boolean

  # All values that are not equal to given value.
  essentials_not: Boolean
  familyKidFriendly: Boolean

  # All values that are not equal to given value.
  familyKidFriendly_not: Boolean
  freeParkingOnPremises: Boolean

  # All values that are not equal to given value.
  freeParkingOnPremises_not: Boolean
  freeParkingOnStreet: Boolean

  # All values that are not equal to given value.
  freeParkingOnStreet_not: Boolean
  gym: Boolean

  # All values that are not equal to given value.
  gym_not: Boolean
  hairDryer: Boolean

  # All values that are not equal to given value.
  hairDryer_not: Boolean
  hangers: Boolean

  # All values that are not equal to given value.
  hangers_not: Boolean
  heating: Boolean

  # All values that are not equal to given value.
  heating_not: Boolean
  hotTub: Boolean

  # All values that are not equal to given value.
  hotTub_not: Boolean
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  indoorFireplace: Boolean

  # All values that are not equal to given value.
  indoorFireplace_not: Boolean
  internet: Boolean

  # All values that are not equal to given value.
  internet_not: Boolean
  iron: Boolean

  # All values that are not equal to given value.
  iron_not: Boolean
  kitchen: Boolean

  # All values that are not equal to given value.
  kitchen_not: Boolean
  laptopFriendlyWorkspace: Boolean

  # All values that are not equal to given value.
  laptopFriendlyWorkspace_not: Boolean
  paidParkingOffPremises: Boolean

  # All values that are not equal to given value.
  paidParkingOffPremises_not: Boolean
  petsAllowed: Boolean

  # All values that are not equal to given value.
  petsAllowed_not: Boolean
  pool: Boolean

  # All values that are not equal to given value.
  pool_not: Boolean
  privateEntrance: Boolean

  # All values that are not equal to given value.
  privateEntrance_not: Boolean
  shampoo: Boolean

  # All values that are not equal to given value.
  shampoo_not: Boolean
  smokingAllowed: Boolean

  # All values that are not equal to given value.
  smokingAllowed_not: Boolean
  suitableForEvents: Boolean

  # All values that are not equal to given value.
  suitableForEvents_not: Boolean
  tv: Boolean

  # All values that are not equal to given value.
  tv_not: Boolean
  washer: Boolean

  # All values that are not equal to given value.
  washer_not: Boolean
  wheelchairAccessible: Boolean

  # All values that are not equal to given value.
  wheelchairAccessible_not: Boolean
  wirelessInternet: Boolean

  # All values that are not equal to given value.
  wirelessInternet_not: Boolean
  place: PlaceFilter
}

type AmenitiesSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Amenities
  updatedFields: [String!]
  previousValues: AmenitiesPreviousValues
}

type Booking implements Node {
  bookee(filter: UserFilter): User!
  createdAt: DateTime!
  endDate: DateTime!
  id: ID!
  payment(filter: PaymentFilter): Payment!
  place(filter: PlaceFilter): Place!
  startDate: DateTime!
}

input BookingbookeeUser {
  email: String!
  firstName: String!
  isSuperHost: Boolean
  lastName: String!
  password: String!
  phone: String!
  responseRate: Float
  responseTime: Int
  locationId: ID
  location: UserlocationLocation
  profilePictureId: ID
  profilePicture: UserprofilePicturePicture
  bookingsIds: [ID!]
  bookings: [UserbookingsBooking!]
  hostingExperiencesIds: [ID!]
  hostingExperiences: [UserhostingExperiencesExperience!]
  notificationsIds: [ID!]
  notifications: [UsernotificationsNotification!]
  ownedPlacesIds: [ID!]
  ownedPlaces: [UserownedPlacesPlace!]
  paymentAccountIds: [ID!]
  paymentAccount: [UserpaymentAccountPaymentAccount!]
  receivedMessagesIds: [ID!]
  receivedMessages: [UserreceivedMessagesMessage!]
  sentMessagesIds: [ID!]
  sentMessages: [UsersentMessagesMessage!]
}

input BookingFilter {
  # Logical AND on all given filters.
  AND: [BookingFilter!]

  # Logical OR on all given filters.
  OR: [BookingFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  endDate: DateTime

  # All values that are not equal to given value.
  endDate_not: DateTime

  # All values that are contained in given list.
  endDate_in: [DateTime!]

  # All values that are not contained in given list.
  endDate_not_in: [DateTime!]

  # All values less than the given value.
  endDate_lt: DateTime

  # All values less than or equal the given value.
  endDate_lte: DateTime

  # All values greater than the given value.
  endDate_gt: DateTime

  # All values greater than or equal the given value.
  endDate_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  startDate: DateTime

  # All values that are not equal to given value.
  startDate_not: DateTime

  # All values that are contained in given list.
  startDate_in: [DateTime!]

  # All values that are not contained in given list.
  startDate_not_in: [DateTime!]

  # All values less than the given value.
  startDate_lt: DateTime

  # All values less than or equal the given value.
  startDate_lte: DateTime

  # All values greater than the given value.
  startDate_gt: DateTime

  # All values greater than or equal the given value.
  startDate_gte: DateTime
  bookee: UserFilter
  payment: PaymentFilter
  place: PlaceFilter
}

enum BookingOrderBy {
  createdAt_ASC
  createdAt_DESC
  endDate_ASC
  endDate_DESC
  id_ASC
  id_DESC
  startDate_ASC
  startDate_DESC
}

input BookingpaymentPayment {
  placePrice: Float!
  serviceFee: Float!
  totalPrice: Float!
  paymentMethodId: ID
  paymentMethod: PaymentpaymentMethodPaymentAccount
}

input BookingplacePlace {
  description: String!
  maxGuests: Int!
  name: String
  numBaths: Int!
  numBedrooms: Int!
  numBeds: Int!
  popularity: Int!
  shortDescription: String!
  size: PLACE_SIZES
  slug: String!
  amenitiesId: ID
  amenities: PlaceamenitiesAmenities
  guestRequirementsId: ID
  guestRequirements: PlaceguestRequirementsGuestRequirements
  hostId: ID
  host: PlacehostUser
  houseRulesId: ID
  houseRules: PlacehouseRulesHouseRules
  locationId: ID
  location: PlacelocationLocation
  policiesId: ID
  policies: PlacepoliciesPolicies
  pricingId: ID
  pricing: PlacepricingPricing
  viewsId: ID
  views: PlaceviewsPlaceViews
  bookingsIds: [ID!]
  bookings: [PlacebookingsBooking!]
  picturesIds: [ID!]
  pictures: [PlacepicturesPicture!]
  reviewsIds: [ID!]
  reviews: [PlacereviewsReview!]
}

type BookingPreviousValues {
  createdAt: DateTime!
  endDate: DateTime!
  id: ID!
  startDate: DateTime!
}

input BookingSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [BookingSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [BookingSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: BookingSubscriptionFilterNode
}

input BookingSubscriptionFilterNode {
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  endDate: DateTime

  # All values that are not equal to given value.
  endDate_not: DateTime

  # All values that are contained in given list.
  endDate_in: [DateTime!]

  # All values that are not contained in given list.
  endDate_not_in: [DateTime!]

  # All values less than the given value.
  endDate_lt: DateTime

  # All values less than or equal the given value.
  endDate_lte: DateTime

  # All values greater than the given value.
  endDate_gt: DateTime

  # All values greater than or equal the given value.
  endDate_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  startDate: DateTime

  # All values that are not equal to given value.
  startDate_not: DateTime

  # All values that are contained in given list.
  startDate_in: [DateTime!]

  # All values that are not contained in given list.
  startDate_not_in: [DateTime!]

  # All values less than the given value.
  startDate_lt: DateTime

  # All values less than or equal the given value.
  startDate_lte: DateTime

  # All values greater than the given value.
  startDate_gt: DateTime

  # All values greater than or equal the given value.
  startDate_gte: DateTime
  bookee: UserFilter
  payment: PaymentFilter
  place: PlaceFilter
}

type BookingSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Booking
  updatedFields: [String!]
  previousValues: BookingPreviousValues
}

type City implements Node {
  id: ID!
  name: String!
  neighbourhoods(
    filter: NeighbourhoodFilter
    orderBy: NeighbourhoodOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Neighbourhood!]

  # Meta information about the query.
  _neighbourhoodsMeta(
    filter: NeighbourhoodFilter
    orderBy: NeighbourhoodOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!
}

input CityFilter {
  # Logical AND on all given filters.
  AND: [CityFilter!]

  # Logical OR on all given filters.
  OR: [CityFilter!]
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  neighbourhoods_every: NeighbourhoodFilter
  neighbourhoods_some: NeighbourhoodFilter
  neighbourhoods_none: NeighbourhoodFilter
}

input CityneighbourhoodsNeighbourhood {
  featured: Boolean!
  name: String!
  popularity: Int!
  slug: String!
  homePreviewId: ID
  homePreview: NeighbourhoodhomePreviewPicture
  locationsIds: [ID!]
  locations: [NeighbourhoodlocationsLocation!]
}

enum CityOrderBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type CityPreviousValues {
  id: ID!
  name: String!
}

input CitySubscriptionFilter {
  # Logical AND on all given filters.
  AND: [CitySubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [CitySubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: CitySubscriptionFilterNode
}

input CitySubscriptionFilterNode {
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  neighbourhoods_every: NeighbourhoodFilter
  neighbourhoods_some: NeighbourhoodFilter
  neighbourhoods_none: NeighbourhoodFilter
}

type CitySubscriptionPayload {
  mutation: _ModelMutationType!
  node: City
  updatedFields: [String!]
  previousValues: CityPreviousValues
}

input CreateAmenities {
  airConditioning: Boolean
  babyBath: Boolean
  babyMonitor: Boolean
  babysitterRecommendations: Boolean
  bathtub: Boolean
  breakfast: Boolean
  buzzerWirelessIntercom: Boolean
  cableTv: Boolean
  changingTable: Boolean
  childrensBooksAndToys: Boolean
  childrensDinnerware: Boolean
  crib: Boolean
  doorman: Boolean
  dryer: Boolean
  elevator: Boolean
  essentials: Boolean
  familyKidFriendly: Boolean
  freeParkingOnPremises: Boolean
  freeParkingOnStreet: Boolean
  gym: Boolean
  hairDryer: Boolean
  hangers: Boolean
  heating: Boolean
  hotTub: Boolean
  indoorFireplace: Boolean
  internet: Boolean
  iron: Boolean
  kitchen: Boolean
  laptopFriendlyWorkspace: Boolean
  paidParkingOffPremises: Boolean
  petsAllowed: Boolean
  pool: Boolean
  privateEntrance: Boolean
  shampoo: Boolean
  smokingAllowed: Boolean
  suitableForEvents: Boolean
  tv: Boolean
  washer: Boolean
  wheelchairAccessible: Boolean
  wirelessInternet: Boolean
  placeId: ID
  place: AmenitiesplacePlace
}

input CreateBooking {
  endDate: DateTime!
  startDate: DateTime!
  bookeeId: ID
  bookee: BookingbookeeUser
  paymentId: ID
  payment: BookingpaymentPayment
  placeId: ID
  place: BookingplacePlace
}

input CreateCity {
  name: String!
  neighbourhoodsIds: [ID!]
  neighbourhoods: [CityneighbourhoodsNeighbourhood!]
}

input CreateCreditCardInformation {
  cardNumber: String!
  country: String!
  expiresOnMonth: Int!
  expiresOnYear: Int!
  firstName: String!
  lastName: String!
  postalCode: String!
  securityCode: String!
  paymentAccountId: ID
  paymentAccount: CreditCardInformationpaymentAccountPaymentAccount
}

input CreateExperience {
  popularity: Int!
  pricePerPerson: Int!
  title: String!
  categoryId: ID
  category: ExperiencecategoryExperienceCategory
  hostId: ID
  host: ExperiencehostUser
  locationId: ID
  location: ExperiencelocationLocation
  previewId: ID
  preview: ExperiencepreviewPicture
  reviewsIds: [ID!]
  reviews: [ExperiencereviewsReview!]
}

input CreateExperienceCategory {
  mainColor: String
  name: String!
  experienceId: ID
  experience: ExperienceCategoryexperienceExperience
}

input CreateGuestRequirements {
  govIssuedId: Boolean
  guestTripInformation: Boolean
  recommendationsFromOtherHosts: Boolean
  placeId: ID
  place: GuestRequirementsplacePlace
}

input CreateHouseRules {
  additionalRules: String
  partiesAndEventsAllowed: Boolean
  petsAllowed: Boolean
  smokingAllowed: Boolean
  suitableForChildren: Boolean
  suitableForInfants: Boolean
  placeId: ID
  place: HouseRulesplacePlace
}

input CreateLocation {
  address: String
  directions: String
  lat: Float!
  lng: Float!
  experienceId: ID
  experience: LocationexperienceExperience
  neighbourHoodId: ID
  neighbourHood: LocationneighbourHoodNeighbourhood
  placeId: ID
  place: LocationplacePlace
  restaurantId: ID
  restaurant: LocationrestaurantRestaurant
  userId: ID
  user: LocationuserUser
}

input CreateMessage {
  deliveredAt: DateTime!
  readAt: DateTime!
  fromId: ID
  from: MessagefromUser
  toId: ID
  to: MessagetoUser
}

input CreateNeighbourhood {
  featured: Boolean!
  name: String!
  popularity: Int!
  slug: String!
  cityId: ID
  city: NeighbourhoodcityCity
  homePreviewId: ID
  homePreview: NeighbourhoodhomePreviewPicture
  locationsIds: [ID!]
  locations: [NeighbourhoodlocationsLocation!]
}

input CreateNotification {
  link: String!
  readDate: DateTime!
  type: NOTIFICATION_TYPE
  userId: ID
  user: NotificationuserUser
}

input CreatePayment {
  placePrice: Float!
  serviceFee: Float!
  totalPrice: Float!
  bookingId: ID
  booking: PaymentbookingBooking
  paymentMethodId: ID
  paymentMethod: PaymentpaymentMethodPaymentAccount
}

input CreatePaymentAccount {
  type: PAYMENT_PROVIDER
  creditcardId: ID
  creditcard: PaymentAccountcreditcardCreditCardInformation
  paypalId: ID
  paypal: PaymentAccountpaypalPaypalInformation
  userId: ID
  user: PaymentAccountuserUser
  paymentsIds: [ID!]
  payments: [PaymentAccountpaymentsPayment!]
}

input CreatePaypalInformation {
  email: String!
  paymentAccountId: ID
  paymentAccount: PaypalInformationpaymentAccountPaymentAccount
}

input CreatePicture {
  url: String!
  experienceId: ID
  experience: PictureexperienceExperience
  neighbourHoodId: ID
  neighbourHood: PictureneighbourHoodNeighbourhood
  placeId: ID
  place: PictureplacePlace
  reservationId: ID
  reservation: PicturereservationRestaurant
  userId: ID
  user: PictureuserUser
}

input CreatePlace {
  description: String!
  maxGuests: Int!
  name: String
  numBaths: Int!
  numBedrooms: Int!
  numBeds: Int!
  popularity: Int!
  shortDescription: String!
  size: PLACE_SIZES
  slug: String!
  amenitiesId: ID
  amenities: PlaceamenitiesAmenities
  guestRequirementsId: ID
  guestRequirements: PlaceguestRequirementsGuestRequirements
  hostId: ID
  host: PlacehostUser
  houseRulesId: ID
  houseRules: PlacehouseRulesHouseRules
  locationId: ID
  location: PlacelocationLocation
  policiesId: ID
  policies: PlacepoliciesPolicies
  pricingId: ID
  pricing: PlacepricingPricing
  viewsId: ID
  views: PlaceviewsPlaceViews
  bookingsIds: [ID!]
  bookings: [PlacebookingsBooking!]
  picturesIds: [ID!]
  pictures: [PlacepicturesPicture!]
  reviewsIds: [ID!]
  reviews: [PlacereviewsReview!]
}

input CreatePlaceViews {
  lastWeek: Int!
  placeId: ID
  place: PlaceViewsplacePlace
}

input CreatePolicies {
  checkInEndTime: Float!
  checkInStartTime: Float!
  checkoutTime: Float!
  placeId: ID
  place: PoliciesplacePlace
}

input CreatePricing {
  averageMonthly: Int!
  averageWeekly: Int!
  basePrice: Int!
  cleaningFee: Int
  currency: CURRENCY
  extraGuests: Int
  monthlyDiscount: Int
  perNight: Int!
  securityDeposit: Int
  smartPricing: Boolean
  weekendPricing: Int
  weeklyDiscount: Int
  placeId: ID
  place: PricingplacePlace
}

input CreateRestaurant {
  avgPricePerPerson: Int!
  isCurated: Boolean
  popularity: Int!
  slug: String!
  title: String!
  locationId: ID
  location: RestaurantlocationLocation
  picturesIds: [ID!]
  pictures: [RestaurantpicturesPicture!]
}

input CreateReview {
  accuracy: Int!
  checkIn: Int!
  cleanliness: Int!
  communication: Int!
  location: Int!
  stars: Int!
  text: String!
  value: Int!
  experienceId: ID
  experience: ReviewexperienceExperience
  placeId: ID
  place: ReviewplacePlace
}

input CreateUser {
  email: String!
  firstName: String!
  isSuperHost: Boolean
  lastName: String!
  password: String!
  phone: String!
  responseRate: Float
  responseTime: Int
  locationId: ID
  location: UserlocationLocation
  profilePictureId: ID
  profilePicture: UserprofilePicturePicture
  bookingsIds: [ID!]
  bookings: [UserbookingsBooking!]
  hostingExperiencesIds: [ID!]
  hostingExperiences: [UserhostingExperiencesExperience!]
  notificationsIds: [ID!]
  notifications: [UsernotificationsNotification!]
  ownedPlacesIds: [ID!]
  ownedPlaces: [UserownedPlacesPlace!]
  paymentAccountIds: [ID!]
  paymentAccount: [UserpaymentAccountPaymentAccount!]
  receivedMessagesIds: [ID!]
  receivedMessages: [UserreceivedMessagesMessage!]
  sentMessagesIds: [ID!]
  sentMessages: [UsersentMessagesMessage!]
}

type CreditCardInformation implements Node {
  cardNumber: String!
  country: String!
  createdAt: DateTime!
  expiresOnMonth: Int!
  expiresOnYear: Int!
  firstName: String!
  id: ID!
  lastName: String!
  paymentAccount(filter: PaymentAccountFilter): PaymentAccount
  postalCode: String!
  securityCode: String!
}

input CreditCardInformationFilter {
  # Logical AND on all given filters.
  AND: [CreditCardInformationFilter!]

  # Logical OR on all given filters.
  OR: [CreditCardInformationFilter!]
  cardNumber: String

  # All values that are not equal to given value.
  cardNumber_not: String

  # All values that are contained in given list.
  cardNumber_in: [String!]

  # All values that are not contained in given list.
  cardNumber_not_in: [String!]

  # All values less than the given value.
  cardNumber_lt: String

  # All values less than or equal the given value.
  cardNumber_lte: String

  # All values greater than the given value.
  cardNumber_gt: String

  # All values greater than or equal the given value.
  cardNumber_gte: String

  # All values containing the given string.
  cardNumber_contains: String

  # All values not containing the given string.
  cardNumber_not_contains: String

  # All values starting with the given string.
  cardNumber_starts_with: String

  # All values not starting with the given string.
  cardNumber_not_starts_with: String

  # All values ending with the given string.
  cardNumber_ends_with: String

  # All values not ending with the given string.
  cardNumber_not_ends_with: String
  country: String

  # All values that are not equal to given value.
  country_not: String

  # All values that are contained in given list.
  country_in: [String!]

  # All values that are not contained in given list.
  country_not_in: [String!]

  # All values less than the given value.
  country_lt: String

  # All values less than or equal the given value.
  country_lte: String

  # All values greater than the given value.
  country_gt: String

  # All values greater than or equal the given value.
  country_gte: String

  # All values containing the given string.
  country_contains: String

  # All values not containing the given string.
  country_not_contains: String

  # All values starting with the given string.
  country_starts_with: String

  # All values not starting with the given string.
  country_not_starts_with: String

  # All values ending with the given string.
  country_ends_with: String

  # All values not ending with the given string.
  country_not_ends_with: String
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  expiresOnMonth: Int

  # All values that are not equal to given value.
  expiresOnMonth_not: Int

  # All values that are contained in given list.
  expiresOnMonth_in: [Int!]

  # All values that are not contained in given list.
  expiresOnMonth_not_in: [Int!]

  # All values less than the given value.
  expiresOnMonth_lt: Int

  # All values less than or equal the given value.
  expiresOnMonth_lte: Int

  # All values greater than the given value.
  expiresOnMonth_gt: Int

  # All values greater than or equal the given value.
  expiresOnMonth_gte: Int
  expiresOnYear: Int

  # All values that are not equal to given value.
  expiresOnYear_not: Int

  # All values that are contained in given list.
  expiresOnYear_in: [Int!]

  # All values that are not contained in given list.
  expiresOnYear_not_in: [Int!]

  # All values less than the given value.
  expiresOnYear_lt: Int

  # All values less than or equal the given value.
  expiresOnYear_lte: Int

  # All values greater than the given value.
  expiresOnYear_gt: Int

  # All values greater than or equal the given value.
  expiresOnYear_gte: Int
  firstName: String

  # All values that are not equal to given value.
  firstName_not: String

  # All values that are contained in given list.
  firstName_in: [String!]

  # All values that are not contained in given list.
  firstName_not_in: [String!]

  # All values less than the given value.
  firstName_lt: String

  # All values less than or equal the given value.
  firstName_lte: String

  # All values greater than the given value.
  firstName_gt: String

  # All values greater than or equal the given value.
  firstName_gte: String

  # All values containing the given string.
  firstName_contains: String

  # All values not containing the given string.
  firstName_not_contains: String

  # All values starting with the given string.
  firstName_starts_with: String

  # All values not starting with the given string.
  firstName_not_starts_with: String

  # All values ending with the given string.
  firstName_ends_with: String

  # All values not ending with the given string.
  firstName_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  lastName: String

  # All values that are not equal to given value.
  lastName_not: String

  # All values that are contained in given list.
  lastName_in: [String!]

  # All values that are not contained in given list.
  lastName_not_in: [String!]

  # All values less than the given value.
  lastName_lt: String

  # All values less than or equal the given value.
  lastName_lte: String

  # All values greater than the given value.
  lastName_gt: String

  # All values greater than or equal the given value.
  lastName_gte: String

  # All values containing the given string.
  lastName_contains: String

  # All values not containing the given string.
  lastName_not_contains: String

  # All values starting with the given string.
  lastName_starts_with: String

  # All values not starting with the given string.
  lastName_not_starts_with: String

  # All values ending with the given string.
  lastName_ends_with: String

  # All values not ending with the given string.
  lastName_not_ends_with: String
  postalCode: String

  # All values that are not equal to given value.
  postalCode_not: String

  # All values that are contained in given list.
  postalCode_in: [String!]

  # All values that are not contained in given list.
  postalCode_not_in: [String!]

  # All values less than the given value.
  postalCode_lt: String

  # All values less than or equal the given value.
  postalCode_lte: String

  # All values greater than the given value.
  postalCode_gt: String

  # All values greater than or equal the given value.
  postalCode_gte: String

  # All values containing the given string.
  postalCode_contains: String

  # All values not containing the given string.
  postalCode_not_contains: String

  # All values starting with the given string.
  postalCode_starts_with: String

  # All values not starting with the given string.
  postalCode_not_starts_with: String

  # All values ending with the given string.
  postalCode_ends_with: String

  # All values not ending with the given string.
  postalCode_not_ends_with: String
  securityCode: String

  # All values that are not equal to given value.
  securityCode_not: String

  # All values that are contained in given list.
  securityCode_in: [String!]

  # All values that are not contained in given list.
  securityCode_not_in: [String!]

  # All values less than the given value.
  securityCode_lt: String

  # All values less than or equal the given value.
  securityCode_lte: String

  # All values greater than the given value.
  securityCode_gt: String

  # All values greater than or equal the given value.
  securityCode_gte: String

  # All values containing the given string.
  securityCode_contains: String

  # All values not containing the given string.
  securityCode_not_contains: String

  # All values starting with the given string.
  securityCode_starts_with: String

  # All values not starting with the given string.
  securityCode_not_starts_with: String

  # All values ending with the given string.
  securityCode_ends_with: String

  # All values not ending with the given string.
  securityCode_not_ends_with: String
  paymentAccount: PaymentAccountFilter
}

enum CreditCardInformationOrderBy {
  cardNumber_ASC
  cardNumber_DESC
  country_ASC
  country_DESC
  createdAt_ASC
  createdAt_DESC
  expiresOnMonth_ASC
  expiresOnMonth_DESC
  expiresOnYear_ASC
  expiresOnYear_DESC
  firstName_ASC
  firstName_DESC
  id_ASC
  id_DESC
  lastName_ASC
  lastName_DESC
  postalCode_ASC
  postalCode_DESC
  securityCode_ASC
  securityCode_DESC
}

input CreditCardInformationpaymentAccountPaymentAccount {
  type: PAYMENT_PROVIDER
  paypalId: ID
  paypal: PaymentAccountpaypalPaypalInformation
  userId: ID
  user: PaymentAccountuserUser
  paymentsIds: [ID!]
  payments: [PaymentAccountpaymentsPayment!]
}

type CreditCardInformationPreviousValues {
  cardNumber: String!
  country: String!
  createdAt: DateTime!
  expiresOnMonth: Int!
  expiresOnYear: Int!
  firstName: String!
  id: ID!
  lastName: String!
  postalCode: String!
  securityCode: String!
}

input CreditCardInformationSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [CreditCardInformationSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [CreditCardInformationSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: CreditCardInformationSubscriptionFilterNode
}

input CreditCardInformationSubscriptionFilterNode {
  cardNumber: String

  # All values that are not equal to given value.
  cardNumber_not: String

  # All values that are contained in given list.
  cardNumber_in: [String!]

  # All values that are not contained in given list.
  cardNumber_not_in: [String!]

  # All values less than the given value.
  cardNumber_lt: String

  # All values less than or equal the given value.
  cardNumber_lte: String

  # All values greater than the given value.
  cardNumber_gt: String

  # All values greater than or equal the given value.
  cardNumber_gte: String

  # All values containing the given string.
  cardNumber_contains: String

  # All values not containing the given string.
  cardNumber_not_contains: String

  # All values starting with the given string.
  cardNumber_starts_with: String

  # All values not starting with the given string.
  cardNumber_not_starts_with: String

  # All values ending with the given string.
  cardNumber_ends_with: String

  # All values not ending with the given string.
  cardNumber_not_ends_with: String
  country: String

  # All values that are not equal to given value.
  country_not: String

  # All values that are contained in given list.
  country_in: [String!]

  # All values that are not contained in given list.
  country_not_in: [String!]

  # All values less than the given value.
  country_lt: String

  # All values less than or equal the given value.
  country_lte: String

  # All values greater than the given value.
  country_gt: String

  # All values greater than or equal the given value.
  country_gte: String

  # All values containing the given string.
  country_contains: String

  # All values not containing the given string.
  country_not_contains: String

  # All values starting with the given string.
  country_starts_with: String

  # All values not starting with the given string.
  country_not_starts_with: String

  # All values ending with the given string.
  country_ends_with: String

  # All values not ending with the given string.
  country_not_ends_with: String
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  expiresOnMonth: Int

  # All values that are not equal to given value.
  expiresOnMonth_not: Int

  # All values that are contained in given list.
  expiresOnMonth_in: [Int!]

  # All values that are not contained in given list.
  expiresOnMonth_not_in: [Int!]

  # All values less than the given value.
  expiresOnMonth_lt: Int

  # All values less than or equal the given value.
  expiresOnMonth_lte: Int

  # All values greater than the given value.
  expiresOnMonth_gt: Int

  # All values greater than or equal the given value.
  expiresOnMonth_gte: Int
  expiresOnYear: Int

  # All values that are not equal to given value.
  expiresOnYear_not: Int

  # All values that are contained in given list.
  expiresOnYear_in: [Int!]

  # All values that are not contained in given list.
  expiresOnYear_not_in: [Int!]

  # All values less than the given value.
  expiresOnYear_lt: Int

  # All values less than or equal the given value.
  expiresOnYear_lte: Int

  # All values greater than the given value.
  expiresOnYear_gt: Int

  # All values greater than or equal the given value.
  expiresOnYear_gte: Int
  firstName: String

  # All values that are not equal to given value.
  firstName_not: String

  # All values that are contained in given list.
  firstName_in: [String!]

  # All values that are not contained in given list.
  firstName_not_in: [String!]

  # All values less than the given value.
  firstName_lt: String

  # All values less than or equal the given value.
  firstName_lte: String

  # All values greater than the given value.
  firstName_gt: String

  # All values greater than or equal the given value.
  firstName_gte: String

  # All values containing the given string.
  firstName_contains: String

  # All values not containing the given string.
  firstName_not_contains: String

  # All values starting with the given string.
  firstName_starts_with: String

  # All values not starting with the given string.
  firstName_not_starts_with: String

  # All values ending with the given string.
  firstName_ends_with: String

  # All values not ending with the given string.
  firstName_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  lastName: String

  # All values that are not equal to given value.
  lastName_not: String

  # All values that are contained in given list.
  lastName_in: [String!]

  # All values that are not contained in given list.
  lastName_not_in: [String!]

  # All values less than the given value.
  lastName_lt: String

  # All values less than or equal the given value.
  lastName_lte: String

  # All values greater than the given value.
  lastName_gt: String

  # All values greater than or equal the given value.
  lastName_gte: String

  # All values containing the given string.
  lastName_contains: String

  # All values not containing the given string.
  lastName_not_contains: String

  # All values starting with the given string.
  lastName_starts_with: String

  # All values not starting with the given string.
  lastName_not_starts_with: String

  # All values ending with the given string.
  lastName_ends_with: String

  # All values not ending with the given string.
  lastName_not_ends_with: String
  postalCode: String

  # All values that are not equal to given value.
  postalCode_not: String

  # All values that are contained in given list.
  postalCode_in: [String!]

  # All values that are not contained in given list.
  postalCode_not_in: [String!]

  # All values less than the given value.
  postalCode_lt: String

  # All values less than or equal the given value.
  postalCode_lte: String

  # All values greater than the given value.
  postalCode_gt: String

  # All values greater than or equal the given value.
  postalCode_gte: String

  # All values containing the given string.
  postalCode_contains: String

  # All values not containing the given string.
  postalCode_not_contains: String

  # All values starting with the given string.
  postalCode_starts_with: String

  # All values not starting with the given string.
  postalCode_not_starts_with: String

  # All values ending with the given string.
  postalCode_ends_with: String

  # All values not ending with the given string.
  postalCode_not_ends_with: String
  securityCode: String

  # All values that are not equal to given value.
  securityCode_not: String

  # All values that are contained in given list.
  securityCode_in: [String!]

  # All values that are not contained in given list.
  securityCode_not_in: [String!]

  # All values less than the given value.
  securityCode_lt: String

  # All values less than or equal the given value.
  securityCode_lte: String

  # All values greater than the given value.
  securityCode_gt: String

  # All values greater than or equal the given value.
  securityCode_gte: String

  # All values containing the given string.
  securityCode_contains: String

  # All values not containing the given string.
  securityCode_not_contains: String

  # All values starting with the given string.
  securityCode_starts_with: String

  # All values not starting with the given string.
  securityCode_not_starts_with: String

  # All values ending with the given string.
  securityCode_ends_with: String

  # All values not ending with the given string.
  securityCode_not_ends_with: String
  paymentAccount: PaymentAccountFilter
}

type CreditCardInformationSubscriptionPayload {
  mutation: _ModelMutationType!
  node: CreditCardInformation
  updatedFields: [String!]
  previousValues: CreditCardInformationPreviousValues
}

enum CURRENCY {
  CAD
  CHF
  EUR
  JPY
  USD
  ZAR
}

scalar DateTime

type Experience implements Node {
  category(filter: ExperienceCategoryFilter): ExperienceCategory
  host(filter: UserFilter): User!
  id: ID!
  location(filter: LocationFilter): Location!
  popularity: Int!
  preview(filter: PictureFilter): Picture!
  pricePerPerson: Int!
  reviews(
    filter: ReviewFilter
    orderBy: ReviewOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Review!]
  title: String!

  # Meta information about the query.
  _reviewsMeta(
    filter: ReviewFilter
    orderBy: ReviewOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!
}

type ExperienceCategory implements Node {
  experience(filter: ExperienceFilter): Experience
  id: ID!
  mainColor: String!
  name: String!
}

input ExperiencecategoryExperienceCategory {
  mainColor: String
  name: String!
}

input ExperienceCategoryexperienceExperience {
  popularity: Int!
  pricePerPerson: Int!
  title: String!
  hostId: ID
  host: ExperiencehostUser
  locationId: ID
  location: ExperiencelocationLocation
  previewId: ID
  preview: ExperiencepreviewPicture
  reviewsIds: [ID!]
  reviews: [ExperiencereviewsReview!]
}

input ExperienceCategoryFilter {
  # Logical AND on all given filters.
  AND: [ExperienceCategoryFilter!]

  # Logical OR on all given filters.
  OR: [ExperienceCategoryFilter!]
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  mainColor: String

  # All values that are not equal to given value.
  mainColor_not: String

  # All values that are contained in given list.
  mainColor_in: [String!]

  # All values that are not contained in given list.
  mainColor_not_in: [String!]

  # All values less than the given value.
  mainColor_lt: String

  # All values less than or equal the given value.
  mainColor_lte: String

  # All values greater than the given value.
  mainColor_gt: String

  # All values greater than or equal the given value.
  mainColor_gte: String

  # All values containing the given string.
  mainColor_contains: String

  # All values not containing the given string.
  mainColor_not_contains: String

  # All values starting with the given string.
  mainColor_starts_with: String

  # All values not starting with the given string.
  mainColor_not_starts_with: String

  # All values ending with the given string.
  mainColor_ends_with: String

  # All values not ending with the given string.
  mainColor_not_ends_with: String
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  experience: ExperienceFilter
}

enum ExperienceCategoryOrderBy {
  id_ASC
  id_DESC
  mainColor_ASC
  mainColor_DESC
  name_ASC
  name_DESC
}

type ExperienceCategoryPreviousValues {
  id: ID!
  mainColor: String!
  name: String!
}

input ExperienceCategorySubscriptionFilter {
  # Logical AND on all given filters.
  AND: [ExperienceCategorySubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [ExperienceCategorySubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: ExperienceCategorySubscriptionFilterNode
}

input ExperienceCategorySubscriptionFilterNode {
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  mainColor: String

  # All values that are not equal to given value.
  mainColor_not: String

  # All values that are contained in given list.
  mainColor_in: [String!]

  # All values that are not contained in given list.
  mainColor_not_in: [String!]

  # All values less than the given value.
  mainColor_lt: String

  # All values less than or equal the given value.
  mainColor_lte: String

  # All values greater than the given value.
  mainColor_gt: String

  # All values greater than or equal the given value.
  mainColor_gte: String

  # All values containing the given string.
  mainColor_contains: String

  # All values not containing the given string.
  mainColor_not_contains: String

  # All values starting with the given string.
  mainColor_starts_with: String

  # All values not starting with the given string.
  mainColor_not_starts_with: String

  # All values ending with the given string.
  mainColor_ends_with: String

  # All values not ending with the given string.
  mainColor_not_ends_with: String
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  experience: ExperienceFilter
}

type ExperienceCategorySubscriptionPayload {
  mutation: _ModelMutationType!
  node: ExperienceCategory
  updatedFields: [String!]
  previousValues: ExperienceCategoryPreviousValues
}

input ExperienceFilter {
  # Logical AND on all given filters.
  AND: [ExperienceFilter!]

  # Logical OR on all given filters.
  OR: [ExperienceFilter!]
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  popularity: Int

  # All values that are not equal to given value.
  popularity_not: Int

  # All values that are contained in given list.
  popularity_in: [Int!]

  # All values that are not contained in given list.
  popularity_not_in: [Int!]

  # All values less than the given value.
  popularity_lt: Int

  # All values less than or equal the given value.
  popularity_lte: Int

  # All values greater than the given value.
  popularity_gt: Int

  # All values greater than or equal the given value.
  popularity_gte: Int
  pricePerPerson: Int

  # All values that are not equal to given value.
  pricePerPerson_not: Int

  # All values that are contained in given list.
  pricePerPerson_in: [Int!]

  # All values that are not contained in given list.
  pricePerPerson_not_in: [Int!]

  # All values less than the given value.
  pricePerPerson_lt: Int

  # All values less than or equal the given value.
  pricePerPerson_lte: Int

  # All values greater than the given value.
  pricePerPerson_gt: Int

  # All values greater than or equal the given value.
  pricePerPerson_gte: Int
  title: String

  # All values that are not equal to given value.
  title_not: String

  # All values that are contained in given list.
  title_in: [String!]

  # All values that are not contained in given list.
  title_not_in: [String!]

  # All values less than the given value.
  title_lt: String

  # All values less than or equal the given value.
  title_lte: String

  # All values greater than the given value.
  title_gt: String

  # All values greater than or equal the given value.
  title_gte: String

  # All values containing the given string.
  title_contains: String

  # All values not containing the given string.
  title_not_contains: String

  # All values starting with the given string.
  title_starts_with: String

  # All values not starting with the given string.
  title_not_starts_with: String

  # All values ending with the given string.
  title_ends_with: String

  # All values not ending with the given string.
  title_not_ends_with: String
  category: ExperienceCategoryFilter
  host: UserFilter
  location: LocationFilter
  preview: PictureFilter
  reviews_every: ReviewFilter
  reviews_some: ReviewFilter
  reviews_none: ReviewFilter
}

input ExperiencehostUser {
  email: String!
  firstName: String!
  isSuperHost: Boolean
  lastName: String!
  password: String!
  phone: String!
  responseRate: Float
  responseTime: Int
  locationId: ID
  location: UserlocationLocation
  profilePictureId: ID
  profilePicture: UserprofilePicturePicture
  bookingsIds: [ID!]
  bookings: [UserbookingsBooking!]
  hostingExperiencesIds: [ID!]
  hostingExperiences: [UserhostingExperiencesExperience!]
  notificationsIds: [ID!]
  notifications: [UsernotificationsNotification!]
  ownedPlacesIds: [ID!]
  ownedPlaces: [UserownedPlacesPlace!]
  paymentAccountIds: [ID!]
  paymentAccount: [UserpaymentAccountPaymentAccount!]
  receivedMessagesIds: [ID!]
  receivedMessages: [UserreceivedMessagesMessage!]
  sentMessagesIds: [ID!]
  sentMessages: [UsersentMessagesMessage!]
}

input ExperiencelocationLocation {
  address: String
  directions: String
  lat: Float!
  lng: Float!
  neighbourHoodId: ID
  neighbourHood: LocationneighbourHoodNeighbourhood
  placeId: ID
  place: LocationplacePlace
  restaurantId: ID
  restaurant: LocationrestaurantRestaurant
  userId: ID
  user: LocationuserUser
}

enum ExperienceOrderBy {
  id_ASC
  id_DESC
  popularity_ASC
  popularity_DESC
  pricePerPerson_ASC
  pricePerPerson_DESC
  title_ASC
  title_DESC
}

input ExperiencepreviewPicture {
  url: String!
  neighbourHoodId: ID
  neighbourHood: PictureneighbourHoodNeighbourhood
  placeId: ID
  place: PictureplacePlace
  reservationId: ID
  reservation: PicturereservationRestaurant
  userId: ID
  user: PictureuserUser
}

type ExperiencePreviousValues {
  id: ID!
  popularity: Int!
  pricePerPerson: Int!
  title: String!
}

input ExperiencereviewsReview {
  accuracy: Int!
  checkIn: Int!
  cleanliness: Int!
  communication: Int!
  location: Int!
  stars: Int!
  text: String!
  value: Int!
  placeId: ID
  place: ReviewplacePlace
}

input ExperienceSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [ExperienceSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [ExperienceSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: ExperienceSubscriptionFilterNode
}

input ExperienceSubscriptionFilterNode {
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  popularity: Int

  # All values that are not equal to given value.
  popularity_not: Int

  # All values that are contained in given list.
  popularity_in: [Int!]

  # All values that are not contained in given list.
  popularity_not_in: [Int!]

  # All values less than the given value.
  popularity_lt: Int

  # All values less than or equal the given value.
  popularity_lte: Int

  # All values greater than the given value.
  popularity_gt: Int

  # All values greater than or equal the given value.
  popularity_gte: Int
  pricePerPerson: Int

  # All values that are not equal to given value.
  pricePerPerson_not: Int

  # All values that are contained in given list.
  pricePerPerson_in: [Int!]

  # All values that are not contained in given list.
  pricePerPerson_not_in: [Int!]

  # All values less than the given value.
  pricePerPerson_lt: Int

  # All values less than or equal the given value.
  pricePerPerson_lte: Int

  # All values greater than the given value.
  pricePerPerson_gt: Int

  # All values greater than or equal the given value.
  pricePerPerson_gte: Int
  title: String

  # All values that are not equal to given value.
  title_not: String

  # All values that are contained in given list.
  title_in: [String!]

  # All values that are not contained in given list.
  title_not_in: [String!]

  # All values less than the given value.
  title_lt: String

  # All values less than or equal the given value.
  title_lte: String

  # All values greater than the given value.
  title_gt: String

  # All values greater than or equal the given value.
  title_gte: String

  # All values containing the given string.
  title_contains: String

  # All values not containing the given string.
  title_not_contains: String

  # All values starting with the given string.
  title_starts_with: String

  # All values not starting with the given string.
  title_not_starts_with: String

  # All values ending with the given string.
  title_ends_with: String

  # All values not ending with the given string.
  title_not_ends_with: String
  category: ExperienceCategoryFilter
  host: UserFilter
  location: LocationFilter
  preview: PictureFilter
  reviews_every: ReviewFilter
  reviews_some: ReviewFilter
  reviews_none: ReviewFilter
}

type ExperienceSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Experience
  updatedFields: [String!]
  previousValues: ExperiencePreviousValues
}

type GuestRequirements implements Node {
  govIssuedId: Boolean!
  guestTripInformation: Boolean!
  id: ID!
  place(filter: PlaceFilter): Place!
  recommendationsFromOtherHosts: Boolean!
}

input GuestRequirementsFilter {
  # Logical AND on all given filters.
  AND: [GuestRequirementsFilter!]

  # Logical OR on all given filters.
  OR: [GuestRequirementsFilter!]
  govIssuedId: Boolean

  # All values that are not equal to given value.
  govIssuedId_not: Boolean
  guestTripInformation: Boolean

  # All values that are not equal to given value.
  guestTripInformation_not: Boolean
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  recommendationsFromOtherHosts: Boolean

  # All values that are not equal to given value.
  recommendationsFromOtherHosts_not: Boolean
  place: PlaceFilter
}

enum GuestRequirementsOrderBy {
  govIssuedId_ASC
  govIssuedId_DESC
  guestTripInformation_ASC
  guestTripInformation_DESC
  id_ASC
  id_DESC
  recommendationsFromOtherHosts_ASC
  recommendationsFromOtherHosts_DESC
}

input GuestRequirementsplacePlace {
  description: String!
  maxGuests: Int!
  name: String
  numBaths: Int!
  numBedrooms: Int!
  numBeds: Int!
  popularity: Int!
  shortDescription: String!
  size: PLACE_SIZES
  slug: String!
  amenitiesId: ID
  amenities: PlaceamenitiesAmenities
  hostId: ID
  host: PlacehostUser
  houseRulesId: ID
  houseRules: PlacehouseRulesHouseRules
  locationId: ID
  location: PlacelocationLocation
  policiesId: ID
  policies: PlacepoliciesPolicies
  pricingId: ID
  pricing: PlacepricingPricing
  viewsId: ID
  views: PlaceviewsPlaceViews
  bookingsIds: [ID!]
  bookings: [PlacebookingsBooking!]
  picturesIds: [ID!]
  pictures: [PlacepicturesPicture!]
  reviewsIds: [ID!]
  reviews: [PlacereviewsReview!]
}

type GuestRequirementsPreviousValues {
  govIssuedId: Boolean!
  guestTripInformation: Boolean!
  id: ID!
  recommendationsFromOtherHosts: Boolean!
}

input GuestRequirementsSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [GuestRequirementsSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [GuestRequirementsSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: GuestRequirementsSubscriptionFilterNode
}

input GuestRequirementsSubscriptionFilterNode {
  govIssuedId: Boolean

  # All values that are not equal to given value.
  govIssuedId_not: Boolean
  guestTripInformation: Boolean

  # All values that are not equal to given value.
  guestTripInformation_not: Boolean
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  recommendationsFromOtherHosts: Boolean

  # All values that are not equal to given value.
  recommendationsFromOtherHosts_not: Boolean
  place: PlaceFilter
}

type GuestRequirementsSubscriptionPayload {
  mutation: _ModelMutationType!
  node: GuestRequirements
  updatedFields: [String!]
  previousValues: GuestRequirementsPreviousValues
}

type HouseRules implements Node {
  additionalRules: String
  createdAt: DateTime!
  id: ID!
  partiesAndEventsAllowed: Boolean
  petsAllowed: Boolean
  place(filter: PlaceFilter): Place!
  smokingAllowed: Boolean
  suitableForChildren: Boolean
  suitableForInfants: Boolean
  updatedAt: DateTime!
}

input HouseRulesFilter {
  # Logical AND on all given filters.
  AND: [HouseRulesFilter!]

  # Logical OR on all given filters.
  OR: [HouseRulesFilter!]
  additionalRules: String

  # All values that are not equal to given value.
  additionalRules_not: String

  # All values that are contained in given list.
  additionalRules_in: [String!]

  # All values that are not contained in given list.
  additionalRules_not_in: [String!]

  # All values less than the given value.
  additionalRules_lt: String

  # All values less than or equal the given value.
  additionalRules_lte: String

  # All values greater than the given value.
  additionalRules_gt: String

  # All values greater than or equal the given value.
  additionalRules_gte: String

  # All values containing the given string.
  additionalRules_contains: String

  # All values not containing the given string.
  additionalRules_not_contains: String

  # All values starting with the given string.
  additionalRules_starts_with: String

  # All values not starting with the given string.
  additionalRules_not_starts_with: String

  # All values ending with the given string.
  additionalRules_ends_with: String

  # All values not ending with the given string.
  additionalRules_not_ends_with: String
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  partiesAndEventsAllowed: Boolean

  # All values that are not equal to given value.
  partiesAndEventsAllowed_not: Boolean
  petsAllowed: Boolean

  # All values that are not equal to given value.
  petsAllowed_not: Boolean
  smokingAllowed: Boolean

  # All values that are not equal to given value.
  smokingAllowed_not: Boolean
  suitableForChildren: Boolean

  # All values that are not equal to given value.
  suitableForChildren_not: Boolean
  suitableForInfants: Boolean

  # All values that are not equal to given value.
  suitableForInfants_not: Boolean
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  place: PlaceFilter
}

enum HouseRulesOrderBy {
  additionalRules_ASC
  additionalRules_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  partiesAndEventsAllowed_ASC
  partiesAndEventsAllowed_DESC
  petsAllowed_ASC
  petsAllowed_DESC
  smokingAllowed_ASC
  smokingAllowed_DESC
  suitableForChildren_ASC
  suitableForChildren_DESC
  suitableForInfants_ASC
  suitableForInfants_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input HouseRulesplacePlace {
  description: String!
  maxGuests: Int!
  name: String
  numBaths: Int!
  numBedrooms: Int!
  numBeds: Int!
  popularity: Int!
  shortDescription: String!
  size: PLACE_SIZES
  slug: String!
  amenitiesId: ID
  amenities: PlaceamenitiesAmenities
  guestRequirementsId: ID
  guestRequirements: PlaceguestRequirementsGuestRequirements
  hostId: ID
  host: PlacehostUser
  locationId: ID
  location: PlacelocationLocation
  policiesId: ID
  policies: PlacepoliciesPolicies
  pricingId: ID
  pricing: PlacepricingPricing
  viewsId: ID
  views: PlaceviewsPlaceViews
  bookingsIds: [ID!]
  bookings: [PlacebookingsBooking!]
  picturesIds: [ID!]
  pictures: [PlacepicturesPicture!]
  reviewsIds: [ID!]
  reviews: [PlacereviewsReview!]
}

type HouseRulesPreviousValues {
  additionalRules: String
  createdAt: DateTime!
  id: ID!
  partiesAndEventsAllowed: Boolean
  petsAllowed: Boolean
  smokingAllowed: Boolean
  suitableForChildren: Boolean
  suitableForInfants: Boolean
  updatedAt: DateTime!
}

input HouseRulesSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [HouseRulesSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [HouseRulesSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: HouseRulesSubscriptionFilterNode
}

input HouseRulesSubscriptionFilterNode {
  additionalRules: String

  # All values that are not equal to given value.
  additionalRules_not: String

  # All values that are contained in given list.
  additionalRules_in: [String!]

  # All values that are not contained in given list.
  additionalRules_not_in: [String!]

  # All values less than the given value.
  additionalRules_lt: String

  # All values less than or equal the given value.
  additionalRules_lte: String

  # All values greater than the given value.
  additionalRules_gt: String

  # All values greater than or equal the given value.
  additionalRules_gte: String

  # All values containing the given string.
  additionalRules_contains: String

  # All values not containing the given string.
  additionalRules_not_contains: String

  # All values starting with the given string.
  additionalRules_starts_with: String

  # All values not starting with the given string.
  additionalRules_not_starts_with: String

  # All values ending with the given string.
  additionalRules_ends_with: String

  # All values not ending with the given string.
  additionalRules_not_ends_with: String
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  partiesAndEventsAllowed: Boolean

  # All values that are not equal to given value.
  partiesAndEventsAllowed_not: Boolean
  petsAllowed: Boolean

  # All values that are not equal to given value.
  petsAllowed_not: Boolean
  smokingAllowed: Boolean

  # All values that are not equal to given value.
  smokingAllowed_not: Boolean
  suitableForChildren: Boolean

  # All values that are not equal to given value.
  suitableForChildren_not: Boolean
  suitableForInfants: Boolean

  # All values that are not equal to given value.
  suitableForInfants_not: Boolean
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  place: PlaceFilter
}

type HouseRulesSubscriptionPayload {
  mutation: _ModelMutationType!
  node: HouseRules
  updatedFields: [String!]
  previousValues: HouseRulesPreviousValues
}

type Location implements Node {
  address: String
  directions: String
  experience(filter: ExperienceFilter): Experience
  id: ID!
  lat: Float!
  lng: Float!
  neighbourHood(filter: NeighbourhoodFilter): Neighbourhood
  place(filter: PlaceFilter): Place
  restaurant(filter: RestaurantFilter): Restaurant
  user(filter: UserFilter): User
}

input LocationexperienceExperience {
  popularity: Int!
  pricePerPerson: Int!
  title: String!
  categoryId: ID
  category: ExperiencecategoryExperienceCategory
  hostId: ID
  host: ExperiencehostUser
  previewId: ID
  preview: ExperiencepreviewPicture
  reviewsIds: [ID!]
  reviews: [ExperiencereviewsReview!]
}

input LocationFilter {
  # Logical AND on all given filters.
  AND: [LocationFilter!]

  # Logical OR on all given filters.
  OR: [LocationFilter!]
  address: String

  # All values that are not equal to given value.
  address_not: String

  # All values that are contained in given list.
  address_in: [String!]

  # All values that are not contained in given list.
  address_not_in: [String!]

  # All values less than the given value.
  address_lt: String

  # All values less than or equal the given value.
  address_lte: String

  # All values greater than the given value.
  address_gt: String

  # All values greater than or equal the given value.
  address_gte: String

  # All values containing the given string.
  address_contains: String

  # All values not containing the given string.
  address_not_contains: String

  # All values starting with the given string.
  address_starts_with: String

  # All values not starting with the given string.
  address_not_starts_with: String

  # All values ending with the given string.
  address_ends_with: String

  # All values not ending with the given string.
  address_not_ends_with: String
  directions: String

  # All values that are not equal to given value.
  directions_not: String

  # All values that are contained in given list.
  directions_in: [String!]

  # All values that are not contained in given list.
  directions_not_in: [String!]

  # All values less than the given value.
  directions_lt: String

  # All values less than or equal the given value.
  directions_lte: String

  # All values greater than the given value.
  directions_gt: String

  # All values greater than or equal the given value.
  directions_gte: String

  # All values containing the given string.
  directions_contains: String

  # All values not containing the given string.
  directions_not_contains: String

  # All values starting with the given string.
  directions_starts_with: String

  # All values not starting with the given string.
  directions_not_starts_with: String

  # All values ending with the given string.
  directions_ends_with: String

  # All values not ending with the given string.
  directions_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  lat: Float

  # All values that are not equal to given value.
  lat_not: Float

  # All values that are contained in given list.
  lat_in: [Float!]

  # All values that are not contained in given list.
  lat_not_in: [Float!]

  # All values less than the given value.
  lat_lt: Float

  # All values less than or equal the given value.
  lat_lte: Float

  # All values greater than the given value.
  lat_gt: Float

  # All values greater than or equal the given value.
  lat_gte: Float
  lng: Float

  # All values that are not equal to given value.
  lng_not: Float

  # All values that are contained in given list.
  lng_in: [Float!]

  # All values that are not contained in given list.
  lng_not_in: [Float!]

  # All values less than the given value.
  lng_lt: Float

  # All values less than or equal the given value.
  lng_lte: Float

  # All values greater than the given value.
  lng_gt: Float

  # All values greater than or equal the given value.
  lng_gte: Float
  experience: ExperienceFilter
  neighbourHood: NeighbourhoodFilter
  place: PlaceFilter
  restaurant: RestaurantFilter
  user: UserFilter
}

input LocationneighbourHoodNeighbourhood {
  featured: Boolean!
  name: String!
  popularity: Int!
  slug: String!
  cityId: ID
  city: NeighbourhoodcityCity
  homePreviewId: ID
  homePreview: NeighbourhoodhomePreviewPicture
  locationsIds: [ID!]
  locations: [NeighbourhoodlocationsLocation!]
}

enum LocationOrderBy {
  address_ASC
  address_DESC
  directions_ASC
  directions_DESC
  id_ASC
  id_DESC
  lat_ASC
  lat_DESC
  lng_ASC
  lng_DESC
}

input LocationplacePlace {
  description: String!
  maxGuests: Int!
  name: String
  numBaths: Int!
  numBedrooms: Int!
  numBeds: Int!
  popularity: Int!
  shortDescription: String!
  size: PLACE_SIZES
  slug: String!
  amenitiesId: ID
  amenities: PlaceamenitiesAmenities
  guestRequirementsId: ID
  guestRequirements: PlaceguestRequirementsGuestRequirements
  hostId: ID
  host: PlacehostUser
  houseRulesId: ID
  houseRules: PlacehouseRulesHouseRules
  policiesId: ID
  policies: PlacepoliciesPolicies
  pricingId: ID
  pricing: PlacepricingPricing
  viewsId: ID
  views: PlaceviewsPlaceViews
  bookingsIds: [ID!]
  bookings: [PlacebookingsBooking!]
  picturesIds: [ID!]
  pictures: [PlacepicturesPicture!]
  reviewsIds: [ID!]
  reviews: [PlacereviewsReview!]
}

type LocationPreviousValues {
  address: String
  directions: String
  id: ID!
  lat: Float!
  lng: Float!
}

input LocationrestaurantRestaurant {
  avgPricePerPerson: Int!
  isCurated: Boolean
  popularity: Int!
  slug: String!
  title: String!
  picturesIds: [ID!]
  pictures: [RestaurantpicturesPicture!]
}

input LocationSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [LocationSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [LocationSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: LocationSubscriptionFilterNode
}

input LocationSubscriptionFilterNode {
  address: String

  # All values that are not equal to given value.
  address_not: String

  # All values that are contained in given list.
  address_in: [String!]

  # All values that are not contained in given list.
  address_not_in: [String!]

  # All values less than the given value.
  address_lt: String

  # All values less than or equal the given value.
  address_lte: String

  # All values greater than the given value.
  address_gt: String

  # All values greater than or equal the given value.
  address_gte: String

  # All values containing the given string.
  address_contains: String

  # All values not containing the given string.
  address_not_contains: String

  # All values starting with the given string.
  address_starts_with: String

  # All values not starting with the given string.
  address_not_starts_with: String

  # All values ending with the given string.
  address_ends_with: String

  # All values not ending with the given string.
  address_not_ends_with: String
  directions: String

  # All values that are not equal to given value.
  directions_not: String

  # All values that are contained in given list.
  directions_in: [String!]

  # All values that are not contained in given list.
  directions_not_in: [String!]

  # All values less than the given value.
  directions_lt: String

  # All values less than or equal the given value.
  directions_lte: String

  # All values greater than the given value.
  directions_gt: String

  # All values greater than or equal the given value.
  directions_gte: String

  # All values containing the given string.
  directions_contains: String

  # All values not containing the given string.
  directions_not_contains: String

  # All values starting with the given string.
  directions_starts_with: String

  # All values not starting with the given string.
  directions_not_starts_with: String

  # All values ending with the given string.
  directions_ends_with: String

  # All values not ending with the given string.
  directions_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  lat: Float

  # All values that are not equal to given value.
  lat_not: Float

  # All values that are contained in given list.
  lat_in: [Float!]

  # All values that are not contained in given list.
  lat_not_in: [Float!]

  # All values less than the given value.
  lat_lt: Float

  # All values less than or equal the given value.
  lat_lte: Float

  # All values greater than the given value.
  lat_gt: Float

  # All values greater than or equal the given value.
  lat_gte: Float
  lng: Float

  # All values that are not equal to given value.
  lng_not: Float

  # All values that are contained in given list.
  lng_in: [Float!]

  # All values that are not contained in given list.
  lng_not_in: [Float!]

  # All values less than the given value.
  lng_lt: Float

  # All values less than or equal the given value.
  lng_lte: Float

  # All values greater than the given value.
  lng_gt: Float

  # All values greater than or equal the given value.
  lng_gte: Float
  experience: ExperienceFilter
  neighbourHood: NeighbourhoodFilter
  place: PlaceFilter
  restaurant: RestaurantFilter
  user: UserFilter
}

type LocationSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Location
  updatedFields: [String!]
  previousValues: LocationPreviousValues
}

input LocationuserUser {
  email: String!
  firstName: String!
  isSuperHost: Boolean
  lastName: String!
  password: String!
  phone: String!
  responseRate: Float
  responseTime: Int
  profilePictureId: ID
  profilePicture: UserprofilePicturePicture
  bookingsIds: [ID!]
  bookings: [UserbookingsBooking!]
  hostingExperiencesIds: [ID!]
  hostingExperiences: [UserhostingExperiencesExperience!]
  notificationsIds: [ID!]
  notifications: [UsernotificationsNotification!]
  ownedPlacesIds: [ID!]
  ownedPlaces: [UserownedPlacesPlace!]
  paymentAccountIds: [ID!]
  paymentAccount: [UserpaymentAccountPaymentAccount!]
  receivedMessagesIds: [ID!]
  receivedMessages: [UserreceivedMessagesMessage!]
  sentMessagesIds: [ID!]
  sentMessages: [UsersentMessagesMessage!]
}

type Message implements Node {
  createdAt: DateTime!
  deliveredAt: DateTime!
  from(filter: UserFilter): User!
  id: ID!
  readAt: DateTime!
  to(filter: UserFilter): User!
}

input MessageFilter {
  # Logical AND on all given filters.
  AND: [MessageFilter!]

  # Logical OR on all given filters.
  OR: [MessageFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  deliveredAt: DateTime

  # All values that are not equal to given value.
  deliveredAt_not: DateTime

  # All values that are contained in given list.
  deliveredAt_in: [DateTime!]

  # All values that are not contained in given list.
  deliveredAt_not_in: [DateTime!]

  # All values less than the given value.
  deliveredAt_lt: DateTime

  # All values less than or equal the given value.
  deliveredAt_lte: DateTime

  # All values greater than the given value.
  deliveredAt_gt: DateTime

  # All values greater than or equal the given value.
  deliveredAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  readAt: DateTime

  # All values that are not equal to given value.
  readAt_not: DateTime

  # All values that are contained in given list.
  readAt_in: [DateTime!]

  # All values that are not contained in given list.
  readAt_not_in: [DateTime!]

  # All values less than the given value.
  readAt_lt: DateTime

  # All values less than or equal the given value.
  readAt_lte: DateTime

  # All values greater than the given value.
  readAt_gt: DateTime

  # All values greater than or equal the given value.
  readAt_gte: DateTime
  from: UserFilter
  to: UserFilter
}

input MessagefromUser {
  email: String!
  firstName: String!
  isSuperHost: Boolean
  lastName: String!
  password: String!
  phone: String!
  responseRate: Float
  responseTime: Int
  locationId: ID
  location: UserlocationLocation
  profilePictureId: ID
  profilePicture: UserprofilePicturePicture
  bookingsIds: [ID!]
  bookings: [UserbookingsBooking!]
  hostingExperiencesIds: [ID!]
  hostingExperiences: [UserhostingExperiencesExperience!]
  notificationsIds: [ID!]
  notifications: [UsernotificationsNotification!]
  ownedPlacesIds: [ID!]
  ownedPlaces: [UserownedPlacesPlace!]
  paymentAccountIds: [ID!]
  paymentAccount: [UserpaymentAccountPaymentAccount!]
  receivedMessagesIds: [ID!]
  receivedMessages: [UserreceivedMessagesMessage!]
  sentMessagesIds: [ID!]
  sentMessages: [UsersentMessagesMessage!]
}

enum MessageOrderBy {
  createdAt_ASC
  createdAt_DESC
  deliveredAt_ASC
  deliveredAt_DESC
  id_ASC
  id_DESC
  readAt_ASC
  readAt_DESC
}

type MessagePreviousValues {
  createdAt: DateTime!
  deliveredAt: DateTime!
  id: ID!
  readAt: DateTime!
}

input MessageSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [MessageSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [MessageSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: MessageSubscriptionFilterNode
}

input MessageSubscriptionFilterNode {
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  deliveredAt: DateTime

  # All values that are not equal to given value.
  deliveredAt_not: DateTime

  # All values that are contained in given list.
  deliveredAt_in: [DateTime!]

  # All values that are not contained in given list.
  deliveredAt_not_in: [DateTime!]

  # All values less than the given value.
  deliveredAt_lt: DateTime

  # All values less than or equal the given value.
  deliveredAt_lte: DateTime

  # All values greater than the given value.
  deliveredAt_gt: DateTime

  # All values greater than or equal the given value.
  deliveredAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  readAt: DateTime

  # All values that are not equal to given value.
  readAt_not: DateTime

  # All values that are contained in given list.
  readAt_in: [DateTime!]

  # All values that are not contained in given list.
  readAt_not_in: [DateTime!]

  # All values less than the given value.
  readAt_lt: DateTime

  # All values less than or equal the given value.
  readAt_lte: DateTime

  # All values greater than the given value.
  readAt_gt: DateTime

  # All values greater than or equal the given value.
  readAt_gte: DateTime
  from: UserFilter
  to: UserFilter
}

type MessageSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessagetoUser {
  email: String!
  firstName: String!
  isSuperHost: Boolean
  lastName: String!
  password: String!
  phone: String!
  responseRate: Float
  responseTime: Int
  locationId: ID
  location: UserlocationLocation
  profilePictureId: ID
  profilePicture: UserprofilePicturePicture
  bookingsIds: [ID!]
  bookings: [UserbookingsBooking!]
  hostingExperiencesIds: [ID!]
  hostingExperiences: [UserhostingExperiencesExperience!]
  notificationsIds: [ID!]
  notifications: [UsernotificationsNotification!]
  ownedPlacesIds: [ID!]
  ownedPlaces: [UserownedPlacesPlace!]
  paymentAccountIds: [ID!]
  paymentAccount: [UserpaymentAccountPaymentAccount!]
  receivedMessagesIds: [ID!]
  receivedMessages: [UserreceivedMessagesMessage!]
  sentMessagesIds: [ID!]
  sentMessages: [UsersentMessagesMessage!]
}

type Mutation {
  createAmenities(
    airConditioning: Boolean
    babyBath: Boolean
    babyMonitor: Boolean
    babysitterRecommendations: Boolean
    bathtub: Boolean
    breakfast: Boolean
    buzzerWirelessIntercom: Boolean
    cableTv: Boolean
    changingTable: Boolean
    childrensBooksAndToys: Boolean
    childrensDinnerware: Boolean
    crib: Boolean
    doorman: Boolean
    dryer: Boolean
    elevator: Boolean
    essentials: Boolean
    familyKidFriendly: Boolean
    freeParkingOnPremises: Boolean
    freeParkingOnStreet: Boolean
    gym: Boolean
    hairDryer: Boolean
    hangers: Boolean
    heating: Boolean
    hotTub: Boolean
    indoorFireplace: Boolean
    internet: Boolean
    iron: Boolean
    kitchen: Boolean
    laptopFriendlyWorkspace: Boolean
    paidParkingOffPremises: Boolean
    petsAllowed: Boolean
    pool: Boolean
    privateEntrance: Boolean
    shampoo: Boolean
    smokingAllowed: Boolean
    suitableForEvents: Boolean
    tv: Boolean
    washer: Boolean
    wheelchairAccessible: Boolean
    wirelessInternet: Boolean
    placeId: ID
    place: AmenitiesplacePlace
  ): Amenities
  createBooking(
    endDate: DateTime!
    startDate: DateTime!
    bookeeId: ID
    bookee: BookingbookeeUser
    paymentId: ID
    payment: BookingpaymentPayment
    placeId: ID
    place: BookingplacePlace
  ): Booking
  createCity(name: String!, neighbourhoodsIds: [ID!], neighbourhoods: [CityneighbourhoodsNeighbourhood!]): City
  createCreditCardInformation(
    cardNumber: String!
    country: String!
    expiresOnMonth: Int!
    expiresOnYear: Int!
    firstName: String!
    lastName: String!
    postalCode: String!
    securityCode: String!
    paymentAccountId: ID
    paymentAccount: CreditCardInformationpaymentAccountPaymentAccount
  ): CreditCardInformation
  createExperience(
    popularity: Int!
    pricePerPerson: Int!
    title: String!
    categoryId: ID
    category: ExperiencecategoryExperienceCategory
    hostId: ID
    host: ExperiencehostUser
    locationId: ID
    location: ExperiencelocationLocation
    previewId: ID
    preview: ExperiencepreviewPicture
    reviewsIds: [ID!]
    reviews: [ExperiencereviewsReview!]
  ): Experience
  createExperienceCategory(
    mainColor: String
    name: String!
    experienceId: ID
    experience: ExperienceCategoryexperienceExperience
  ): ExperienceCategory
  createGuestRequirements(
    govIssuedId: Boolean
    guestTripInformation: Boolean
    recommendationsFromOtherHosts: Boolean
    placeId: ID
    place: GuestRequirementsplacePlace
  ): GuestRequirements
  createHouseRules(
    additionalRules: String
    partiesAndEventsAllowed: Boolean
    petsAllowed: Boolean
    smokingAllowed: Boolean
    suitableForChildren: Boolean
    suitableForInfants: Boolean
    placeId: ID
    place: HouseRulesplacePlace
  ): HouseRules
  createLocation(
    address: String
    directions: String
    lat: Float!
    lng: Float!
    experienceId: ID
    experience: LocationexperienceExperience
    neighbourHoodId: ID
    neighbourHood: LocationneighbourHoodNeighbourhood
    placeId: ID
    place: LocationplacePlace
    restaurantId: ID
    restaurant: LocationrestaurantRestaurant
    userId: ID
    user: LocationuserUser
  ): Location
  createMessage(
    deliveredAt: DateTime!
    readAt: DateTime!
    fromId: ID
    from: MessagefromUser
    toId: ID
    to: MessagetoUser
  ): Message
  createNeighbourhood(
    featured: Boolean!
    name: String!
    popularity: Int!
    slug: String!
    cityId: ID
    city: NeighbourhoodcityCity
    homePreviewId: ID
    homePreview: NeighbourhoodhomePreviewPicture
    locationsIds: [ID!]
    locations: [NeighbourhoodlocationsLocation!]
  ): Neighbourhood
  createNotification(
    link: String!
    readDate: DateTime!
    type: NOTIFICATION_TYPE
    userId: ID
    user: NotificationuserUser
  ): Notification
  createPayment(
    placePrice: Float!
    serviceFee: Float!
    totalPrice: Float!
    bookingId: ID
    booking: PaymentbookingBooking
    paymentMethodId: ID
    paymentMethod: PaymentpaymentMethodPaymentAccount
  ): Payment
  createPaymentAccount(
    type: PAYMENT_PROVIDER
    creditcardId: ID
    creditcard: PaymentAccountcreditcardCreditCardInformation
    paypalId: ID
    paypal: PaymentAccountpaypalPaypalInformation
    userId: ID
    user: PaymentAccountuserUser
    paymentsIds: [ID!]
    payments: [PaymentAccountpaymentsPayment!]
  ): PaymentAccount
  createPaypalInformation(
    email: String!
    paymentAccountId: ID
    paymentAccount: PaypalInformationpaymentAccountPaymentAccount
  ): PaypalInformation
  createPicture(
    url: String!
    experienceId: ID
    experience: PictureexperienceExperience
    neighbourHoodId: ID
    neighbourHood: PictureneighbourHoodNeighbourhood
    placeId: ID
    place: PictureplacePlace
    reservationId: ID
    reservation: PicturereservationRestaurant
    userId: ID
    user: PictureuserUser
  ): Picture
  createPlace(
    description: String!
    maxGuests: Int!
    name: String
    numBaths: Int!
    numBedrooms: Int!
    numBeds: Int!
    popularity: Int!
    shortDescription: String!
    size: PLACE_SIZES
    slug: String!
    amenitiesId: ID
    amenities: PlaceamenitiesAmenities
    guestRequirementsId: ID
    guestRequirements: PlaceguestRequirementsGuestRequirements
    hostId: ID
    host: PlacehostUser
    houseRulesId: ID
    houseRules: PlacehouseRulesHouseRules
    locationId: ID
    location: PlacelocationLocation
    policiesId: ID
    policies: PlacepoliciesPolicies
    pricingId: ID
    pricing: PlacepricingPricing
    viewsId: ID
    views: PlaceviewsPlaceViews
    bookingsIds: [ID!]
    bookings: [PlacebookingsBooking!]
    picturesIds: [ID!]
    pictures: [PlacepicturesPicture!]
    reviewsIds: [ID!]
    reviews: [PlacereviewsReview!]
  ): Place
  createPlaceViews(lastWeek: Int!, placeId: ID, place: PlaceViewsplacePlace): PlaceViews
  createPolicies(
    checkInEndTime: Float!
    checkInStartTime: Float!
    checkoutTime: Float!
    placeId: ID
    place: PoliciesplacePlace
  ): Policies
  createPricing(
    averageMonthly: Int!
    averageWeekly: Int!
    basePrice: Int!
    cleaningFee: Int
    currency: CURRENCY
    extraGuests: Int
    monthlyDiscount: Int
    perNight: Int!
    securityDeposit: Int
    smartPricing: Boolean
    weekendPricing: Int
    weeklyDiscount: Int
    placeId: ID
    place: PricingplacePlace
  ): Pricing
  createRestaurant(
    avgPricePerPerson: Int!
    isCurated: Boolean
    popularity: Int!
    slug: String!
    title: String!
    locationId: ID
    location: RestaurantlocationLocation
    picturesIds: [ID!]
    pictures: [RestaurantpicturesPicture!]
  ): Restaurant
  createReview(
    accuracy: Int!
    checkIn: Int!
    cleanliness: Int!
    communication: Int!
    location: Int!
    stars: Int!
    text: String!
    value: Int!
    experienceId: ID
    experience: ReviewexperienceExperience
    placeId: ID
    place: ReviewplacePlace
  ): Review
  updateAmenities(
    airConditioning: Boolean
    babyBath: Boolean
    babyMonitor: Boolean
    babysitterRecommendations: Boolean
    bathtub: Boolean
    breakfast: Boolean
    buzzerWirelessIntercom: Boolean
    cableTv: Boolean
    changingTable: Boolean
    childrensBooksAndToys: Boolean
    childrensDinnerware: Boolean
    crib: Boolean
    doorman: Boolean
    dryer: Boolean
    elevator: Boolean
    essentials: Boolean
    familyKidFriendly: Boolean
    freeParkingOnPremises: Boolean
    freeParkingOnStreet: Boolean
    gym: Boolean
    hairDryer: Boolean
    hangers: Boolean
    heating: Boolean
    hotTub: Boolean
    id: ID!
    indoorFireplace: Boolean
    internet: Boolean
    iron: Boolean
    kitchen: Boolean
    laptopFriendlyWorkspace: Boolean
    paidParkingOffPremises: Boolean
    petsAllowed: Boolean
    pool: Boolean
    privateEntrance: Boolean
    shampoo: Boolean
    smokingAllowed: Boolean
    suitableForEvents: Boolean
    tv: Boolean
    washer: Boolean
    wheelchairAccessible: Boolean
    wirelessInternet: Boolean
    placeId: ID
    place: AmenitiesplacePlace
  ): Amenities
  updateBooking(
    endDate: DateTime
    id: ID!
    startDate: DateTime
    bookeeId: ID
    bookee: BookingbookeeUser
    paymentId: ID
    payment: BookingpaymentPayment
    placeId: ID
    place: BookingplacePlace
  ): Booking
  updateCity(id: ID!, name: String, neighbourhoodsIds: [ID!], neighbourhoods: [CityneighbourhoodsNeighbourhood!]): City
  updateCreditCardInformation(
    cardNumber: String
    country: String
    expiresOnMonth: Int
    expiresOnYear: Int
    firstName: String
    id: ID!
    lastName: String
    postalCode: String
    securityCode: String
    paymentAccountId: ID
    paymentAccount: CreditCardInformationpaymentAccountPaymentAccount
  ): CreditCardInformation
  updateExperience(
    id: ID!
    popularity: Int
    pricePerPerson: Int
    title: String
    categoryId: ID
    category: ExperiencecategoryExperienceCategory
    hostId: ID
    host: ExperiencehostUser
    locationId: ID
    location: ExperiencelocationLocation
    previewId: ID
    preview: ExperiencepreviewPicture
    reviewsIds: [ID!]
    reviews: [ExperiencereviewsReview!]
  ): Experience
  updateExperienceCategory(
    id: ID!
    mainColor: String
    name: String
    experienceId: ID
    experience: ExperienceCategoryexperienceExperience
  ): ExperienceCategory
  updateGuestRequirements(
    govIssuedId: Boolean
    guestTripInformation: Boolean
    id: ID!
    recommendationsFromOtherHosts: Boolean
    placeId: ID
    place: GuestRequirementsplacePlace
  ): GuestRequirements
  updateHouseRules(
    additionalRules: String
    id: ID!
    partiesAndEventsAllowed: Boolean
    petsAllowed: Boolean
    smokingAllowed: Boolean
    suitableForChildren: Boolean
    suitableForInfants: Boolean
    placeId: ID
    place: HouseRulesplacePlace
  ): HouseRules
  updateLocation(
    address: String
    directions: String
    id: ID!
    lat: Float
    lng: Float
    experienceId: ID
    experience: LocationexperienceExperience
    neighbourHoodId: ID
    neighbourHood: LocationneighbourHoodNeighbourhood
    placeId: ID
    place: LocationplacePlace
    restaurantId: ID
    restaurant: LocationrestaurantRestaurant
    userId: ID
    user: LocationuserUser
  ): Location
  updateMessage(
    deliveredAt: DateTime
    id: ID!
    readAt: DateTime
    fromId: ID
    from: MessagefromUser
    toId: ID
    to: MessagetoUser
  ): Message
  updateNeighbourhood(
    featured: Boolean
    id: ID!
    name: String
    popularity: Int
    slug: String
    cityId: ID
    city: NeighbourhoodcityCity
    homePreviewId: ID
    homePreview: NeighbourhoodhomePreviewPicture
    locationsIds: [ID!]
    locations: [NeighbourhoodlocationsLocation!]
  ): Neighbourhood
  updateNotification(
    id: ID!
    link: String
    readDate: DateTime
    type: NOTIFICATION_TYPE
    userId: ID
    user: NotificationuserUser
  ): Notification
  updatePayment(
    id: ID!
    placePrice: Float
    serviceFee: Float
    totalPrice: Float
    bookingId: ID
    booking: PaymentbookingBooking
    paymentMethodId: ID
    paymentMethod: PaymentpaymentMethodPaymentAccount
  ): Payment
  updatePaymentAccount(
    id: ID!
    type: PAYMENT_PROVIDER
    creditcardId: ID
    creditcard: PaymentAccountcreditcardCreditCardInformation
    paypalId: ID
    paypal: PaymentAccountpaypalPaypalInformation
    userId: ID
    user: PaymentAccountuserUser
    paymentsIds: [ID!]
    payments: [PaymentAccountpaymentsPayment!]
  ): PaymentAccount
  updatePaypalInformation(
    email: String
    id: ID!
    paymentAccountId: ID
    paymentAccount: PaypalInformationpaymentAccountPaymentAccount
  ): PaypalInformation
  updatePicture(
    id: ID!
    url: String
    experienceId: ID
    experience: PictureexperienceExperience
    neighbourHoodId: ID
    neighbourHood: PictureneighbourHoodNeighbourhood
    placeId: ID
    place: PictureplacePlace
    reservationId: ID
    reservation: PicturereservationRestaurant
    userId: ID
    user: PictureuserUser
  ): Picture
  updatePlace(
    description: String
    id: ID!
    maxGuests: Int
    name: String
    numBaths: Int
    numBedrooms: Int
    numBeds: Int
    popularity: Int
    shortDescription: String
    size: PLACE_SIZES
    slug: String
    amenitiesId: ID
    amenities: PlaceamenitiesAmenities
    guestRequirementsId: ID
    guestRequirements: PlaceguestRequirementsGuestRequirements
    hostId: ID
    host: PlacehostUser
    houseRulesId: ID
    houseRules: PlacehouseRulesHouseRules
    locationId: ID
    location: PlacelocationLocation
    policiesId: ID
    policies: PlacepoliciesPolicies
    pricingId: ID
    pricing: PlacepricingPricing
    viewsId: ID
    views: PlaceviewsPlaceViews
    bookingsIds: [ID!]
    bookings: [PlacebookingsBooking!]
    picturesIds: [ID!]
    pictures: [PlacepicturesPicture!]
    reviewsIds: [ID!]
    reviews: [PlacereviewsReview!]
  ): Place
  updatePlaceViews(id: ID!, lastWeek: Int, placeId: ID, place: PlaceViewsplacePlace): PlaceViews
  updatePolicies(
    checkInEndTime: Float
    checkInStartTime: Float
    checkoutTime: Float
    id: ID!
    placeId: ID
    place: PoliciesplacePlace
  ): Policies
  updatePricing(
    averageMonthly: Int
    averageWeekly: Int
    basePrice: Int
    cleaningFee: Int
    currency: CURRENCY
    extraGuests: Int
    id: ID!
    monthlyDiscount: Int
    perNight: Int
    securityDeposit: Int
    smartPricing: Boolean
    weekendPricing: Int
    weeklyDiscount: Int
    placeId: ID
    place: PricingplacePlace
  ): Pricing
  updateRestaurant(
    avgPricePerPerson: Int
    id: ID!
    isCurated: Boolean
    popularity: Int
    slug: String
    title: String
    locationId: ID
    location: RestaurantlocationLocation
    picturesIds: [ID!]
    pictures: [RestaurantpicturesPicture!]
  ): Restaurant
  updateReview(
    accuracy: Int
    checkIn: Int
    cleanliness: Int
    communication: Int
    id: ID!
    location: Int
    stars: Int
    text: String
    value: Int
    experienceId: ID
    experience: ReviewexperienceExperience
    placeId: ID
    place: ReviewplacePlace
  ): Review
  updateUser(
    email: String
    firstName: String
    id: ID!
    isSuperHost: Boolean
    lastName: String
    password: String
    phone: String
    responseRate: Float
    responseTime: Int
    locationId: ID
    location: UserlocationLocation
    profilePictureId: ID
    profilePicture: UserprofilePicturePicture
    bookingsIds: [ID!]
    bookings: [UserbookingsBooking!]
    hostingExperiencesIds: [ID!]
    hostingExperiences: [UserhostingExperiencesExperience!]
    notificationsIds: [ID!]
    notifications: [UsernotificationsNotification!]
    ownedPlacesIds: [ID!]
    ownedPlaces: [UserownedPlacesPlace!]
    paymentAccountIds: [ID!]
    paymentAccount: [UserpaymentAccountPaymentAccount!]
    receivedMessagesIds: [ID!]
    receivedMessages: [UserreceivedMessagesMessage!]
    sentMessagesIds: [ID!]
    sentMessages: [UsersentMessagesMessage!]
  ): User
  updateOrCreateAmenities(update: UpdateAmenities!, create: CreateAmenities!): Amenities
  updateOrCreateBooking(update: UpdateBooking!, create: CreateBooking!): Booking
  updateOrCreateCity(update: UpdateCity!, create: CreateCity!): City
  updateOrCreateCreditCardInformation(
    update: UpdateCreditCardInformation!
    create: CreateCreditCardInformation!
  ): CreditCardInformation
  updateOrCreateExperience(update: UpdateExperience!, create: CreateExperience!): Experience
  updateOrCreateExperienceCategory(
    update: UpdateExperienceCategory!
    create: CreateExperienceCategory!
  ): ExperienceCategory
  updateOrCreateGuestRequirements(update: UpdateGuestRequirements!, create: CreateGuestRequirements!): GuestRequirements
  updateOrCreateHouseRules(update: UpdateHouseRules!, create: CreateHouseRules!): HouseRules
  updateOrCreateLocation(update: UpdateLocation!, create: CreateLocation!): Location
  updateOrCreateMessage(update: UpdateMessage!, create: CreateMessage!): Message
  updateOrCreateNeighbourhood(update: UpdateNeighbourhood!, create: CreateNeighbourhood!): Neighbourhood
  updateOrCreateNotification(update: UpdateNotification!, create: CreateNotification!): Notification
  updateOrCreatePayment(update: UpdatePayment!, create: CreatePayment!): Payment
  updateOrCreatePaymentAccount(update: UpdatePaymentAccount!, create: CreatePaymentAccount!): PaymentAccount
  updateOrCreatePaypalInformation(update: UpdatePaypalInformation!, create: CreatePaypalInformation!): PaypalInformation
  updateOrCreatePicture(update: UpdatePicture!, create: CreatePicture!): Picture
  updateOrCreatePlace(update: UpdatePlace!, create: CreatePlace!): Place
  updateOrCreatePlaceViews(update: UpdatePlaceViews!, create: CreatePlaceViews!): PlaceViews
  updateOrCreatePolicies(update: UpdatePolicies!, create: CreatePolicies!): Policies
  updateOrCreatePricing(update: UpdatePricing!, create: CreatePricing!): Pricing
  updateOrCreateRestaurant(update: UpdateRestaurant!, create: CreateRestaurant!): Restaurant
  updateOrCreateReview(update: UpdateReview!, create: CreateReview!): Review
  updateOrCreateUser(update: UpdateUser!, create: CreateUser!): User
  deleteAmenities(id: ID!): Amenities
  deleteBooking(id: ID!): Booking
  deleteCity(id: ID!): City
  deleteCreditCardInformation(id: ID!): CreditCardInformation
  deleteExperience(id: ID!): Experience
  deleteExperienceCategory(id: ID!): ExperienceCategory
  deleteGuestRequirements(id: ID!): GuestRequirements
  deleteHouseRules(id: ID!): HouseRules
  deleteLocation(id: ID!): Location
  deleteMessage(id: ID!): Message
  deleteNeighbourhood(id: ID!): Neighbourhood
  deleteNotification(id: ID!): Notification
  deletePayment(id: ID!): Payment
  deletePaymentAccount(id: ID!): PaymentAccount
  deletePaypalInformation(id: ID!): PaypalInformation
  deletePicture(id: ID!): Picture
  deletePlace(id: ID!): Place
  deletePlaceViews(id: ID!): PlaceViews
  deletePolicies(id: ID!): Policies
  deletePricing(id: ID!): Pricing
  deleteRestaurant(id: ID!): Restaurant
  deleteReview(id: ID!): Review
  deleteUser(id: ID!): User
  setBookingPayment(paymentPaymentId: ID!, bookingBookingId: ID!): SetBookingPaymentPayload
  setCreditCardInformation(
    creditcardCreditCardInformationId: ID!
    paymentAccountPaymentAccountId: ID!
  ): SetCreditCardInformationPayload
  setExperienceCategory(categoryExperienceCategoryId: ID!, experienceExperienceId: ID!): SetExperienceCategoryPayload
  setExperienceLocation(experienceExperienceId: ID!, locationLocationId: ID!): SetExperienceLocationPayload
  setExperiencePreview(experienceExperienceId: ID!, previewPictureId: ID!): SetExperiencePreviewPayload
  setGuestRequirements(guestRequirementsGuestRequirementsId: ID!, placePlaceId: ID!): SetGuestRequirementsPayload
  setHomePreview(homePreviewPictureId: ID!, neighbourHoodNeighbourhoodId: ID!): SetHomePreviewPayload
  setHouseRules(houseRulesHouseRulesId: ID!, placePlaceId: ID!): SetHouseRulesPayload
  setPaypalInformation(paypalPaypalInformationId: ID!, paymentAccountPaymentAccountId: ID!): SetPaypalInformationPayload
  setPlaceAmenities(amenitiesAmenitiesId: ID!, placePlaceId: ID!): SetPlaceAmenitiesPayload
  setPlaceLocation(locationLocationId: ID!, placePlaceId: ID!): SetPlaceLocationPayload
  setPlacePrice(pricingPricingId: ID!, placePlaceId: ID!): SetPlacePricePayload
  setPlaceViews(viewsPlaceViewsId: ID!, placePlaceId: ID!): SetPlaceViewsPayload
  setPolicies(policiesPoliciesId: ID!, placePlaceId: ID!): SetPoliciesPayload
  setProfilePicture(profilePicturePictureId: ID!, userUserId: ID!): SetProfilePicturePayload
  setRestaurantLocation(restaurantRestaurantId: ID!, locationLocationId: ID!): SetRestaurantLocationPayload
  setUserLocation(locationLocationId: ID!, userUserId: ID!): SetUserLocationPayload
  unsetCreditCardInformation(
    creditcardCreditCardInformationId: ID!
    paymentAccountPaymentAccountId: ID!
  ): UnsetCreditCardInformationPayload
  unsetExperienceCategory(
    categoryExperienceCategoryId: ID!
    experienceExperienceId: ID!
  ): UnsetExperienceCategoryPayload
  unsetHomePreview(homePreviewPictureId: ID!, neighbourHoodNeighbourhoodId: ID!): UnsetHomePreviewPayload
  unsetProfilePicture(profilePicturePictureId: ID!, userUserId: ID!): UnsetProfilePicturePayload
  unsetUserLocation(locationLocationId: ID!, userUserId: ID!): UnsetUserLocationPayload
  addToBookee(bookingsBookingId: ID!, bookeeUserId: ID!): AddToBookeePayload
  addToCityNeighbourhood(cityCityId: ID!, neighbourhoodsNeighbourhoodId: ID!): AddToCityNeighbourhoodPayload
  addToExperienceHost(hostingExperiencesExperienceId: ID!, hostUserId: ID!): AddToExperienceHostPayload
  addToExperienceReviews(reviewsReviewId: ID!, experienceExperienceId: ID!): AddToExperienceReviewsPayload
  addToNeighbourhood(neighbourHoodNeighbourhoodId: ID!, locationsLocationId: ID!): AddToNeighbourhoodPayload
  addToNotifications(notificationsNotificationId: ID!, userUserId: ID!): AddToNotificationsPayload
  addToPaymentAccounts(paymentMethodPaymentAccountId: ID!, paymentsPaymentId: ID!): AddToPaymentAccountsPayload
  addToPlaceBooking(bookingsBookingId: ID!, placePlaceId: ID!): AddToPlaceBookingPayload
  addToPlaceOwner(ownedPlacesPlaceId: ID!, hostUserId: ID!): AddToPlaceOwnerPayload
  addToPlacePictures(picturesPictureId: ID!, placePlaceId: ID!): AddToPlacePicturesPayload
  addToPlaceReviews(reviewsReviewId: ID!, placePlaceId: ID!): AddToPlaceReviewsPayload
  addToReceivedMessages(receivedMessagesMessageId: ID!, toUserId: ID!): AddToReceivedMessagesPayload
  addToRestaurantPicture(reservationRestaurantId: ID!, picturesPictureId: ID!): AddToRestaurantPicturePayload
  addToSentMessages(sentMessagesMessageId: ID!, fromUserId: ID!): AddToSentMessagesPayload
  addToUserPaymentAccounts(paymentAccountPaymentAccountId: ID!, userUserId: ID!): AddToUserPaymentAccountsPayload
  removeFromExperienceReviews(reviewsReviewId: ID!, experienceExperienceId: ID!): RemoveFromExperienceReviewsPayload
  removeFromNeighbourhood(neighbourHoodNeighbourhoodId: ID!, locationsLocationId: ID!): RemoveFromNeighbourhoodPayload
  removeFromPlacePictures(picturesPictureId: ID!, placePlaceId: ID!): RemoveFromPlacePicturesPayload
  removeFromRestaurantPicture(reservationRestaurantId: ID!, picturesPictureId: ID!): RemoveFromRestaurantPicturePayload
  createUser(
    email: String!
    firstName: String!
    isSuperHost: Boolean
    lastName: String!
    password: String!
    phone: String!
    responseRate: Float
    responseTime: Int
    locationId: ID
    location: UserlocationLocation
    profilePictureId: ID
    profilePicture: UserprofilePicturePicture
    bookingsIds: [ID!]
    bookings: [UserbookingsBooking!]
    hostingExperiencesIds: [ID!]
    hostingExperiences: [UserhostingExperiencesExperience!]
    notificationsIds: [ID!]
    notifications: [UsernotificationsNotification!]
    ownedPlacesIds: [ID!]
    ownedPlaces: [UserownedPlacesPlace!]
    paymentAccountIds: [ID!]
    paymentAccount: [UserpaymentAccountPaymentAccount!]
    receivedMessagesIds: [ID!]
    receivedMessages: [UserreceivedMessagesMessage!]
    sentMessagesIds: [ID!]
    sentMessages: [UsersentMessagesMessage!]
  ): User
}

type Neighbourhood implements Node {
  city(filter: CityFilter): City!
  featured: Boolean!
  homePreview(filter: PictureFilter): Picture
  id: ID!
  locations(
    filter: LocationFilter
    orderBy: LocationOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Location!]
  name: String!
  popularity: Int!
  slug: String!

  # Meta information about the query.
  _locationsMeta(
    filter: LocationFilter
    orderBy: LocationOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!
}

input NeighbourhoodcityCity {
  name: String!
  neighbourhoodsIds: [ID!]
  neighbourhoods: [CityneighbourhoodsNeighbourhood!]
}

input NeighbourhoodFilter {
  # Logical AND on all given filters.
  AND: [NeighbourhoodFilter!]

  # Logical OR on all given filters.
  OR: [NeighbourhoodFilter!]
  featured: Boolean

  # All values that are not equal to given value.
  featured_not: Boolean
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  popularity: Int

  # All values that are not equal to given value.
  popularity_not: Int

  # All values that are contained in given list.
  popularity_in: [Int!]

  # All values that are not contained in given list.
  popularity_not_in: [Int!]

  # All values less than the given value.
  popularity_lt: Int

  # All values less than or equal the given value.
  popularity_lte: Int

  # All values greater than the given value.
  popularity_gt: Int

  # All values greater than or equal the given value.
  popularity_gte: Int
  slug: String

  # All values that are not equal to given value.
  slug_not: String

  # All values that are contained in given list.
  slug_in: [String!]

  # All values that are not contained in given list.
  slug_not_in: [String!]

  # All values less than the given value.
  slug_lt: String

  # All values less than or equal the given value.
  slug_lte: String

  # All values greater than the given value.
  slug_gt: String

  # All values greater than or equal the given value.
  slug_gte: String

  # All values containing the given string.
  slug_contains: String

  # All values not containing the given string.
  slug_not_contains: String

  # All values starting with the given string.
  slug_starts_with: String

  # All values not starting with the given string.
  slug_not_starts_with: String

  # All values ending with the given string.
  slug_ends_with: String

  # All values not ending with the given string.
  slug_not_ends_with: String
  city: CityFilter
  homePreview: PictureFilter
  locations_every: LocationFilter
  locations_some: LocationFilter
  locations_none: LocationFilter
}

input NeighbourhoodhomePreviewPicture {
  url: String!
  experienceId: ID
  experience: PictureexperienceExperience
  placeId: ID
  place: PictureplacePlace
  reservationId: ID
  reservation: PicturereservationRestaurant
  userId: ID
  user: PictureuserUser
}

input NeighbourhoodlocationsLocation {
  address: String
  directions: String
  lat: Float!
  lng: Float!
  experienceId: ID
  experience: LocationexperienceExperience
  placeId: ID
  place: LocationplacePlace
  restaurantId: ID
  restaurant: LocationrestaurantRestaurant
  userId: ID
  user: LocationuserUser
}

enum NeighbourhoodOrderBy {
  featured_ASC
  featured_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  popularity_ASC
  popularity_DESC
  slug_ASC
  slug_DESC
}

type NeighbourhoodPreviousValues {
  featured: Boolean!
  id: ID!
  name: String!
  popularity: Int!
  slug: String!
}

input NeighbourhoodSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [NeighbourhoodSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [NeighbourhoodSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: NeighbourhoodSubscriptionFilterNode
}

input NeighbourhoodSubscriptionFilterNode {
  featured: Boolean

  # All values that are not equal to given value.
  featured_not: Boolean
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  popularity: Int

  # All values that are not equal to given value.
  popularity_not: Int

  # All values that are contained in given list.
  popularity_in: [Int!]

  # All values that are not contained in given list.
  popularity_not_in: [Int!]

  # All values less than the given value.
  popularity_lt: Int

  # All values less than or equal the given value.
  popularity_lte: Int

  # All values greater than the given value.
  popularity_gt: Int

  # All values greater than or equal the given value.
  popularity_gte: Int
  slug: String

  # All values that are not equal to given value.
  slug_not: String

  # All values that are contained in given list.
  slug_in: [String!]

  # All values that are not contained in given list.
  slug_not_in: [String!]

  # All values less than the given value.
  slug_lt: String

  # All values less than or equal the given value.
  slug_lte: String

  # All values greater than the given value.
  slug_gt: String

  # All values greater than or equal the given value.
  slug_gte: String

  # All values containing the given string.
  slug_contains: String

  # All values not containing the given string.
  slug_not_contains: String

  # All values starting with the given string.
  slug_starts_with: String

  # All values not starting with the given string.
  slug_not_starts_with: String

  # All values ending with the given string.
  slug_ends_with: String

  # All values not ending with the given string.
  slug_not_ends_with: String
  city: CityFilter
  homePreview: PictureFilter
  locations_every: LocationFilter
  locations_some: LocationFilter
  locations_none: LocationFilter
}

type NeighbourhoodSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Neighbourhood
  updatedFields: [String!]
  previousValues: NeighbourhoodPreviousValues
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

type Notification implements Node {
  createdAt: DateTime!
  id: ID!
  link: String!
  readDate: DateTime!
  type: NOTIFICATION_TYPE
  user(filter: UserFilter): User!
}

enum NOTIFICATION_TYPE {
  OFFER
  INSTANT_BOOK
  RESPONSIVENESS
  NEW_AMENITIES
  HOUSE_RULES
}

input NotificationFilter {
  # Logical AND on all given filters.
  AND: [NotificationFilter!]

  # Logical OR on all given filters.
  OR: [NotificationFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  link: String

  # All values that are not equal to given value.
  link_not: String

  # All values that are contained in given list.
  link_in: [String!]

  # All values that are not contained in given list.
  link_not_in: [String!]

  # All values less than the given value.
  link_lt: String

  # All values less than or equal the given value.
  link_lte: String

  # All values greater than the given value.
  link_gt: String

  # All values greater than or equal the given value.
  link_gte: String

  # All values containing the given string.
  link_contains: String

  # All values not containing the given string.
  link_not_contains: String

  # All values starting with the given string.
  link_starts_with: String

  # All values not starting with the given string.
  link_not_starts_with: String

  # All values ending with the given string.
  link_ends_with: String

  # All values not ending with the given string.
  link_not_ends_with: String
  readDate: DateTime

  # All values that are not equal to given value.
  readDate_not: DateTime

  # All values that are contained in given list.
  readDate_in: [DateTime!]

  # All values that are not contained in given list.
  readDate_not_in: [DateTime!]

  # All values less than the given value.
  readDate_lt: DateTime

  # All values less than or equal the given value.
  readDate_lte: DateTime

  # All values greater than the given value.
  readDate_gt: DateTime

  # All values greater than or equal the given value.
  readDate_gte: DateTime
  type: NOTIFICATION_TYPE

  # All values that are not equal to given value.
  type_not: NOTIFICATION_TYPE

  # All values that are contained in given list.
  type_in: [NOTIFICATION_TYPE!]

  # All values that are not contained in given list.
  type_not_in: [NOTIFICATION_TYPE!]
  user: UserFilter
}

enum NotificationOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  link_ASC
  link_DESC
  readDate_ASC
  readDate_DESC
  type_ASC
  type_DESC
}

type NotificationPreviousValues {
  createdAt: DateTime!
  id: ID!
  link: String!
  readDate: DateTime!
  type: NOTIFICATION_TYPE
}

input NotificationSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [NotificationSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [NotificationSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: NotificationSubscriptionFilterNode
}

input NotificationSubscriptionFilterNode {
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  link: String

  # All values that are not equal to given value.
  link_not: String

  # All values that are contained in given list.
  link_in: [String!]

  # All values that are not contained in given list.
  link_not_in: [String!]

  # All values less than the given value.
  link_lt: String

  # All values less than or equal the given value.
  link_lte: String

  # All values greater than the given value.
  link_gt: String

  # All values greater than or equal the given value.
  link_gte: String

  # All values containing the given string.
  link_contains: String

  # All values not containing the given string.
  link_not_contains: String

  # All values starting with the given string.
  link_starts_with: String

  # All values not starting with the given string.
  link_not_starts_with: String

  # All values ending with the given string.
  link_ends_with: String

  # All values not ending with the given string.
  link_not_ends_with: String
  readDate: DateTime

  # All values that are not equal to given value.
  readDate_not: DateTime

  # All values that are contained in given list.
  readDate_in: [DateTime!]

  # All values that are not contained in given list.
  readDate_not_in: [DateTime!]

  # All values less than the given value.
  readDate_lt: DateTime

  # All values less than or equal the given value.
  readDate_lte: DateTime

  # All values greater than the given value.
  readDate_gt: DateTime

  # All values greater than or equal the given value.
  readDate_gte: DateTime
  type: NOTIFICATION_TYPE

  # All values that are not equal to given value.
  type_not: NOTIFICATION_TYPE

  # All values that are contained in given list.
  type_in: [NOTIFICATION_TYPE!]

  # All values that are not contained in given list.
  type_not_in: [NOTIFICATION_TYPE!]
  user: UserFilter
}

type NotificationSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Notification
  updatedFields: [String!]
  previousValues: NotificationPreviousValues
}

input NotificationuserUser {
  email: String!
  firstName: String!
  isSuperHost: Boolean
  lastName: String!
  password: String!
  phone: String!
  responseRate: Float
  responseTime: Int
  locationId: ID
  location: UserlocationLocation
  profilePictureId: ID
  profilePicture: UserprofilePicturePicture
  bookingsIds: [ID!]
  bookings: [UserbookingsBooking!]
  hostingExperiencesIds: [ID!]
  hostingExperiences: [UserhostingExperiencesExperience!]
  notificationsIds: [ID!]
  notifications: [UsernotificationsNotification!]
  ownedPlacesIds: [ID!]
  ownedPlaces: [UserownedPlacesPlace!]
  paymentAccountIds: [ID!]
  paymentAccount: [UserpaymentAccountPaymentAccount!]
  receivedMessagesIds: [ID!]
  receivedMessages: [UserreceivedMessagesMessage!]
  sentMessagesIds: [ID!]
  sentMessages: [UsersentMessagesMessage!]
}

type Payment implements Node {
  booking(filter: BookingFilter): Booking!
  createdAt: DateTime!
  id: ID!
  paymentMethod(filter: PaymentAccountFilter): PaymentAccount!
  placePrice: Float!
  serviceFee: Float!
  totalPrice: Float!
}

enum PAYMENT_PROVIDER {
  PAYPAL
  CREDIT_CARD
}

type PaymentAccount implements Node {
  createdAt: DateTime!
  creditcard(filter: CreditCardInformationFilter): CreditCardInformation
  id: ID!
  payments(
    filter: PaymentFilter
    orderBy: PaymentOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Payment!]
  paypal(filter: PaypalInformationFilter): PaypalInformation
  type: PAYMENT_PROVIDER
  user(filter: UserFilter): User!

  # Meta information about the query.
  _paymentsMeta(
    filter: PaymentFilter
    orderBy: PaymentOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!
}

input PaymentAccountcreditcardCreditCardInformation {
  cardNumber: String!
  country: String!
  expiresOnMonth: Int!
  expiresOnYear: Int!
  firstName: String!
  lastName: String!
  postalCode: String!
  securityCode: String!
}

input PaymentAccountFilter {
  # Logical AND on all given filters.
  AND: [PaymentAccountFilter!]

  # Logical OR on all given filters.
  OR: [PaymentAccountFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  type: PAYMENT_PROVIDER

  # All values that are not equal to given value.
  type_not: PAYMENT_PROVIDER

  # All values that are contained in given list.
  type_in: [PAYMENT_PROVIDER!]

  # All values that are not contained in given list.
  type_not_in: [PAYMENT_PROVIDER!]
  creditcard: CreditCardInformationFilter
  payments_every: PaymentFilter
  payments_some: PaymentFilter
  payments_none: PaymentFilter
  paypal: PaypalInformationFilter
  user: UserFilter
}

enum PaymentAccountOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  type_ASC
  type_DESC
}

input PaymentAccountpaymentsPayment {
  placePrice: Float!
  serviceFee: Float!
  totalPrice: Float!
  bookingId: ID
  booking: PaymentbookingBooking
}

input PaymentAccountpaypalPaypalInformation {
  email: String!
}

type PaymentAccountPreviousValues {
  createdAt: DateTime!
  id: ID!
  type: PAYMENT_PROVIDER
}

input PaymentAccountSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [PaymentAccountSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [PaymentAccountSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: PaymentAccountSubscriptionFilterNode
}

input PaymentAccountSubscriptionFilterNode {
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  type: PAYMENT_PROVIDER

  # All values that are not equal to given value.
  type_not: PAYMENT_PROVIDER

  # All values that are contained in given list.
  type_in: [PAYMENT_PROVIDER!]

  # All values that are not contained in given list.
  type_not_in: [PAYMENT_PROVIDER!]
  creditcard: CreditCardInformationFilter
  payments_every: PaymentFilter
  payments_some: PaymentFilter
  payments_none: PaymentFilter
  paypal: PaypalInformationFilter
  user: UserFilter
}

type PaymentAccountSubscriptionPayload {
  mutation: _ModelMutationType!
  node: PaymentAccount
  updatedFields: [String!]
  previousValues: PaymentAccountPreviousValues
}

input PaymentAccountuserUser {
  email: String!
  firstName: String!
  isSuperHost: Boolean
  lastName: String!
  password: String!
  phone: String!
  responseRate: Float
  responseTime: Int
  locationId: ID
  location: UserlocationLocation
  profilePictureId: ID
  profilePicture: UserprofilePicturePicture
  bookingsIds: [ID!]
  bookings: [UserbookingsBooking!]
  hostingExperiencesIds: [ID!]
  hostingExperiences: [UserhostingExperiencesExperience!]
  notificationsIds: [ID!]
  notifications: [UsernotificationsNotification!]
  ownedPlacesIds: [ID!]
  ownedPlaces: [UserownedPlacesPlace!]
  paymentAccountIds: [ID!]
  paymentAccount: [UserpaymentAccountPaymentAccount!]
  receivedMessagesIds: [ID!]
  receivedMessages: [UserreceivedMessagesMessage!]
  sentMessagesIds: [ID!]
  sentMessages: [UsersentMessagesMessage!]
}

input PaymentbookingBooking {
  endDate: DateTime!
  startDate: DateTime!
  bookeeId: ID
  bookee: BookingbookeeUser
  placeId: ID
  place: BookingplacePlace
}

input PaymentFilter {
  # Logical AND on all given filters.
  AND: [PaymentFilter!]

  # Logical OR on all given filters.
  OR: [PaymentFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  placePrice: Float

  # All values that are not equal to given value.
  placePrice_not: Float

  # All values that are contained in given list.
  placePrice_in: [Float!]

  # All values that are not contained in given list.
  placePrice_not_in: [Float!]

  # All values less than the given value.
  placePrice_lt: Float

  # All values less than or equal the given value.
  placePrice_lte: Float

  # All values greater than the given value.
  placePrice_gt: Float

  # All values greater than or equal the given value.
  placePrice_gte: Float
  serviceFee: Float

  # All values that are not equal to given value.
  serviceFee_not: Float

  # All values that are contained in given list.
  serviceFee_in: [Float!]

  # All values that are not contained in given list.
  serviceFee_not_in: [Float!]

  # All values less than the given value.
  serviceFee_lt: Float

  # All values less than or equal the given value.
  serviceFee_lte: Float

  # All values greater than the given value.
  serviceFee_gt: Float

  # All values greater than or equal the given value.
  serviceFee_gte: Float
  totalPrice: Float

  # All values that are not equal to given value.
  totalPrice_not: Float

  # All values that are contained in given list.
  totalPrice_in: [Float!]

  # All values that are not contained in given list.
  totalPrice_not_in: [Float!]

  # All values less than the given value.
  totalPrice_lt: Float

  # All values less than or equal the given value.
  totalPrice_lte: Float

  # All values greater than the given value.
  totalPrice_gt: Float

  # All values greater than or equal the given value.
  totalPrice_gte: Float
  booking: BookingFilter
  paymentMethod: PaymentAccountFilter
}

enum PaymentOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  placePrice_ASC
  placePrice_DESC
  serviceFee_ASC
  serviceFee_DESC
  totalPrice_ASC
  totalPrice_DESC
}

input PaymentpaymentMethodPaymentAccount {
  type: PAYMENT_PROVIDER
  creditcardId: ID
  creditcard: PaymentAccountcreditcardCreditCardInformation
  paypalId: ID
  paypal: PaymentAccountpaypalPaypalInformation
  userId: ID
  user: PaymentAccountuserUser
  paymentsIds: [ID!]
  payments: [PaymentAccountpaymentsPayment!]
}

type PaymentPreviousValues {
  createdAt: DateTime!
  id: ID!
  placePrice: Float!
  serviceFee: Float!
  totalPrice: Float!
}

input PaymentSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [PaymentSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [PaymentSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: PaymentSubscriptionFilterNode
}

input PaymentSubscriptionFilterNode {
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  placePrice: Float

  # All values that are not equal to given value.
  placePrice_not: Float

  # All values that are contained in given list.
  placePrice_in: [Float!]

  # All values that are not contained in given list.
  placePrice_not_in: [Float!]

  # All values less than the given value.
  placePrice_lt: Float

  # All values less than or equal the given value.
  placePrice_lte: Float

  # All values greater than the given value.
  placePrice_gt: Float

  # All values greater than or equal the given value.
  placePrice_gte: Float
  serviceFee: Float

  # All values that are not equal to given value.
  serviceFee_not: Float

  # All values that are contained in given list.
  serviceFee_in: [Float!]

  # All values that are not contained in given list.
  serviceFee_not_in: [Float!]

  # All values less than the given value.
  serviceFee_lt: Float

  # All values less than or equal the given value.
  serviceFee_lte: Float

  # All values greater than the given value.
  serviceFee_gt: Float

  # All values greater than or equal the given value.
  serviceFee_gte: Float
  totalPrice: Float

  # All values that are not equal to given value.
  totalPrice_not: Float

  # All values that are contained in given list.
  totalPrice_in: [Float!]

  # All values that are not contained in given list.
  totalPrice_not_in: [Float!]

  # All values less than the given value.
  totalPrice_lt: Float

  # All values less than or equal the given value.
  totalPrice_lte: Float

  # All values greater than the given value.
  totalPrice_gt: Float

  # All values greater than or equal the given value.
  totalPrice_gte: Float
  booking: BookingFilter
  paymentMethod: PaymentAccountFilter
}

type PaymentSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Payment
  updatedFields: [String!]
  previousValues: PaymentPreviousValues
}

type PaypalInformation implements Node {
  createdAt: DateTime!
  email: String!
  id: ID!
  paymentAccount(filter: PaymentAccountFilter): PaymentAccount!
}

input PaypalInformationFilter {
  # Logical AND on all given filters.
  AND: [PaypalInformationFilter!]

  # Logical OR on all given filters.
  OR: [PaypalInformationFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  email: String

  # All values that are not equal to given value.
  email_not: String

  # All values that are contained in given list.
  email_in: [String!]

  # All values that are not contained in given list.
  email_not_in: [String!]

  # All values less than the given value.
  email_lt: String

  # All values less than or equal the given value.
  email_lte: String

  # All values greater than the given value.
  email_gt: String

  # All values greater than or equal the given value.
  email_gte: String

  # All values containing the given string.
  email_contains: String

  # All values not containing the given string.
  email_not_contains: String

  # All values starting with the given string.
  email_starts_with: String

  # All values not starting with the given string.
  email_not_starts_with: String

  # All values ending with the given string.
  email_ends_with: String

  # All values not ending with the given string.
  email_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  paymentAccount: PaymentAccountFilter
}

enum PaypalInformationOrderBy {
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
}

input PaypalInformationpaymentAccountPaymentAccount {
  type: PAYMENT_PROVIDER
  creditcardId: ID
  creditcard: PaymentAccountcreditcardCreditCardInformation
  userId: ID
  user: PaymentAccountuserUser
  paymentsIds: [ID!]
  payments: [PaymentAccountpaymentsPayment!]
}

type PaypalInformationPreviousValues {
  createdAt: DateTime!
  email: String!
  id: ID!
}

input PaypalInformationSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [PaypalInformationSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [PaypalInformationSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: PaypalInformationSubscriptionFilterNode
}

input PaypalInformationSubscriptionFilterNode {
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  email: String

  # All values that are not equal to given value.
  email_not: String

  # All values that are contained in given list.
  email_in: [String!]

  # All values that are not contained in given list.
  email_not_in: [String!]

  # All values less than the given value.
  email_lt: String

  # All values less than or equal the given value.
  email_lte: String

  # All values greater than the given value.
  email_gt: String

  # All values greater than or equal the given value.
  email_gte: String

  # All values containing the given string.
  email_contains: String

  # All values not containing the given string.
  email_not_contains: String

  # All values starting with the given string.
  email_starts_with: String

  # All values not starting with the given string.
  email_not_starts_with: String

  # All values ending with the given string.
  email_ends_with: String

  # All values not ending with the given string.
  email_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  paymentAccount: PaymentAccountFilter
}

type PaypalInformationSubscriptionPayload {
  mutation: _ModelMutationType!
  node: PaypalInformation
  updatedFields: [String!]
  previousValues: PaypalInformationPreviousValues
}

type Picture implements Node {
  experience(filter: ExperienceFilter): Experience
  id: ID!
  neighbourHood(filter: NeighbourhoodFilter): Neighbourhood
  place(filter: PlaceFilter): Place
  reservation(filter: RestaurantFilter): Restaurant
  url: String!
  user(filter: UserFilter): User
}

input PictureexperienceExperience {
  popularity: Int!
  pricePerPerson: Int!
  title: String!
  categoryId: ID
  category: ExperiencecategoryExperienceCategory
  hostId: ID
  host: ExperiencehostUser
  locationId: ID
  location: ExperiencelocationLocation
  reviewsIds: [ID!]
  reviews: [ExperiencereviewsReview!]
}

input PictureFilter {
  # Logical AND on all given filters.
  AND: [PictureFilter!]

  # Logical OR on all given filters.
  OR: [PictureFilter!]
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  url: String

  # All values that are not equal to given value.
  url_not: String

  # All values that are contained in given list.
  url_in: [String!]

  # All values that are not contained in given list.
  url_not_in: [String!]

  # All values less than the given value.
  url_lt: String

  # All values less than or equal the given value.
  url_lte: String

  # All values greater than the given value.
  url_gt: String

  # All values greater than or equal the given value.
  url_gte: String

  # All values containing the given string.
  url_contains: String

  # All values not containing the given string.
  url_not_contains: String

  # All values starting with the given string.
  url_starts_with: String

  # All values not starting with the given string.
  url_not_starts_with: String

  # All values ending with the given string.
  url_ends_with: String

  # All values not ending with the given string.
  url_not_ends_with: String
  experience: ExperienceFilter
  neighbourHood: NeighbourhoodFilter
  place: PlaceFilter
  reservation: RestaurantFilter
  user: UserFilter
}

input PictureneighbourHoodNeighbourhood {
  featured: Boolean!
  name: String!
  popularity: Int!
  slug: String!
  cityId: ID
  city: NeighbourhoodcityCity
  locationsIds: [ID!]
  locations: [NeighbourhoodlocationsLocation!]
}

enum PictureOrderBy {
  id_ASC
  id_DESC
  url_ASC
  url_DESC
}

input PictureplacePlace {
  description: String!
  maxGuests: Int!
  name: String
  numBaths: Int!
  numBedrooms: Int!
  numBeds: Int!
  popularity: Int!
  shortDescription: String!
  size: PLACE_SIZES
  slug: String!
  amenitiesId: ID
  amenities: PlaceamenitiesAmenities
  guestRequirementsId: ID
  guestRequirements: PlaceguestRequirementsGuestRequirements
  hostId: ID
  host: PlacehostUser
  houseRulesId: ID
  houseRules: PlacehouseRulesHouseRules
  locationId: ID
  location: PlacelocationLocation
  policiesId: ID
  policies: PlacepoliciesPolicies
  pricingId: ID
  pricing: PlacepricingPricing
  viewsId: ID
  views: PlaceviewsPlaceViews
  bookingsIds: [ID!]
  bookings: [PlacebookingsBooking!]
  picturesIds: [ID!]
  pictures: [PlacepicturesPicture!]
  reviewsIds: [ID!]
  reviews: [PlacereviewsReview!]
}

type PicturePreviousValues {
  id: ID!
  url: String!
}

input PicturereservationRestaurant {
  avgPricePerPerson: Int!
  isCurated: Boolean
  popularity: Int!
  slug: String!
  title: String!
  locationId: ID
  location: RestaurantlocationLocation
  picturesIds: [ID!]
  pictures: [RestaurantpicturesPicture!]
}

input PictureSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [PictureSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [PictureSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: PictureSubscriptionFilterNode
}

input PictureSubscriptionFilterNode {
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  url: String

  # All values that are not equal to given value.
  url_not: String

  # All values that are contained in given list.
  url_in: [String!]

  # All values that are not contained in given list.
  url_not_in: [String!]

  # All values less than the given value.
  url_lt: String

  # All values less than or equal the given value.
  url_lte: String

  # All values greater than the given value.
  url_gt: String

  # All values greater than or equal the given value.
  url_gte: String

  # All values containing the given string.
  url_contains: String

  # All values not containing the given string.
  url_not_contains: String

  # All values starting with the given string.
  url_starts_with: String

  # All values not starting with the given string.
  url_not_starts_with: String

  # All values ending with the given string.
  url_ends_with: String

  # All values not ending with the given string.
  url_not_ends_with: String
  experience: ExperienceFilter
  neighbourHood: NeighbourhoodFilter
  place: PlaceFilter
  reservation: RestaurantFilter
  user: UserFilter
}

type PictureSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Picture
  updatedFields: [String!]
  previousValues: PicturePreviousValues
}

input PictureuserUser {
  email: String!
  firstName: String!
  isSuperHost: Boolean
  lastName: String!
  password: String!
  phone: String!
  responseRate: Float
  responseTime: Int
  locationId: ID
  location: UserlocationLocation
  bookingsIds: [ID!]
  bookings: [UserbookingsBooking!]
  hostingExperiencesIds: [ID!]
  hostingExperiences: [UserhostingExperiencesExperience!]
  notificationsIds: [ID!]
  notifications: [UsernotificationsNotification!]
  ownedPlacesIds: [ID!]
  ownedPlaces: [UserownedPlacesPlace!]
  paymentAccountIds: [ID!]
  paymentAccount: [UserpaymentAccountPaymentAccount!]
  receivedMessagesIds: [ID!]
  receivedMessages: [UserreceivedMessagesMessage!]
  sentMessagesIds: [ID!]
  sentMessages: [UsersentMessagesMessage!]
}

type Place implements Node {
  amenities(filter: AmenitiesFilter): Amenities!
  bookings(
    filter: BookingFilter
    orderBy: BookingOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Booking!]
  description: String!
  guestRequirements(filter: GuestRequirementsFilter): GuestRequirements
  host(filter: UserFilter): User!
  houseRules(filter: HouseRulesFilter): HouseRules
  id: ID!
  location(filter: LocationFilter): Location!
  maxGuests: Int!
  name: String
  numBaths: Int!
  numBedrooms: Int!
  numBeds: Int!
  pictures(
    filter: PictureFilter
    orderBy: PictureOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Picture!]
  policies(filter: PoliciesFilter): Policies
  popularity: Int!
  pricing(filter: PricingFilter): Pricing!
  reviews(
    filter: ReviewFilter
    orderBy: ReviewOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Review!]
  shortDescription: String!
  size: PLACE_SIZES
  slug: String!
  views(filter: PlaceViewsFilter): PlaceViews!

  # Meta information about the query.
  _bookingsMeta(
    filter: BookingFilter
    orderBy: BookingOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!

  # Meta information about the query.
  _picturesMeta(
    filter: PictureFilter
    orderBy: PictureOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!

  # Meta information about the query.
  _reviewsMeta(
    filter: ReviewFilter
    orderBy: ReviewOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!
}

enum PLACE_SIZES {
  ENTIRE_HOUSE
  ENTIRE_APARTMENT
  ENTIRE_EARTH_HOUSE
  ENTIRE_CABIN
  ENTIRE_VILLA
  ENTIRE_PLACE
  ENTIRE_BOAT
  PRIVATE_ROOM
}

input PlaceamenitiesAmenities {
  airConditioning: Boolean
  babyBath: Boolean
  babyMonitor: Boolean
  babysitterRecommendations: Boolean
  bathtub: Boolean
  breakfast: Boolean
  buzzerWirelessIntercom: Boolean
  cableTv: Boolean
  changingTable: Boolean
  childrensBooksAndToys: Boolean
  childrensDinnerware: Boolean
  crib: Boolean
  doorman: Boolean
  dryer: Boolean
  elevator: Boolean
  essentials: Boolean
  familyKidFriendly: Boolean
  freeParkingOnPremises: Boolean
  freeParkingOnStreet: Boolean
  gym: Boolean
  hairDryer: Boolean
  hangers: Boolean
  heating: Boolean
  hotTub: Boolean
  indoorFireplace: Boolean
  internet: Boolean
  iron: Boolean
  kitchen: Boolean
  laptopFriendlyWorkspace: Boolean
  paidParkingOffPremises: Boolean
  petsAllowed: Boolean
  pool: Boolean
  privateEntrance: Boolean
  shampoo: Boolean
  smokingAllowed: Boolean
  suitableForEvents: Boolean
  tv: Boolean
  washer: Boolean
  wheelchairAccessible: Boolean
  wirelessInternet: Boolean
}

input PlacebookingsBooking {
  endDate: DateTime!
  startDate: DateTime!
  bookeeId: ID
  bookee: BookingbookeeUser
  paymentId: ID
  payment: BookingpaymentPayment
}

input PlaceFilter {
  # Logical AND on all given filters.
  AND: [PlaceFilter!]

  # Logical OR on all given filters.
  OR: [PlaceFilter!]
  description: String

  # All values that are not equal to given value.
  description_not: String

  # All values that are contained in given list.
  description_in: [String!]

  # All values that are not contained in given list.
  description_not_in: [String!]

  # All values less than the given value.
  description_lt: String

  # All values less than or equal the given value.
  description_lte: String

  # All values greater than the given value.
  description_gt: String

  # All values greater than or equal the given value.
  description_gte: String

  # All values containing the given string.
  description_contains: String

  # All values not containing the given string.
  description_not_contains: String

  # All values starting with the given string.
  description_starts_with: String

  # All values not starting with the given string.
  description_not_starts_with: String

  # All values ending with the given string.
  description_ends_with: String

  # All values not ending with the given string.
  description_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  maxGuests: Int

  # All values that are not equal to given value.
  maxGuests_not: Int

  # All values that are contained in given list.
  maxGuests_in: [Int!]

  # All values that are not contained in given list.
  maxGuests_not_in: [Int!]

  # All values less than the given value.
  maxGuests_lt: Int

  # All values less than or equal the given value.
  maxGuests_lte: Int

  # All values greater than the given value.
  maxGuests_gt: Int

  # All values greater than or equal the given value.
  maxGuests_gte: Int
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  numBaths: Int

  # All values that are not equal to given value.
  numBaths_not: Int

  # All values that are contained in given list.
  numBaths_in: [Int!]

  # All values that are not contained in given list.
  numBaths_not_in: [Int!]

  # All values less than the given value.
  numBaths_lt: Int

  # All values less than or equal the given value.
  numBaths_lte: Int

  # All values greater than the given value.
  numBaths_gt: Int

  # All values greater than or equal the given value.
  numBaths_gte: Int
  numBedrooms: Int

  # All values that are not equal to given value.
  numBedrooms_not: Int

  # All values that are contained in given list.
  numBedrooms_in: [Int!]

  # All values that are not contained in given list.
  numBedrooms_not_in: [Int!]

  # All values less than the given value.
  numBedrooms_lt: Int

  # All values less than or equal the given value.
  numBedrooms_lte: Int

  # All values greater than the given value.
  numBedrooms_gt: Int

  # All values greater than or equal the given value.
  numBedrooms_gte: Int
  numBeds: Int

  # All values that are not equal to given value.
  numBeds_not: Int

  # All values that are contained in given list.
  numBeds_in: [Int!]

  # All values that are not contained in given list.
  numBeds_not_in: [Int!]

  # All values less than the given value.
  numBeds_lt: Int

  # All values less than or equal the given value.
  numBeds_lte: Int

  # All values greater than the given value.
  numBeds_gt: Int

  # All values greater than or equal the given value.
  numBeds_gte: Int
  popularity: Int

  # All values that are not equal to given value.
  popularity_not: Int

  # All values that are contained in given list.
  popularity_in: [Int!]

  # All values that are not contained in given list.
  popularity_not_in: [Int!]

  # All values less than the given value.
  popularity_lt: Int

  # All values less than or equal the given value.
  popularity_lte: Int

  # All values greater than the given value.
  popularity_gt: Int

  # All values greater than or equal the given value.
  popularity_gte: Int
  shortDescription: String

  # All values that are not equal to given value.
  shortDescription_not: String

  # All values that are contained in given list.
  shortDescription_in: [String!]

  # All values that are not contained in given list.
  shortDescription_not_in: [String!]

  # All values less than the given value.
  shortDescription_lt: String

  # All values less than or equal the given value.
  shortDescription_lte: String

  # All values greater than the given value.
  shortDescription_gt: String

  # All values greater than or equal the given value.
  shortDescription_gte: String

  # All values containing the given string.
  shortDescription_contains: String

  # All values not containing the given string.
  shortDescription_not_contains: String

  # All values starting with the given string.
  shortDescription_starts_with: String

  # All values not starting with the given string.
  shortDescription_not_starts_with: String

  # All values ending with the given string.
  shortDescription_ends_with: String

  # All values not ending with the given string.
  shortDescription_not_ends_with: String
  size: PLACE_SIZES

  # All values that are not equal to given value.
  size_not: PLACE_SIZES

  # All values that are contained in given list.
  size_in: [PLACE_SIZES!]

  # All values that are not contained in given list.
  size_not_in: [PLACE_SIZES!]
  slug: String

  # All values that are not equal to given value.
  slug_not: String

  # All values that are contained in given list.
  slug_in: [String!]

  # All values that are not contained in given list.
  slug_not_in: [String!]

  # All values less than the given value.
  slug_lt: String

  # All values less than or equal the given value.
  slug_lte: String

  # All values greater than the given value.
  slug_gt: String

  # All values greater than or equal the given value.
  slug_gte: String

  # All values containing the given string.
  slug_contains: String

  # All values not containing the given string.
  slug_not_contains: String

  # All values starting with the given string.
  slug_starts_with: String

  # All values not starting with the given string.
  slug_not_starts_with: String

  # All values ending with the given string.
  slug_ends_with: String

  # All values not ending with the given string.
  slug_not_ends_with: String
  amenities: AmenitiesFilter
  bookings_every: BookingFilter
  bookings_some: BookingFilter
  bookings_none: BookingFilter
  guestRequirements: GuestRequirementsFilter
  host: UserFilter
  houseRules: HouseRulesFilter
  location: LocationFilter
  pictures_every: PictureFilter
  pictures_some: PictureFilter
  pictures_none: PictureFilter
  policies: PoliciesFilter
  pricing: PricingFilter
  reviews_every: ReviewFilter
  reviews_some: ReviewFilter
  reviews_none: ReviewFilter
  views: PlaceViewsFilter
}

input PlaceguestRequirementsGuestRequirements {
  govIssuedId: Boolean
  guestTripInformation: Boolean
  recommendationsFromOtherHosts: Boolean
}

input PlacehostUser {
  email: String!
  firstName: String!
  isSuperHost: Boolean
  lastName: String!
  password: String!
  phone: String!
  responseRate: Float
  responseTime: Int
  locationId: ID
  location: UserlocationLocation
  profilePictureId: ID
  profilePicture: UserprofilePicturePicture
  bookingsIds: [ID!]
  bookings: [UserbookingsBooking!]
  hostingExperiencesIds: [ID!]
  hostingExperiences: [UserhostingExperiencesExperience!]
  notificationsIds: [ID!]
  notifications: [UsernotificationsNotification!]
  ownedPlacesIds: [ID!]
  ownedPlaces: [UserownedPlacesPlace!]
  paymentAccountIds: [ID!]
  paymentAccount: [UserpaymentAccountPaymentAccount!]
  receivedMessagesIds: [ID!]
  receivedMessages: [UserreceivedMessagesMessage!]
  sentMessagesIds: [ID!]
  sentMessages: [UsersentMessagesMessage!]
}

input PlacehouseRulesHouseRules {
  additionalRules: String
  partiesAndEventsAllowed: Boolean
  petsAllowed: Boolean
  smokingAllowed: Boolean
  suitableForChildren: Boolean
  suitableForInfants: Boolean
}

input PlacelocationLocation {
  address: String
  directions: String
  lat: Float!
  lng: Float!
  experienceId: ID
  experience: LocationexperienceExperience
  neighbourHoodId: ID
  neighbourHood: LocationneighbourHoodNeighbourhood
  restaurantId: ID
  restaurant: LocationrestaurantRestaurant
  userId: ID
  user: LocationuserUser
}

enum PlaceOrderBy {
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  maxGuests_ASC
  maxGuests_DESC
  name_ASC
  name_DESC
  numBaths_ASC
  numBaths_DESC
  numBedrooms_ASC
  numBedrooms_DESC
  numBeds_ASC
  numBeds_DESC
  popularity_ASC
  popularity_DESC
  shortDescription_ASC
  shortDescription_DESC
  size_ASC
  size_DESC
  slug_ASC
  slug_DESC
}

input PlacepicturesPicture {
  url: String!
  experienceId: ID
  experience: PictureexperienceExperience
  neighbourHoodId: ID
  neighbourHood: PictureneighbourHoodNeighbourhood
  reservationId: ID
  reservation: PicturereservationRestaurant
  userId: ID
  user: PictureuserUser
}

input PlacepoliciesPolicies {
  checkInEndTime: Float!
  checkInStartTime: Float!
  checkoutTime: Float!
}

type PlacePreviousValues {
  description: String!
  id: ID!
  maxGuests: Int!
  name: String
  numBaths: Int!
  numBedrooms: Int!
  numBeds: Int!
  popularity: Int!
  shortDescription: String!
  size: PLACE_SIZES
  slug: String!
}

input PlacepricingPricing {
  averageMonthly: Int!
  averageWeekly: Int!
  basePrice: Int!
  cleaningFee: Int
  currency: CURRENCY
  extraGuests: Int
  monthlyDiscount: Int
  perNight: Int!
  securityDeposit: Int
  smartPricing: Boolean
  weekendPricing: Int
  weeklyDiscount: Int
}

input PlacereviewsReview {
  accuracy: Int!
  checkIn: Int!
  cleanliness: Int!
  communication: Int!
  location: Int!
  stars: Int!
  text: String!
  value: Int!
  experienceId: ID
  experience: ReviewexperienceExperience
}

input PlaceSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [PlaceSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [PlaceSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: PlaceSubscriptionFilterNode
}

input PlaceSubscriptionFilterNode {
  description: String

  # All values that are not equal to given value.
  description_not: String

  # All values that are contained in given list.
  description_in: [String!]

  # All values that are not contained in given list.
  description_not_in: [String!]

  # All values less than the given value.
  description_lt: String

  # All values less than or equal the given value.
  description_lte: String

  # All values greater than the given value.
  description_gt: String

  # All values greater than or equal the given value.
  description_gte: String

  # All values containing the given string.
  description_contains: String

  # All values not containing the given string.
  description_not_contains: String

  # All values starting with the given string.
  description_starts_with: String

  # All values not starting with the given string.
  description_not_starts_with: String

  # All values ending with the given string.
  description_ends_with: String

  # All values not ending with the given string.
  description_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  maxGuests: Int

  # All values that are not equal to given value.
  maxGuests_not: Int

  # All values that are contained in given list.
  maxGuests_in: [Int!]

  # All values that are not contained in given list.
  maxGuests_not_in: [Int!]

  # All values less than the given value.
  maxGuests_lt: Int

  # All values less than or equal the given value.
  maxGuests_lte: Int

  # All values greater than the given value.
  maxGuests_gt: Int

  # All values greater than or equal the given value.
  maxGuests_gte: Int
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  numBaths: Int

  # All values that are not equal to given value.
  numBaths_not: Int

  # All values that are contained in given list.
  numBaths_in: [Int!]

  # All values that are not contained in given list.
  numBaths_not_in: [Int!]

  # All values less than the given value.
  numBaths_lt: Int

  # All values less than or equal the given value.
  numBaths_lte: Int

  # All values greater than the given value.
  numBaths_gt: Int

  # All values greater than or equal the given value.
  numBaths_gte: Int
  numBedrooms: Int

  # All values that are not equal to given value.
  numBedrooms_not: Int

  # All values that are contained in given list.
  numBedrooms_in: [Int!]

  # All values that are not contained in given list.
  numBedrooms_not_in: [Int!]

  # All values less than the given value.
  numBedrooms_lt: Int

  # All values less than or equal the given value.
  numBedrooms_lte: Int

  # All values greater than the given value.
  numBedrooms_gt: Int

  # All values greater than or equal the given value.
  numBedrooms_gte: Int
  numBeds: Int

  # All values that are not equal to given value.
  numBeds_not: Int

  # All values that are contained in given list.
  numBeds_in: [Int!]

  # All values that are not contained in given list.
  numBeds_not_in: [Int!]

  # All values less than the given value.
  numBeds_lt: Int

  # All values less than or equal the given value.
  numBeds_lte: Int

  # All values greater than the given value.
  numBeds_gt: Int

  # All values greater than or equal the given value.
  numBeds_gte: Int
  popularity: Int

  # All values that are not equal to given value.
  popularity_not: Int

  # All values that are contained in given list.
  popularity_in: [Int!]

  # All values that are not contained in given list.
  popularity_not_in: [Int!]

  # All values less than the given value.
  popularity_lt: Int

  # All values less than or equal the given value.
  popularity_lte: Int

  # All values greater than the given value.
  popularity_gt: Int

  # All values greater than or equal the given value.
  popularity_gte: Int
  shortDescription: String

  # All values that are not equal to given value.
  shortDescription_not: String

  # All values that are contained in given list.
  shortDescription_in: [String!]

  # All values that are not contained in given list.
  shortDescription_not_in: [String!]

  # All values less than the given value.
  shortDescription_lt: String

  # All values less than or equal the given value.
  shortDescription_lte: String

  # All values greater than the given value.
  shortDescription_gt: String

  # All values greater than or equal the given value.
  shortDescription_gte: String

  # All values containing the given string.
  shortDescription_contains: String

  # All values not containing the given string.
  shortDescription_not_contains: String

  # All values starting with the given string.
  shortDescription_starts_with: String

  # All values not starting with the given string.
  shortDescription_not_starts_with: String

  # All values ending with the given string.
  shortDescription_ends_with: String

  # All values not ending with the given string.
  shortDescription_not_ends_with: String
  size: PLACE_SIZES

  # All values that are not equal to given value.
  size_not: PLACE_SIZES

  # All values that are contained in given list.
  size_in: [PLACE_SIZES!]

  # All values that are not contained in given list.
  size_not_in: [PLACE_SIZES!]
  slug: String

  # All values that are not equal to given value.
  slug_not: String

  # All values that are contained in given list.
  slug_in: [String!]

  # All values that are not contained in given list.
  slug_not_in: [String!]

  # All values less than the given value.
  slug_lt: String

  # All values less than or equal the given value.
  slug_lte: String

  # All values greater than the given value.
  slug_gt: String

  # All values greater than or equal the given value.
  slug_gte: String

  # All values containing the given string.
  slug_contains: String

  # All values not containing the given string.
  slug_not_contains: String

  # All values starting with the given string.
  slug_starts_with: String

  # All values not starting with the given string.
  slug_not_starts_with: String

  # All values ending with the given string.
  slug_ends_with: String

  # All values not ending with the given string.
  slug_not_ends_with: String
  amenities: AmenitiesFilter
  bookings_every: BookingFilter
  bookings_some: BookingFilter
  bookings_none: BookingFilter
  guestRequirements: GuestRequirementsFilter
  host: UserFilter
  houseRules: HouseRulesFilter
  location: LocationFilter
  pictures_every: PictureFilter
  pictures_some: PictureFilter
  pictures_none: PictureFilter
  policies: PoliciesFilter
  pricing: PricingFilter
  reviews_every: ReviewFilter
  reviews_some: ReviewFilter
  reviews_none: ReviewFilter
  views: PlaceViewsFilter
}

type PlaceSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Place
  updatedFields: [String!]
  previousValues: PlacePreviousValues
}

type PlaceViews implements Node {
  id: ID!
  lastWeek: Int!
  place(filter: PlaceFilter): Place!
}

input PlaceViewsFilter {
  # Logical AND on all given filters.
  AND: [PlaceViewsFilter!]

  # Logical OR on all given filters.
  OR: [PlaceViewsFilter!]
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  lastWeek: Int

  # All values that are not equal to given value.
  lastWeek_not: Int

  # All values that are contained in given list.
  lastWeek_in: [Int!]

  # All values that are not contained in given list.
  lastWeek_not_in: [Int!]

  # All values less than the given value.
  lastWeek_lt: Int

  # All values less than or equal the given value.
  lastWeek_lte: Int

  # All values greater than the given value.
  lastWeek_gt: Int

  # All values greater than or equal the given value.
  lastWeek_gte: Int
  place: PlaceFilter
}

enum PlaceViewsOrderBy {
  id_ASC
  id_DESC
  lastWeek_ASC
  lastWeek_DESC
}

input PlaceViewsplacePlace {
  description: String!
  maxGuests: Int!
  name: String
  numBaths: Int!
  numBedrooms: Int!
  numBeds: Int!
  popularity: Int!
  shortDescription: String!
  size: PLACE_SIZES
  slug: String!
  amenitiesId: ID
  amenities: PlaceamenitiesAmenities
  guestRequirementsId: ID
  guestRequirements: PlaceguestRequirementsGuestRequirements
  hostId: ID
  host: PlacehostUser
  houseRulesId: ID
  houseRules: PlacehouseRulesHouseRules
  locationId: ID
  location: PlacelocationLocation
  policiesId: ID
  policies: PlacepoliciesPolicies
  pricingId: ID
  pricing: PlacepricingPricing
  bookingsIds: [ID!]
  bookings: [PlacebookingsBooking!]
  picturesIds: [ID!]
  pictures: [PlacepicturesPicture!]
  reviewsIds: [ID!]
  reviews: [PlacereviewsReview!]
}

input PlaceviewsPlaceViews {
  lastWeek: Int!
}

type PlaceViewsPreviousValues {
  id: ID!
  lastWeek: Int!
}

input PlaceViewsSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [PlaceViewsSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [PlaceViewsSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: PlaceViewsSubscriptionFilterNode
}

input PlaceViewsSubscriptionFilterNode {
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  lastWeek: Int

  # All values that are not equal to given value.
  lastWeek_not: Int

  # All values that are contained in given list.
  lastWeek_in: [Int!]

  # All values that are not contained in given list.
  lastWeek_not_in: [Int!]

  # All values less than the given value.
  lastWeek_lt: Int

  # All values less than or equal the given value.
  lastWeek_lte: Int

  # All values greater than the given value.
  lastWeek_gt: Int

  # All values greater than or equal the given value.
  lastWeek_gte: Int
  place: PlaceFilter
}

type PlaceViewsSubscriptionPayload {
  mutation: _ModelMutationType!
  node: PlaceViews
  updatedFields: [String!]
  previousValues: PlaceViewsPreviousValues
}

type Policies implements Node {
  checkInEndTime: Float!
  checkInStartTime: Float!
  checkoutTime: Float!
  createdAt: DateTime!
  id: ID!
  place(filter: PlaceFilter): Place!
  updatedAt: DateTime!
}

input PoliciesFilter {
  # Logical AND on all given filters.
  AND: [PoliciesFilter!]

  # Logical OR on all given filters.
  OR: [PoliciesFilter!]
  checkInEndTime: Float

  # All values that are not equal to given value.
  checkInEndTime_not: Float

  # All values that are contained in given list.
  checkInEndTime_in: [Float!]

  # All values that are not contained in given list.
  checkInEndTime_not_in: [Float!]

  # All values less than the given value.
  checkInEndTime_lt: Float

  # All values less than or equal the given value.
  checkInEndTime_lte: Float

  # All values greater than the given value.
  checkInEndTime_gt: Float

  # All values greater than or equal the given value.
  checkInEndTime_gte: Float
  checkInStartTime: Float

  # All values that are not equal to given value.
  checkInStartTime_not: Float

  # All values that are contained in given list.
  checkInStartTime_in: [Float!]

  # All values that are not contained in given list.
  checkInStartTime_not_in: [Float!]

  # All values less than the given value.
  checkInStartTime_lt: Float

  # All values less than or equal the given value.
  checkInStartTime_lte: Float

  # All values greater than the given value.
  checkInStartTime_gt: Float

  # All values greater than or equal the given value.
  checkInStartTime_gte: Float
  checkoutTime: Float

  # All values that are not equal to given value.
  checkoutTime_not: Float

  # All values that are contained in given list.
  checkoutTime_in: [Float!]

  # All values that are not contained in given list.
  checkoutTime_not_in: [Float!]

  # All values less than the given value.
  checkoutTime_lt: Float

  # All values less than or equal the given value.
  checkoutTime_lte: Float

  # All values greater than the given value.
  checkoutTime_gt: Float

  # All values greater than or equal the given value.
  checkoutTime_gte: Float
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  place: PlaceFilter
}

enum PoliciesOrderBy {
  checkInEndTime_ASC
  checkInEndTime_DESC
  checkInStartTime_ASC
  checkInStartTime_DESC
  checkoutTime_ASC
  checkoutTime_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input PoliciesplacePlace {
  description: String!
  maxGuests: Int!
  name: String
  numBaths: Int!
  numBedrooms: Int!
  numBeds: Int!
  popularity: Int!
  shortDescription: String!
  size: PLACE_SIZES
  slug: String!
  amenitiesId: ID
  amenities: PlaceamenitiesAmenities
  guestRequirementsId: ID
  guestRequirements: PlaceguestRequirementsGuestRequirements
  hostId: ID
  host: PlacehostUser
  houseRulesId: ID
  houseRules: PlacehouseRulesHouseRules
  locationId: ID
  location: PlacelocationLocation
  pricingId: ID
  pricing: PlacepricingPricing
  viewsId: ID
  views: PlaceviewsPlaceViews
  bookingsIds: [ID!]
  bookings: [PlacebookingsBooking!]
  picturesIds: [ID!]
  pictures: [PlacepicturesPicture!]
  reviewsIds: [ID!]
  reviews: [PlacereviewsReview!]
}

type PoliciesPreviousValues {
  checkInEndTime: Float!
  checkInStartTime: Float!
  checkoutTime: Float!
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

input PoliciesSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [PoliciesSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [PoliciesSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: PoliciesSubscriptionFilterNode
}

input PoliciesSubscriptionFilterNode {
  checkInEndTime: Float

  # All values that are not equal to given value.
  checkInEndTime_not: Float

  # All values that are contained in given list.
  checkInEndTime_in: [Float!]

  # All values that are not contained in given list.
  checkInEndTime_not_in: [Float!]

  # All values less than the given value.
  checkInEndTime_lt: Float

  # All values less than or equal the given value.
  checkInEndTime_lte: Float

  # All values greater than the given value.
  checkInEndTime_gt: Float

  # All values greater than or equal the given value.
  checkInEndTime_gte: Float
  checkInStartTime: Float

  # All values that are not equal to given value.
  checkInStartTime_not: Float

  # All values that are contained in given list.
  checkInStartTime_in: [Float!]

  # All values that are not contained in given list.
  checkInStartTime_not_in: [Float!]

  # All values less than the given value.
  checkInStartTime_lt: Float

  # All values less than or equal the given value.
  checkInStartTime_lte: Float

  # All values greater than the given value.
  checkInStartTime_gt: Float

  # All values greater than or equal the given value.
  checkInStartTime_gte: Float
  checkoutTime: Float

  # All values that are not equal to given value.
  checkoutTime_not: Float

  # All values that are contained in given list.
  checkoutTime_in: [Float!]

  # All values that are not contained in given list.
  checkoutTime_not_in: [Float!]

  # All values less than the given value.
  checkoutTime_lt: Float

  # All values less than or equal the given value.
  checkoutTime_lte: Float

  # All values greater than the given value.
  checkoutTime_gt: Float

  # All values greater than or equal the given value.
  checkoutTime_gte: Float
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  place: PlaceFilter
}

type PoliciesSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Policies
  updatedFields: [String!]
  previousValues: PoliciesPreviousValues
}

type Pricing implements Node {
  averageMonthly: Int!
  averageWeekly: Int!
  basePrice: Int!
  cleaningFee: Int
  currency: CURRENCY
  extraGuests: Int
  id: ID!
  monthlyDiscount: Int
  perNight: Int!
  place(filter: PlaceFilter): Place!
  securityDeposit: Int
  smartPricing: Boolean!
  weekendPricing: Int
  weeklyDiscount: Int
}

input PricingFilter {
  # Logical AND on all given filters.
  AND: [PricingFilter!]

  # Logical OR on all given filters.
  OR: [PricingFilter!]
  averageMonthly: Int

  # All values that are not equal to given value.
  averageMonthly_not: Int

  # All values that are contained in given list.
  averageMonthly_in: [Int!]

  # All values that are not contained in given list.
  averageMonthly_not_in: [Int!]

  # All values less than the given value.
  averageMonthly_lt: Int

  # All values less than or equal the given value.
  averageMonthly_lte: Int

  # All values greater than the given value.
  averageMonthly_gt: Int

  # All values greater than or equal the given value.
  averageMonthly_gte: Int
  averageWeekly: Int

  # All values that are not equal to given value.
  averageWeekly_not: Int

  # All values that are contained in given list.
  averageWeekly_in: [Int!]

  # All values that are not contained in given list.
  averageWeekly_not_in: [Int!]

  # All values less than the given value.
  averageWeekly_lt: Int

  # All values less than or equal the given value.
  averageWeekly_lte: Int

  # All values greater than the given value.
  averageWeekly_gt: Int

  # All values greater than or equal the given value.
  averageWeekly_gte: Int
  basePrice: Int

  # All values that are not equal to given value.
  basePrice_not: Int

  # All values that are contained in given list.
  basePrice_in: [Int!]

  # All values that are not contained in given list.
  basePrice_not_in: [Int!]

  # All values less than the given value.
  basePrice_lt: Int

  # All values less than or equal the given value.
  basePrice_lte: Int

  # All values greater than the given value.
  basePrice_gt: Int

  # All values greater than or equal the given value.
  basePrice_gte: Int
  cleaningFee: Int

  # All values that are not equal to given value.
  cleaningFee_not: Int

  # All values that are contained in given list.
  cleaningFee_in: [Int!]

  # All values that are not contained in given list.
  cleaningFee_not_in: [Int!]

  # All values less than the given value.
  cleaningFee_lt: Int

  # All values less than or equal the given value.
  cleaningFee_lte: Int

  # All values greater than the given value.
  cleaningFee_gt: Int

  # All values greater than or equal the given value.
  cleaningFee_gte: Int
  currency: CURRENCY

  # All values that are not equal to given value.
  currency_not: CURRENCY

  # All values that are contained in given list.
  currency_in: [CURRENCY!]

  # All values that are not contained in given list.
  currency_not_in: [CURRENCY!]
  extraGuests: Int

  # All values that are not equal to given value.
  extraGuests_not: Int

  # All values that are contained in given list.
  extraGuests_in: [Int!]

  # All values that are not contained in given list.
  extraGuests_not_in: [Int!]

  # All values less than the given value.
  extraGuests_lt: Int

  # All values less than or equal the given value.
  extraGuests_lte: Int

  # All values greater than the given value.
  extraGuests_gt: Int

  # All values greater than or equal the given value.
  extraGuests_gte: Int
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  monthlyDiscount: Int

  # All values that are not equal to given value.
  monthlyDiscount_not: Int

  # All values that are contained in given list.
  monthlyDiscount_in: [Int!]

  # All values that are not contained in given list.
  monthlyDiscount_not_in: [Int!]

  # All values less than the given value.
  monthlyDiscount_lt: Int

  # All values less than or equal the given value.
  monthlyDiscount_lte: Int

  # All values greater than the given value.
  monthlyDiscount_gt: Int

  # All values greater than or equal the given value.
  monthlyDiscount_gte: Int
  perNight: Int

  # All values that are not equal to given value.
  perNight_not: Int

  # All values that are contained in given list.
  perNight_in: [Int!]

  # All values that are not contained in given list.
  perNight_not_in: [Int!]

  # All values less than the given value.
  perNight_lt: Int

  # All values less than or equal the given value.
  perNight_lte: Int

  # All values greater than the given value.
  perNight_gt: Int

  # All values greater than or equal the given value.
  perNight_gte: Int
  securityDeposit: Int

  # All values that are not equal to given value.
  securityDeposit_not: Int

  # All values that are contained in given list.
  securityDeposit_in: [Int!]

  # All values that are not contained in given list.
  securityDeposit_not_in: [Int!]

  # All values less than the given value.
  securityDeposit_lt: Int

  # All values less than or equal the given value.
  securityDeposit_lte: Int

  # All values greater than the given value.
  securityDeposit_gt: Int

  # All values greater than or equal the given value.
  securityDeposit_gte: Int
  smartPricing: Boolean

  # All values that are not equal to given value.
  smartPricing_not: Boolean
  weekendPricing: Int

  # All values that are not equal to given value.
  weekendPricing_not: Int

  # All values that are contained in given list.
  weekendPricing_in: [Int!]

  # All values that are not contained in given list.
  weekendPricing_not_in: [Int!]

  # All values less than the given value.
  weekendPricing_lt: Int

  # All values less than or equal the given value.
  weekendPricing_lte: Int

  # All values greater than the given value.
  weekendPricing_gt: Int

  # All values greater than or equal the given value.
  weekendPricing_gte: Int
  weeklyDiscount: Int

  # All values that are not equal to given value.
  weeklyDiscount_not: Int

  # All values that are contained in given list.
  weeklyDiscount_in: [Int!]

  # All values that are not contained in given list.
  weeklyDiscount_not_in: [Int!]

  # All values less than the given value.
  weeklyDiscount_lt: Int

  # All values less than or equal the given value.
  weeklyDiscount_lte: Int

  # All values greater than the given value.
  weeklyDiscount_gt: Int

  # All values greater than or equal the given value.
  weeklyDiscount_gte: Int
  place: PlaceFilter
}

enum PricingOrderBy {
  averageMonthly_ASC
  averageMonthly_DESC
  averageWeekly_ASC
  averageWeekly_DESC
  basePrice_ASC
  basePrice_DESC
  cleaningFee_ASC
  cleaningFee_DESC
  currency_ASC
  currency_DESC
  extraGuests_ASC
  extraGuests_DESC
  id_ASC
  id_DESC
  monthlyDiscount_ASC
  monthlyDiscount_DESC
  perNight_ASC
  perNight_DESC
  securityDeposit_ASC
  securityDeposit_DESC
  smartPricing_ASC
  smartPricing_DESC
  weekendPricing_ASC
  weekendPricing_DESC
  weeklyDiscount_ASC
  weeklyDiscount_DESC
}

input PricingplacePlace {
  description: String!
  maxGuests: Int!
  name: String
  numBaths: Int!
  numBedrooms: Int!
  numBeds: Int!
  popularity: Int!
  shortDescription: String!
  size: PLACE_SIZES
  slug: String!
  amenitiesId: ID
  amenities: PlaceamenitiesAmenities
  guestRequirementsId: ID
  guestRequirements: PlaceguestRequirementsGuestRequirements
  hostId: ID
  host: PlacehostUser
  houseRulesId: ID
  houseRules: PlacehouseRulesHouseRules
  locationId: ID
  location: PlacelocationLocation
  policiesId: ID
  policies: PlacepoliciesPolicies
  viewsId: ID
  views: PlaceviewsPlaceViews
  bookingsIds: [ID!]
  bookings: [PlacebookingsBooking!]
  picturesIds: [ID!]
  pictures: [PlacepicturesPicture!]
  reviewsIds: [ID!]
  reviews: [PlacereviewsReview!]
}

type PricingPreviousValues {
  averageMonthly: Int!
  averageWeekly: Int!
  basePrice: Int!
  cleaningFee: Int
  currency: CURRENCY
  extraGuests: Int
  id: ID!
  monthlyDiscount: Int
  perNight: Int!
  securityDeposit: Int
  smartPricing: Boolean!
  weekendPricing: Int
  weeklyDiscount: Int
}

input PricingSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [PricingSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [PricingSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: PricingSubscriptionFilterNode
}

input PricingSubscriptionFilterNode {
  averageMonthly: Int

  # All values that are not equal to given value.
  averageMonthly_not: Int

  # All values that are contained in given list.
  averageMonthly_in: [Int!]

  # All values that are not contained in given list.
  averageMonthly_not_in: [Int!]

  # All values less than the given value.
  averageMonthly_lt: Int

  # All values less than or equal the given value.
  averageMonthly_lte: Int

  # All values greater than the given value.
  averageMonthly_gt: Int

  # All values greater than or equal the given value.
  averageMonthly_gte: Int
  averageWeekly: Int

  # All values that are not equal to given value.
  averageWeekly_not: Int

  # All values that are contained in given list.
  averageWeekly_in: [Int!]

  # All values that are not contained in given list.
  averageWeekly_not_in: [Int!]

  # All values less than the given value.
  averageWeekly_lt: Int

  # All values less than or equal the given value.
  averageWeekly_lte: Int

  # All values greater than the given value.
  averageWeekly_gt: Int

  # All values greater than or equal the given value.
  averageWeekly_gte: Int
  basePrice: Int

  # All values that are not equal to given value.
  basePrice_not: Int

  # All values that are contained in given list.
  basePrice_in: [Int!]

  # All values that are not contained in given list.
  basePrice_not_in: [Int!]

  # All values less than the given value.
  basePrice_lt: Int

  # All values less than or equal the given value.
  basePrice_lte: Int

  # All values greater than the given value.
  basePrice_gt: Int

  # All values greater than or equal the given value.
  basePrice_gte: Int
  cleaningFee: Int

  # All values that are not equal to given value.
  cleaningFee_not: Int

  # All values that are contained in given list.
  cleaningFee_in: [Int!]

  # All values that are not contained in given list.
  cleaningFee_not_in: [Int!]

  # All values less than the given value.
  cleaningFee_lt: Int

  # All values less than or equal the given value.
  cleaningFee_lte: Int

  # All values greater than the given value.
  cleaningFee_gt: Int

  # All values greater than or equal the given value.
  cleaningFee_gte: Int
  currency: CURRENCY

  # All values that are not equal to given value.
  currency_not: CURRENCY

  # All values that are contained in given list.
  currency_in: [CURRENCY!]

  # All values that are not contained in given list.
  currency_not_in: [CURRENCY!]
  extraGuests: Int

  # All values that are not equal to given value.
  extraGuests_not: Int

  # All values that are contained in given list.
  extraGuests_in: [Int!]

  # All values that are not contained in given list.
  extraGuests_not_in: [Int!]

  # All values less than the given value.
  extraGuests_lt: Int

  # All values less than or equal the given value.
  extraGuests_lte: Int

  # All values greater than the given value.
  extraGuests_gt: Int

  # All values greater than or equal the given value.
  extraGuests_gte: Int
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  monthlyDiscount: Int

  # All values that are not equal to given value.
  monthlyDiscount_not: Int

  # All values that are contained in given list.
  monthlyDiscount_in: [Int!]

  # All values that are not contained in given list.
  monthlyDiscount_not_in: [Int!]

  # All values less than the given value.
  monthlyDiscount_lt: Int

  # All values less than or equal the given value.
  monthlyDiscount_lte: Int

  # All values greater than the given value.
  monthlyDiscount_gt: Int

  # All values greater than or equal the given value.
  monthlyDiscount_gte: Int
  perNight: Int

  # All values that are not equal to given value.
  perNight_not: Int

  # All values that are contained in given list.
  perNight_in: [Int!]

  # All values that are not contained in given list.
  perNight_not_in: [Int!]

  # All values less than the given value.
  perNight_lt: Int

  # All values less than or equal the given value.
  perNight_lte: Int

  # All values greater than the given value.
  perNight_gt: Int

  # All values greater than or equal the given value.
  perNight_gte: Int
  securityDeposit: Int

  # All values that are not equal to given value.
  securityDeposit_not: Int

  # All values that are contained in given list.
  securityDeposit_in: [Int!]

  # All values that are not contained in given list.
  securityDeposit_not_in: [Int!]

  # All values less than the given value.
  securityDeposit_lt: Int

  # All values less than or equal the given value.
  securityDeposit_lte: Int

  # All values greater than the given value.
  securityDeposit_gt: Int

  # All values greater than or equal the given value.
  securityDeposit_gte: Int
  smartPricing: Boolean

  # All values that are not equal to given value.
  smartPricing_not: Boolean
  weekendPricing: Int

  # All values that are not equal to given value.
  weekendPricing_not: Int

  # All values that are contained in given list.
  weekendPricing_in: [Int!]

  # All values that are not contained in given list.
  weekendPricing_not_in: [Int!]

  # All values less than the given value.
  weekendPricing_lt: Int

  # All values less than or equal the given value.
  weekendPricing_lte: Int

  # All values greater than the given value.
  weekendPricing_gt: Int

  # All values greater than or equal the given value.
  weekendPricing_gte: Int
  weeklyDiscount: Int

  # All values that are not equal to given value.
  weeklyDiscount_not: Int

  # All values that are contained in given list.
  weeklyDiscount_in: [Int!]

  # All values that are not contained in given list.
  weeklyDiscount_not_in: [Int!]

  # All values less than the given value.
  weeklyDiscount_lt: Int

  # All values less than or equal the given value.
  weeklyDiscount_lte: Int

  # All values greater than the given value.
  weeklyDiscount_gt: Int

  # All values greater than or equal the given value.
  weeklyDiscount_gte: Int
  place: PlaceFilter
}

type PricingSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Pricing
  updatedFields: [String!]
  previousValues: PricingPreviousValues
}

type Query {
  allAmenitieses(
    filter: AmenitiesFilter
    orderBy: AmenitiesOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Amenities!]!
  allBookings(
    filter: BookingFilter
    orderBy: BookingOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Booking!]!
  allCities(
    filter: CityFilter
    orderBy: CityOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [City!]!
  allCreditCardInformations(
    filter: CreditCardInformationFilter
    orderBy: CreditCardInformationOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [CreditCardInformation!]!
  allExperiences(
    filter: ExperienceFilter
    orderBy: ExperienceOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Experience!]!
  allExperienceCategories(
    filter: ExperienceCategoryFilter
    orderBy: ExperienceCategoryOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [ExperienceCategory!]!
  allGuestRequirementses(
    filter: GuestRequirementsFilter
    orderBy: GuestRequirementsOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [GuestRequirements!]!
  allHouseRuleses(
    filter: HouseRulesFilter
    orderBy: HouseRulesOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [HouseRules!]!
  allLocations(
    filter: LocationFilter
    orderBy: LocationOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Location!]!
  allMessages(
    filter: MessageFilter
    orderBy: MessageOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Message!]!
  allNeighbourhoods(
    filter: NeighbourhoodFilter
    orderBy: NeighbourhoodOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Neighbourhood!]!
  allNotifications(
    filter: NotificationFilter
    orderBy: NotificationOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Notification!]!
  allPayments(
    filter: PaymentFilter
    orderBy: PaymentOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Payment!]!
  allPaymentAccounts(
    filter: PaymentAccountFilter
    orderBy: PaymentAccountOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PaymentAccount!]!
  allPaypalInformations(
    filter: PaypalInformationFilter
    orderBy: PaypalInformationOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PaypalInformation!]!
  allPictures(
    filter: PictureFilter
    orderBy: PictureOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Picture!]!
  allPlaces(
    filter: PlaceFilter
    orderBy: PlaceOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Place!]!
  allPlaceViewses(
    filter: PlaceViewsFilter
    orderBy: PlaceViewsOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PlaceViews!]!
  allPolicieses(
    filter: PoliciesFilter
    orderBy: PoliciesOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Policies!]!
  allPricings(
    filter: PricingFilter
    orderBy: PricingOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Pricing!]!
  allRestaurants(
    filter: RestaurantFilter
    orderBy: RestaurantOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Restaurant!]!
  allReviews(
    filter: ReviewFilter
    orderBy: ReviewOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Review!]!
  allUsers(
    filter: UserFilter
    orderBy: UserOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User!]!
  _allAmenitiesesMeta(
    filter: AmenitiesFilter
    orderBy: AmenitiesOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!
  _allBookingsMeta(
    filter: BookingFilter
    orderBy: BookingOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!
  _allCitiesMeta(
    filter: CityFilter
    orderBy: CityOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!
  _allCreditCardInformationsMeta(
    filter: CreditCardInformationFilter
    orderBy: CreditCardInformationOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!
  _allExperiencesMeta(
    filter: ExperienceFilter
    orderBy: ExperienceOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!
  _allExperienceCategoriesMeta(
    filter: ExperienceCategoryFilter
    orderBy: ExperienceCategoryOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!
  _allGuestRequirementsesMeta(
    filter: GuestRequirementsFilter
    orderBy: GuestRequirementsOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!
  _allHouseRulesesMeta(
    filter: HouseRulesFilter
    orderBy: HouseRulesOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!
  _allLocationsMeta(
    filter: LocationFilter
    orderBy: LocationOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!
  _allMessagesMeta(
    filter: MessageFilter
    orderBy: MessageOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!
  _allNeighbourhoodsMeta(
    filter: NeighbourhoodFilter
    orderBy: NeighbourhoodOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!
  _allNotificationsMeta(
    filter: NotificationFilter
    orderBy: NotificationOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!
  _allPaymentsMeta(
    filter: PaymentFilter
    orderBy: PaymentOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!
  _allPaymentAccountsMeta(
    filter: PaymentAccountFilter
    orderBy: PaymentAccountOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!
  _allPaypalInformationsMeta(
    filter: PaypalInformationFilter
    orderBy: PaypalInformationOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!
  _allPicturesMeta(
    filter: PictureFilter
    orderBy: PictureOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!
  _allPlacesMeta(
    filter: PlaceFilter
    orderBy: PlaceOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!
  _allPlaceViewsesMeta(
    filter: PlaceViewsFilter
    orderBy: PlaceViewsOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!
  _allPoliciesesMeta(
    filter: PoliciesFilter
    orderBy: PoliciesOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!
  _allPricingsMeta(
    filter: PricingFilter
    orderBy: PricingOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!
  _allRestaurantsMeta(
    filter: RestaurantFilter
    orderBy: RestaurantOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!
  _allReviewsMeta(
    filter: ReviewFilter
    orderBy: ReviewOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!
  _allUsersMeta(
    filter: UserFilter
    orderBy: UserOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!
  Amenities(id: ID): Amenities
  Booking(id: ID): Booking
  City(id: ID): City
  CreditCardInformation(id: ID): CreditCardInformation
  Experience(id: ID): Experience
  ExperienceCategory(id: ID): ExperienceCategory
  GuestRequirements(id: ID): GuestRequirements
  HouseRules(id: ID): HouseRules
  Location(id: ID): Location
  Message(id: ID): Message
  Neighbourhood(id: ID): Neighbourhood
  Notification(id: ID): Notification
  Payment(id: ID): Payment
  PaymentAccount(id: ID): PaymentAccount
  PaypalInformation(id: ID): PaypalInformation
  Picture(id: ID): Picture
  Place(id: ID): Place
  PlaceViews(id: ID): PlaceViews
  Policies(id: ID): Policies
  Pricing(id: ID): Pricing
  Restaurant(id: ID): Restaurant
  Review(id: ID): Review
  User(email: String, id: ID): User
  user: User

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

type RemoveFromExperienceReviewsPayload {
  experienceExperience: Experience
  reviewsReview: Review
}

type RemoveFromNeighbourhoodPayload {
  locationsLocation: Location
  neighbourHoodNeighbourhood: Neighbourhood
}

type RemoveFromPlacePicturesPayload {
  placePlace: Place
  picturesPicture: Picture
}

type RemoveFromRestaurantPicturePayload {
  picturesPicture: Picture
  reservationRestaurant: Restaurant
}

type Restaurant implements Node {
  avgPricePerPerson: Int!
  createdAt: DateTime!
  id: ID!
  isCurated: Boolean!
  location(filter: LocationFilter): Location!
  pictures(
    filter: PictureFilter
    orderBy: PictureOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Picture!]
  popularity: Int!
  slug: String!
  title: String!

  # Meta information about the query.
  _picturesMeta(
    filter: PictureFilter
    orderBy: PictureOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!
}

input RestaurantFilter {
  # Logical AND on all given filters.
  AND: [RestaurantFilter!]

  # Logical OR on all given filters.
  OR: [RestaurantFilter!]
  avgPricePerPerson: Int

  # All values that are not equal to given value.
  avgPricePerPerson_not: Int

  # All values that are contained in given list.
  avgPricePerPerson_in: [Int!]

  # All values that are not contained in given list.
  avgPricePerPerson_not_in: [Int!]

  # All values less than the given value.
  avgPricePerPerson_lt: Int

  # All values less than or equal the given value.
  avgPricePerPerson_lte: Int

  # All values greater than the given value.
  avgPricePerPerson_gt: Int

  # All values greater than or equal the given value.
  avgPricePerPerson_gte: Int
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  isCurated: Boolean

  # All values that are not equal to given value.
  isCurated_not: Boolean
  popularity: Int

  # All values that are not equal to given value.
  popularity_not: Int

  # All values that are contained in given list.
  popularity_in: [Int!]

  # All values that are not contained in given list.
  popularity_not_in: [Int!]

  # All values less than the given value.
  popularity_lt: Int

  # All values less than or equal the given value.
  popularity_lte: Int

  # All values greater than the given value.
  popularity_gt: Int

  # All values greater than or equal the given value.
  popularity_gte: Int
  slug: String

  # All values that are not equal to given value.
  slug_not: String

  # All values that are contained in given list.
  slug_in: [String!]

  # All values that are not contained in given list.
  slug_not_in: [String!]

  # All values less than the given value.
  slug_lt: String

  # All values less than or equal the given value.
  slug_lte: String

  # All values greater than the given value.
  slug_gt: String

  # All values greater than or equal the given value.
  slug_gte: String

  # All values containing the given string.
  slug_contains: String

  # All values not containing the given string.
  slug_not_contains: String

  # All values starting with the given string.
  slug_starts_with: String

  # All values not starting with the given string.
  slug_not_starts_with: String

  # All values ending with the given string.
  slug_ends_with: String

  # All values not ending with the given string.
  slug_not_ends_with: String
  title: String

  # All values that are not equal to given value.
  title_not: String

  # All values that are contained in given list.
  title_in: [String!]

  # All values that are not contained in given list.
  title_not_in: [String!]

  # All values less than the given value.
  title_lt: String

  # All values less than or equal the given value.
  title_lte: String

  # All values greater than the given value.
  title_gt: String

  # All values greater than or equal the given value.
  title_gte: String

  # All values containing the given string.
  title_contains: String

  # All values not containing the given string.
  title_not_contains: String

  # All values starting with the given string.
  title_starts_with: String

  # All values not starting with the given string.
  title_not_starts_with: String

  # All values ending with the given string.
  title_ends_with: String

  # All values not ending with the given string.
  title_not_ends_with: String
  location: LocationFilter
  pictures_every: PictureFilter
  pictures_some: PictureFilter
  pictures_none: PictureFilter
}

input RestaurantlocationLocation {
  address: String
  directions: String
  lat: Float!
  lng: Float!
  experienceId: ID
  experience: LocationexperienceExperience
  neighbourHoodId: ID
  neighbourHood: LocationneighbourHoodNeighbourhood
  placeId: ID
  place: LocationplacePlace
  userId: ID
  user: LocationuserUser
}

enum RestaurantOrderBy {
  avgPricePerPerson_ASC
  avgPricePerPerson_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  isCurated_ASC
  isCurated_DESC
  popularity_ASC
  popularity_DESC
  slug_ASC
  slug_DESC
  title_ASC
  title_DESC
}

input RestaurantpicturesPicture {
  url: String!
  experienceId: ID
  experience: PictureexperienceExperience
  neighbourHoodId: ID
  neighbourHood: PictureneighbourHoodNeighbourhood
  placeId: ID
  place: PictureplacePlace
  userId: ID
  user: PictureuserUser
}

type RestaurantPreviousValues {
  avgPricePerPerson: Int!
  createdAt: DateTime!
  id: ID!
  isCurated: Boolean!
  popularity: Int!
  slug: String!
  title: String!
}

input RestaurantSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [RestaurantSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [RestaurantSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: RestaurantSubscriptionFilterNode
}

input RestaurantSubscriptionFilterNode {
  avgPricePerPerson: Int

  # All values that are not equal to given value.
  avgPricePerPerson_not: Int

  # All values that are contained in given list.
  avgPricePerPerson_in: [Int!]

  # All values that are not contained in given list.
  avgPricePerPerson_not_in: [Int!]

  # All values less than the given value.
  avgPricePerPerson_lt: Int

  # All values less than or equal the given value.
  avgPricePerPerson_lte: Int

  # All values greater than the given value.
  avgPricePerPerson_gt: Int

  # All values greater than or equal the given value.
  avgPricePerPerson_gte: Int
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  isCurated: Boolean

  # All values that are not equal to given value.
  isCurated_not: Boolean
  popularity: Int

  # All values that are not equal to given value.
  popularity_not: Int

  # All values that are contained in given list.
  popularity_in: [Int!]

  # All values that are not contained in given list.
  popularity_not_in: [Int!]

  # All values less than the given value.
  popularity_lt: Int

  # All values less than or equal the given value.
  popularity_lte: Int

  # All values greater than the given value.
  popularity_gt: Int

  # All values greater than or equal the given value.
  popularity_gte: Int
  slug: String

  # All values that are not equal to given value.
  slug_not: String

  # All values that are contained in given list.
  slug_in: [String!]

  # All values that are not contained in given list.
  slug_not_in: [String!]

  # All values less than the given value.
  slug_lt: String

  # All values less than or equal the given value.
  slug_lte: String

  # All values greater than the given value.
  slug_gt: String

  # All values greater than or equal the given value.
  slug_gte: String

  # All values containing the given string.
  slug_contains: String

  # All values not containing the given string.
  slug_not_contains: String

  # All values starting with the given string.
  slug_starts_with: String

  # All values not starting with the given string.
  slug_not_starts_with: String

  # All values ending with the given string.
  slug_ends_with: String

  # All values not ending with the given string.
  slug_not_ends_with: String
  title: String

  # All values that are not equal to given value.
  title_not: String

  # All values that are contained in given list.
  title_in: [String!]

  # All values that are not contained in given list.
  title_not_in: [String!]

  # All values less than the given value.
  title_lt: String

  # All values less than or equal the given value.
  title_lte: String

  # All values greater than the given value.
  title_gt: String

  # All values greater than or equal the given value.
  title_gte: String

  # All values containing the given string.
  title_contains: String

  # All values not containing the given string.
  title_not_contains: String

  # All values starting with the given string.
  title_starts_with: String

  # All values not starting with the given string.
  title_not_starts_with: String

  # All values ending with the given string.
  title_ends_with: String

  # All values not ending with the given string.
  title_not_ends_with: String
  location: LocationFilter
  pictures_every: PictureFilter
  pictures_some: PictureFilter
  pictures_none: PictureFilter
}

type RestaurantSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Restaurant
  updatedFields: [String!]
  previousValues: RestaurantPreviousValues
}

type Review implements Node {
  accuracy: Int!
  checkIn: Int!
  cleanliness: Int!
  communication: Int!
  createdAt: DateTime!
  experience(filter: ExperienceFilter): Experience
  id: ID!
  location: Int!
  place(filter: PlaceFilter): Place!
  stars: Int!
  text: String!
  value: Int!
}

input ReviewexperienceExperience {
  popularity: Int!
  pricePerPerson: Int!
  title: String!
  categoryId: ID
  category: ExperiencecategoryExperienceCategory
  hostId: ID
  host: ExperiencehostUser
  locationId: ID
  location: ExperiencelocationLocation
  previewId: ID
  preview: ExperiencepreviewPicture
  reviewsIds: [ID!]
  reviews: [ExperiencereviewsReview!]
}

input ReviewFilter {
  # Logical AND on all given filters.
  AND: [ReviewFilter!]

  # Logical OR on all given filters.
  OR: [ReviewFilter!]
  accuracy: Int

  # All values that are not equal to given value.
  accuracy_not: Int

  # All values that are contained in given list.
  accuracy_in: [Int!]

  # All values that are not contained in given list.
  accuracy_not_in: [Int!]

  # All values less than the given value.
  accuracy_lt: Int

  # All values less than or equal the given value.
  accuracy_lte: Int

  # All values greater than the given value.
  accuracy_gt: Int

  # All values greater than or equal the given value.
  accuracy_gte: Int
  checkIn: Int

  # All values that are not equal to given value.
  checkIn_not: Int

  # All values that are contained in given list.
  checkIn_in: [Int!]

  # All values that are not contained in given list.
  checkIn_not_in: [Int!]

  # All values less than the given value.
  checkIn_lt: Int

  # All values less than or equal the given value.
  checkIn_lte: Int

  # All values greater than the given value.
  checkIn_gt: Int

  # All values greater than or equal the given value.
  checkIn_gte: Int
  cleanliness: Int

  # All values that are not equal to given value.
  cleanliness_not: Int

  # All values that are contained in given list.
  cleanliness_in: [Int!]

  # All values that are not contained in given list.
  cleanliness_not_in: [Int!]

  # All values less than the given value.
  cleanliness_lt: Int

  # All values less than or equal the given value.
  cleanliness_lte: Int

  # All values greater than the given value.
  cleanliness_gt: Int

  # All values greater than or equal the given value.
  cleanliness_gte: Int
  communication: Int

  # All values that are not equal to given value.
  communication_not: Int

  # All values that are contained in given list.
  communication_in: [Int!]

  # All values that are not contained in given list.
  communication_not_in: [Int!]

  # All values less than the given value.
  communication_lt: Int

  # All values less than or equal the given value.
  communication_lte: Int

  # All values greater than the given value.
  communication_gt: Int

  # All values greater than or equal the given value.
  communication_gte: Int
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  location: Int

  # All values that are not equal to given value.
  location_not: Int

  # All values that are contained in given list.
  location_in: [Int!]

  # All values that are not contained in given list.
  location_not_in: [Int!]

  # All values less than the given value.
  location_lt: Int

  # All values less than or equal the given value.
  location_lte: Int

  # All values greater than the given value.
  location_gt: Int

  # All values greater than or equal the given value.
  location_gte: Int
  stars: Int

  # All values that are not equal to given value.
  stars_not: Int

  # All values that are contained in given list.
  stars_in: [Int!]

  # All values that are not contained in given list.
  stars_not_in: [Int!]

  # All values less than the given value.
  stars_lt: Int

  # All values less than or equal the given value.
  stars_lte: Int

  # All values greater than the given value.
  stars_gt: Int

  # All values greater than or equal the given value.
  stars_gte: Int
  text: String

  # All values that are not equal to given value.
  text_not: String

  # All values that are contained in given list.
  text_in: [String!]

  # All values that are not contained in given list.
  text_not_in: [String!]

  # All values less than the given value.
  text_lt: String

  # All values less than or equal the given value.
  text_lte: String

  # All values greater than the given value.
  text_gt: String

  # All values greater than or equal the given value.
  text_gte: String

  # All values containing the given string.
  text_contains: String

  # All values not containing the given string.
  text_not_contains: String

  # All values starting with the given string.
  text_starts_with: String

  # All values not starting with the given string.
  text_not_starts_with: String

  # All values ending with the given string.
  text_ends_with: String

  # All values not ending with the given string.
  text_not_ends_with: String
  value: Int

  # All values that are not equal to given value.
  value_not: Int

  # All values that are contained in given list.
  value_in: [Int!]

  # All values that are not contained in given list.
  value_not_in: [Int!]

  # All values less than the given value.
  value_lt: Int

  # All values less than or equal the given value.
  value_lte: Int

  # All values greater than the given value.
  value_gt: Int

  # All values greater than or equal the given value.
  value_gte: Int
  experience: ExperienceFilter
  place: PlaceFilter
}

enum ReviewOrderBy {
  accuracy_ASC
  accuracy_DESC
  checkIn_ASC
  checkIn_DESC
  cleanliness_ASC
  cleanliness_DESC
  communication_ASC
  communication_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  location_ASC
  location_DESC
  stars_ASC
  stars_DESC
  text_ASC
  text_DESC
  value_ASC
  value_DESC
}

input ReviewplacePlace {
  description: String!
  maxGuests: Int!
  name: String
  numBaths: Int!
  numBedrooms: Int!
  numBeds: Int!
  popularity: Int!
  shortDescription: String!
  size: PLACE_SIZES
  slug: String!
  amenitiesId: ID
  amenities: PlaceamenitiesAmenities
  guestRequirementsId: ID
  guestRequirements: PlaceguestRequirementsGuestRequirements
  hostId: ID
  host: PlacehostUser
  houseRulesId: ID
  houseRules: PlacehouseRulesHouseRules
  locationId: ID
  location: PlacelocationLocation
  policiesId: ID
  policies: PlacepoliciesPolicies
  pricingId: ID
  pricing: PlacepricingPricing
  viewsId: ID
  views: PlaceviewsPlaceViews
  bookingsIds: [ID!]
  bookings: [PlacebookingsBooking!]
  picturesIds: [ID!]
  pictures: [PlacepicturesPicture!]
  reviewsIds: [ID!]
  reviews: [PlacereviewsReview!]
}

type ReviewPreviousValues {
  accuracy: Int!
  checkIn: Int!
  cleanliness: Int!
  communication: Int!
  createdAt: DateTime!
  id: ID!
  location: Int!
  stars: Int!
  text: String!
  value: Int!
}

input ReviewSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [ReviewSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [ReviewSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: ReviewSubscriptionFilterNode
}

input ReviewSubscriptionFilterNode {
  accuracy: Int

  # All values that are not equal to given value.
  accuracy_not: Int

  # All values that are contained in given list.
  accuracy_in: [Int!]

  # All values that are not contained in given list.
  accuracy_not_in: [Int!]

  # All values less than the given value.
  accuracy_lt: Int

  # All values less than or equal the given value.
  accuracy_lte: Int

  # All values greater than the given value.
  accuracy_gt: Int

  # All values greater than or equal the given value.
  accuracy_gte: Int
  checkIn: Int

  # All values that are not equal to given value.
  checkIn_not: Int

  # All values that are contained in given list.
  checkIn_in: [Int!]

  # All values that are not contained in given list.
  checkIn_not_in: [Int!]

  # All values less than the given value.
  checkIn_lt: Int

  # All values less than or equal the given value.
  checkIn_lte: Int

  # All values greater than the given value.
  checkIn_gt: Int

  # All values greater than or equal the given value.
  checkIn_gte: Int
  cleanliness: Int

  # All values that are not equal to given value.
  cleanliness_not: Int

  # All values that are contained in given list.
  cleanliness_in: [Int!]

  # All values that are not contained in given list.
  cleanliness_not_in: [Int!]

  # All values less than the given value.
  cleanliness_lt: Int

  # All values less than or equal the given value.
  cleanliness_lte: Int

  # All values greater than the given value.
  cleanliness_gt: Int

  # All values greater than or equal the given value.
  cleanliness_gte: Int
  communication: Int

  # All values that are not equal to given value.
  communication_not: Int

  # All values that are contained in given list.
  communication_in: [Int!]

  # All values that are not contained in given list.
  communication_not_in: [Int!]

  # All values less than the given value.
  communication_lt: Int

  # All values less than or equal the given value.
  communication_lte: Int

  # All values greater than the given value.
  communication_gt: Int

  # All values greater than or equal the given value.
  communication_gte: Int
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  location: Int

  # All values that are not equal to given value.
  location_not: Int

  # All values that are contained in given list.
  location_in: [Int!]

  # All values that are not contained in given list.
  location_not_in: [Int!]

  # All values less than the given value.
  location_lt: Int

  # All values less than or equal the given value.
  location_lte: Int

  # All values greater than the given value.
  location_gt: Int

  # All values greater than or equal the given value.
  location_gte: Int
  stars: Int

  # All values that are not equal to given value.
  stars_not: Int

  # All values that are contained in given list.
  stars_in: [Int!]

  # All values that are not contained in given list.
  stars_not_in: [Int!]

  # All values less than the given value.
  stars_lt: Int

  # All values less than or equal the given value.
  stars_lte: Int

  # All values greater than the given value.
  stars_gt: Int

  # All values greater than or equal the given value.
  stars_gte: Int
  text: String

  # All values that are not equal to given value.
  text_not: String

  # All values that are contained in given list.
  text_in: [String!]

  # All values that are not contained in given list.
  text_not_in: [String!]

  # All values less than the given value.
  text_lt: String

  # All values less than or equal the given value.
  text_lte: String

  # All values greater than the given value.
  text_gt: String

  # All values greater than or equal the given value.
  text_gte: String

  # All values containing the given string.
  text_contains: String

  # All values not containing the given string.
  text_not_contains: String

  # All values starting with the given string.
  text_starts_with: String

  # All values not starting with the given string.
  text_not_starts_with: String

  # All values ending with the given string.
  text_ends_with: String

  # All values not ending with the given string.
  text_not_ends_with: String
  value: Int

  # All values that are not equal to given value.
  value_not: Int

  # All values that are contained in given list.
  value_in: [Int!]

  # All values that are not contained in given list.
  value_not_in: [Int!]

  # All values less than the given value.
  value_lt: Int

  # All values less than or equal the given value.
  value_lte: Int

  # All values greater than the given value.
  value_gt: Int

  # All values greater than or equal the given value.
  value_gte: Int
  experience: ExperienceFilter
  place: PlaceFilter
}

type ReviewSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Review
  updatedFields: [String!]
  previousValues: ReviewPreviousValues
}

type SetBookingPaymentPayload {
  bookingBooking: Booking
  paymentPayment: Payment
}

type SetCreditCardInformationPayload {
  paymentAccountPaymentAccount: PaymentAccount
  creditcardCreditCardInformation: CreditCardInformation
}

type SetExperienceCategoryPayload {
  experienceExperience: Experience
  categoryExperienceCategory: ExperienceCategory
}

type SetExperienceLocationPayload {
  locationLocation: Location
  experienceExperience: Experience
}

type SetExperiencePreviewPayload {
  previewPicture: Picture
  experienceExperience: Experience
}

type SetGuestRequirementsPayload {
  placePlace: Place
  guestRequirementsGuestRequirements: GuestRequirements
}

type SetHomePreviewPayload {
  neighbourHoodNeighbourhood: Neighbourhood
  homePreviewPicture: Picture
}

type SetHouseRulesPayload {
  placePlace: Place
  houseRulesHouseRules: HouseRules
}

type SetPaypalInformationPayload {
  paymentAccountPaymentAccount: PaymentAccount
  paypalPaypalInformation: PaypalInformation
}

type SetPlaceAmenitiesPayload {
  placePlace: Place
  amenitiesAmenities: Amenities
}

type SetPlaceLocationPayload {
  placePlace: Place
  locationLocation: Location
}

type SetPlacePricePayload {
  placePlace: Place
  pricingPricing: Pricing
}

type SetPlaceViewsPayload {
  placePlace: Place
  viewsPlaceViews: PlaceViews
}

type SetPoliciesPayload {
  placePlace: Place
  policiesPolicies: Policies
}

type SetProfilePicturePayload {
  userUser: User
  profilePicturePicture: Picture
}

type SetRestaurantLocationPayload {
  locationLocation: Location
  restaurantRestaurant: Restaurant
}

type SetUserLocationPayload {
  userUser: User
  locationLocation: Location
}

type Subscription {
  Amenities(filter: AmenitiesSubscriptionFilter): AmenitiesSubscriptionPayload
  Booking(filter: BookingSubscriptionFilter): BookingSubscriptionPayload
  City(filter: CitySubscriptionFilter): CitySubscriptionPayload
  CreditCardInformation(filter: CreditCardInformationSubscriptionFilter): CreditCardInformationSubscriptionPayload
  Experience(filter: ExperienceSubscriptionFilter): ExperienceSubscriptionPayload
  ExperienceCategory(filter: ExperienceCategorySubscriptionFilter): ExperienceCategorySubscriptionPayload
  GuestRequirements(filter: GuestRequirementsSubscriptionFilter): GuestRequirementsSubscriptionPayload
  HouseRules(filter: HouseRulesSubscriptionFilter): HouseRulesSubscriptionPayload
  Location(filter: LocationSubscriptionFilter): LocationSubscriptionPayload
  Message(filter: MessageSubscriptionFilter): MessageSubscriptionPayload
  Neighbourhood(filter: NeighbourhoodSubscriptionFilter): NeighbourhoodSubscriptionPayload
  Notification(filter: NotificationSubscriptionFilter): NotificationSubscriptionPayload
  Payment(filter: PaymentSubscriptionFilter): PaymentSubscriptionPayload
  PaymentAccount(filter: PaymentAccountSubscriptionFilter): PaymentAccountSubscriptionPayload
  PaypalInformation(filter: PaypalInformationSubscriptionFilter): PaypalInformationSubscriptionPayload
  Picture(filter: PictureSubscriptionFilter): PictureSubscriptionPayload
  Place(filter: PlaceSubscriptionFilter): PlaceSubscriptionPayload
  PlaceViews(filter: PlaceViewsSubscriptionFilter): PlaceViewsSubscriptionPayload
  Policies(filter: PoliciesSubscriptionFilter): PoliciesSubscriptionPayload
  Pricing(filter: PricingSubscriptionFilter): PricingSubscriptionPayload
  Restaurant(filter: RestaurantSubscriptionFilter): RestaurantSubscriptionPayload
  Review(filter: ReviewSubscriptionFilter): ReviewSubscriptionPayload
  User(filter: UserSubscriptionFilter): UserSubscriptionPayload
}

type UnsetCreditCardInformationPayload {
  paymentAccountPaymentAccount: PaymentAccount
  creditcardCreditCardInformation: CreditCardInformation
}

type UnsetExperienceCategoryPayload {
  experienceExperience: Experience
  categoryExperienceCategory: ExperienceCategory
}

type UnsetHomePreviewPayload {
  neighbourHoodNeighbourhood: Neighbourhood
  homePreviewPicture: Picture
}

type UnsetProfilePicturePayload {
  userUser: User
  profilePicturePicture: Picture
}

type UnsetUserLocationPayload {
  userUser: User
  locationLocation: Location
}

input UpdateAmenities {
  airConditioning: Boolean
  babyBath: Boolean
  babyMonitor: Boolean
  babysitterRecommendations: Boolean
  bathtub: Boolean
  breakfast: Boolean
  buzzerWirelessIntercom: Boolean
  cableTv: Boolean
  changingTable: Boolean
  childrensBooksAndToys: Boolean
  childrensDinnerware: Boolean
  crib: Boolean
  doorman: Boolean
  dryer: Boolean
  elevator: Boolean
  essentials: Boolean
  familyKidFriendly: Boolean
  freeParkingOnPremises: Boolean
  freeParkingOnStreet: Boolean
  gym: Boolean
  hairDryer: Boolean
  hangers: Boolean
  heating: Boolean
  hotTub: Boolean
  id: ID!
  indoorFireplace: Boolean
  internet: Boolean
  iron: Boolean
  kitchen: Boolean
  laptopFriendlyWorkspace: Boolean
  paidParkingOffPremises: Boolean
  petsAllowed: Boolean
  pool: Boolean
  privateEntrance: Boolean
  shampoo: Boolean
  smokingAllowed: Boolean
  suitableForEvents: Boolean
  tv: Boolean
  washer: Boolean
  wheelchairAccessible: Boolean
  wirelessInternet: Boolean
  placeId: ID
  place: AmenitiesplacePlace
}

input UpdateBooking {
  endDate: DateTime
  id: ID!
  startDate: DateTime
  bookeeId: ID
  bookee: BookingbookeeUser
  paymentId: ID
  payment: BookingpaymentPayment
  placeId: ID
  place: BookingplacePlace
}

input UpdateCity {
  id: ID!
  name: String
  neighbourhoodsIds: [ID!]
  neighbourhoods: [CityneighbourhoodsNeighbourhood!]
}

input UpdateCreditCardInformation {
  cardNumber: String
  country: String
  expiresOnMonth: Int
  expiresOnYear: Int
  firstName: String
  id: ID!
  lastName: String
  postalCode: String
  securityCode: String
  paymentAccountId: ID
  paymentAccount: CreditCardInformationpaymentAccountPaymentAccount
}

input UpdateExperience {
  id: ID!
  popularity: Int
  pricePerPerson: Int
  title: String
  categoryId: ID
  category: ExperiencecategoryExperienceCategory
  hostId: ID
  host: ExperiencehostUser
  locationId: ID
  location: ExperiencelocationLocation
  previewId: ID
  preview: ExperiencepreviewPicture
  reviewsIds: [ID!]
  reviews: [ExperiencereviewsReview!]
}

input UpdateExperienceCategory {
  id: ID!
  mainColor: String
  name: String
  experienceId: ID
  experience: ExperienceCategoryexperienceExperience
}

input UpdateGuestRequirements {
  govIssuedId: Boolean
  guestTripInformation: Boolean
  id: ID!
  recommendationsFromOtherHosts: Boolean
  placeId: ID
  place: GuestRequirementsplacePlace
}

input UpdateHouseRules {
  additionalRules: String
  id: ID!
  partiesAndEventsAllowed: Boolean
  petsAllowed: Boolean
  smokingAllowed: Boolean
  suitableForChildren: Boolean
  suitableForInfants: Boolean
  placeId: ID
  place: HouseRulesplacePlace
}

input UpdateLocation {
  address: String
  directions: String
  id: ID!
  lat: Float
  lng: Float
  experienceId: ID
  experience: LocationexperienceExperience
  neighbourHoodId: ID
  neighbourHood: LocationneighbourHoodNeighbourhood
  placeId: ID
  place: LocationplacePlace
  restaurantId: ID
  restaurant: LocationrestaurantRestaurant
  userId: ID
  user: LocationuserUser
}

input UpdateMessage {
  deliveredAt: DateTime
  id: ID!
  readAt: DateTime
  fromId: ID
  from: MessagefromUser
  toId: ID
  to: MessagetoUser
}

input UpdateNeighbourhood {
  featured: Boolean
  id: ID!
  name: String
  popularity: Int
  slug: String
  cityId: ID
  city: NeighbourhoodcityCity
  homePreviewId: ID
  homePreview: NeighbourhoodhomePreviewPicture
  locationsIds: [ID!]
  locations: [NeighbourhoodlocationsLocation!]
}

input UpdateNotification {
  id: ID!
  link: String
  readDate: DateTime
  type: NOTIFICATION_TYPE
  userId: ID
  user: NotificationuserUser
}

input UpdatePayment {
  id: ID!
  placePrice: Float
  serviceFee: Float
  totalPrice: Float
  bookingId: ID
  booking: PaymentbookingBooking
  paymentMethodId: ID
  paymentMethod: PaymentpaymentMethodPaymentAccount
}

input UpdatePaymentAccount {
  id: ID!
  type: PAYMENT_PROVIDER
  creditcardId: ID
  creditcard: PaymentAccountcreditcardCreditCardInformation
  paypalId: ID
  paypal: PaymentAccountpaypalPaypalInformation
  userId: ID
  user: PaymentAccountuserUser
  paymentsIds: [ID!]
  payments: [PaymentAccountpaymentsPayment!]
}

input UpdatePaypalInformation {
  email: String
  id: ID!
  paymentAccountId: ID
  paymentAccount: PaypalInformationpaymentAccountPaymentAccount
}

input UpdatePicture {
  id: ID!
  url: String
  experienceId: ID
  experience: PictureexperienceExperience
  neighbourHoodId: ID
  neighbourHood: PictureneighbourHoodNeighbourhood
  placeId: ID
  place: PictureplacePlace
  reservationId: ID
  reservation: PicturereservationRestaurant
  userId: ID
  user: PictureuserUser
}

input UpdatePlace {
  description: String
  id: ID!
  maxGuests: Int
  name: String
  numBaths: Int
  numBedrooms: Int
  numBeds: Int
  popularity: Int
  shortDescription: String
  size: PLACE_SIZES
  slug: String
  amenitiesId: ID
  amenities: PlaceamenitiesAmenities
  guestRequirementsId: ID
  guestRequirements: PlaceguestRequirementsGuestRequirements
  hostId: ID
  host: PlacehostUser
  houseRulesId: ID
  houseRules: PlacehouseRulesHouseRules
  locationId: ID
  location: PlacelocationLocation
  policiesId: ID
  policies: PlacepoliciesPolicies
  pricingId: ID
  pricing: PlacepricingPricing
  viewsId: ID
  views: PlaceviewsPlaceViews
  bookingsIds: [ID!]
  bookings: [PlacebookingsBooking!]
  picturesIds: [ID!]
  pictures: [PlacepicturesPicture!]
  reviewsIds: [ID!]
  reviews: [PlacereviewsReview!]
}

input UpdatePlaceViews {
  id: ID!
  lastWeek: Int
  placeId: ID
  place: PlaceViewsplacePlace
}

input UpdatePolicies {
  checkInEndTime: Float
  checkInStartTime: Float
  checkoutTime: Float
  id: ID!
  placeId: ID
  place: PoliciesplacePlace
}

input UpdatePricing {
  averageMonthly: Int
  averageWeekly: Int
  basePrice: Int
  cleaningFee: Int
  currency: CURRENCY
  extraGuests: Int
  id: ID!
  monthlyDiscount: Int
  perNight: Int
  securityDeposit: Int
  smartPricing: Boolean
  weekendPricing: Int
  weeklyDiscount: Int
  placeId: ID
  place: PricingplacePlace
}

input UpdateRestaurant {
  avgPricePerPerson: Int
  id: ID!
  isCurated: Boolean
  popularity: Int
  slug: String
  title: String
  locationId: ID
  location: RestaurantlocationLocation
  picturesIds: [ID!]
  pictures: [RestaurantpicturesPicture!]
}

input UpdateReview {
  accuracy: Int
  checkIn: Int
  cleanliness: Int
  communication: Int
  id: ID!
  location: Int
  stars: Int
  text: String
  value: Int
  experienceId: ID
  experience: ReviewexperienceExperience
  placeId: ID
  place: ReviewplacePlace
}

input UpdateUser {
  email: String
  firstName: String
  id: ID!
  isSuperHost: Boolean
  lastName: String
  password: String
  phone: String
  responseRate: Float
  responseTime: Int
  locationId: ID
  location: UserlocationLocation
  profilePictureId: ID
  profilePicture: UserprofilePicturePicture
  bookingsIds: [ID!]
  bookings: [UserbookingsBooking!]
  hostingExperiencesIds: [ID!]
  hostingExperiences: [UserhostingExperiencesExperience!]
  notificationsIds: [ID!]
  notifications: [UsernotificationsNotification!]
  ownedPlacesIds: [ID!]
  ownedPlaces: [UserownedPlacesPlace!]
  paymentAccountIds: [ID!]
  paymentAccount: [UserpaymentAccountPaymentAccount!]
  receivedMessagesIds: [ID!]
  receivedMessages: [UserreceivedMessagesMessage!]
  sentMessagesIds: [ID!]
  sentMessages: [UsersentMessagesMessage!]
}

type User implements Node {
  bookings(
    filter: BookingFilter
    orderBy: BookingOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Booking!]
  createdAt: DateTime!
  email: String!
  firstName: String!
  hostingExperiences(
    filter: ExperienceFilter
    orderBy: ExperienceOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Experience!]
  id: ID!
  isSuperHost: Boolean!
  lastName: String!
  location(filter: LocationFilter): Location
  notifications(
    filter: NotificationFilter
    orderBy: NotificationOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Notification!]
  ownedPlaces(
    filter: PlaceFilter
    orderBy: PlaceOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Place!]
  password: String!
  paymentAccount(
    filter: PaymentAccountFilter
    orderBy: PaymentAccountOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PaymentAccount!]
  phone: String!
  profilePicture(filter: PictureFilter): Picture
  receivedMessages(
    filter: MessageFilter
    orderBy: MessageOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Message!]
  responseRate: Float
  responseTime: Int
  sentMessages(
    filter: MessageFilter
    orderBy: MessageOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Message!]
  updatedAt: DateTime!

  # Meta information about the query.
  _bookingsMeta(
    filter: BookingFilter
    orderBy: BookingOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!

  # Meta information about the query.
  _hostingExperiencesMeta(
    filter: ExperienceFilter
    orderBy: ExperienceOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!

  # Meta information about the query.
  _notificationsMeta(
    filter: NotificationFilter
    orderBy: NotificationOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!

  # Meta information about the query.
  _ownedPlacesMeta(
    filter: PlaceFilter
    orderBy: PlaceOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!

  # Meta information about the query.
  _paymentAccountMeta(
    filter: PaymentAccountFilter
    orderBy: PaymentAccountOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!

  # Meta information about the query.
  _receivedMessagesMeta(
    filter: MessageFilter
    orderBy: MessageOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!

  # Meta information about the query.
  _sentMessagesMeta(
    filter: MessageFilter
    orderBy: MessageOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!
}

input UserbookingsBooking {
  endDate: DateTime!
  startDate: DateTime!
  paymentId: ID
  payment: BookingpaymentPayment
  placeId: ID
  place: BookingplacePlace
}

input UserFilter {
  # Logical AND on all given filters.
  AND: [UserFilter!]

  # Logical OR on all given filters.
  OR: [UserFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  email: String

  # All values that are not equal to given value.
  email_not: String

  # All values that are contained in given list.
  email_in: [String!]

  # All values that are not contained in given list.
  email_not_in: [String!]

  # All values less than the given value.
  email_lt: String

  # All values less than or equal the given value.
  email_lte: String

  # All values greater than the given value.
  email_gt: String

  # All values greater than or equal the given value.
  email_gte: String

  # All values containing the given string.
  email_contains: String

  # All values not containing the given string.
  email_not_contains: String

  # All values starting with the given string.
  email_starts_with: String

  # All values not starting with the given string.
  email_not_starts_with: String

  # All values ending with the given string.
  email_ends_with: String

  # All values not ending with the given string.
  email_not_ends_with: String
  firstName: String

  # All values that are not equal to given value.
  firstName_not: String

  # All values that are contained in given list.
  firstName_in: [String!]

  # All values that are not contained in given list.
  firstName_not_in: [String!]

  # All values less than the given value.
  firstName_lt: String

  # All values less than or equal the given value.
  firstName_lte: String

  # All values greater than the given value.
  firstName_gt: String

  # All values greater than or equal the given value.
  firstName_gte: String

  # All values containing the given string.
  firstName_contains: String

  # All values not containing the given string.
  firstName_not_contains: String

  # All values starting with the given string.
  firstName_starts_with: String

  # All values not starting with the given string.
  firstName_not_starts_with: String

  # All values ending with the given string.
  firstName_ends_with: String

  # All values not ending with the given string.
  firstName_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  isSuperHost: Boolean

  # All values that are not equal to given value.
  isSuperHost_not: Boolean
  lastName: String

  # All values that are not equal to given value.
  lastName_not: String

  # All values that are contained in given list.
  lastName_in: [String!]

  # All values that are not contained in given list.
  lastName_not_in: [String!]

  # All values less than the given value.
  lastName_lt: String

  # All values less than or equal the given value.
  lastName_lte: String

  # All values greater than the given value.
  lastName_gt: String

  # All values greater than or equal the given value.
  lastName_gte: String

  # All values containing the given string.
  lastName_contains: String

  # All values not containing the given string.
  lastName_not_contains: String

  # All values starting with the given string.
  lastName_starts_with: String

  # All values not starting with the given string.
  lastName_not_starts_with: String

  # All values ending with the given string.
  lastName_ends_with: String

  # All values not ending with the given string.
  lastName_not_ends_with: String
  password: String

  # All values that are not equal to given value.
  password_not: String

  # All values that are contained in given list.
  password_in: [String!]

  # All values that are not contained in given list.
  password_not_in: [String!]

  # All values less than the given value.
  password_lt: String

  # All values less than or equal the given value.
  password_lte: String

  # All values greater than the given value.
  password_gt: String

  # All values greater than or equal the given value.
  password_gte: String

  # All values containing the given string.
  password_contains: String

  # All values not containing the given string.
  password_not_contains: String

  # All values starting with the given string.
  password_starts_with: String

  # All values not starting with the given string.
  password_not_starts_with: String

  # All values ending with the given string.
  password_ends_with: String

  # All values not ending with the given string.
  password_not_ends_with: String
  phone: String

  # All values that are not equal to given value.
  phone_not: String

  # All values that are contained in given list.
  phone_in: [String!]

  # All values that are not contained in given list.
  phone_not_in: [String!]

  # All values less than the given value.
  phone_lt: String

  # All values less than or equal the given value.
  phone_lte: String

  # All values greater than the given value.
  phone_gt: String

  # All values greater than or equal the given value.
  phone_gte: String

  # All values containing the given string.
  phone_contains: String

  # All values not containing the given string.
  phone_not_contains: String

  # All values starting with the given string.
  phone_starts_with: String

  # All values not starting with the given string.
  phone_not_starts_with: String

  # All values ending with the given string.
  phone_ends_with: String

  # All values not ending with the given string.
  phone_not_ends_with: String
  responseRate: Float

  # All values that are not equal to given value.
  responseRate_not: Float

  # All values that are contained in given list.
  responseRate_in: [Float!]

  # All values that are not contained in given list.
  responseRate_not_in: [Float!]

  # All values less than the given value.
  responseRate_lt: Float

  # All values less than or equal the given value.
  responseRate_lte: Float

  # All values greater than the given value.
  responseRate_gt: Float

  # All values greater than or equal the given value.
  responseRate_gte: Float
  responseTime: Int

  # All values that are not equal to given value.
  responseTime_not: Int

  # All values that are contained in given list.
  responseTime_in: [Int!]

  # All values that are not contained in given list.
  responseTime_not_in: [Int!]

  # All values less than the given value.
  responseTime_lt: Int

  # All values less than or equal the given value.
  responseTime_lte: Int

  # All values greater than the given value.
  responseTime_gt: Int

  # All values greater than or equal the given value.
  responseTime_gte: Int
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  bookings_every: BookingFilter
  bookings_some: BookingFilter
  bookings_none: BookingFilter
  hostingExperiences_every: ExperienceFilter
  hostingExperiences_some: ExperienceFilter
  hostingExperiences_none: ExperienceFilter
  location: LocationFilter
  notifications_every: NotificationFilter
  notifications_some: NotificationFilter
  notifications_none: NotificationFilter
  ownedPlaces_every: PlaceFilter
  ownedPlaces_some: PlaceFilter
  ownedPlaces_none: PlaceFilter
  paymentAccount_every: PaymentAccountFilter
  paymentAccount_some: PaymentAccountFilter
  paymentAccount_none: PaymentAccountFilter
  profilePicture: PictureFilter
  receivedMessages_every: MessageFilter
  receivedMessages_some: MessageFilter
  receivedMessages_none: MessageFilter
  sentMessages_every: MessageFilter
  sentMessages_some: MessageFilter
  sentMessages_none: MessageFilter
}

input UserhostingExperiencesExperience {
  popularity: Int!
  pricePerPerson: Int!
  title: String!
  categoryId: ID
  category: ExperiencecategoryExperienceCategory
  locationId: ID
  location: ExperiencelocationLocation
  previewId: ID
  preview: ExperiencepreviewPicture
  reviewsIds: [ID!]
  reviews: [ExperiencereviewsReview!]
}

input UserlocationLocation {
  address: String
  directions: String
  lat: Float!
  lng: Float!
  experienceId: ID
  experience: LocationexperienceExperience
  neighbourHoodId: ID
  neighbourHood: LocationneighbourHoodNeighbourhood
  placeId: ID
  place: LocationplacePlace
  restaurantId: ID
  restaurant: LocationrestaurantRestaurant
}

input UsernotificationsNotification {
  link: String!
  readDate: DateTime!
  type: NOTIFICATION_TYPE
}

enum UserOrderBy {
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  firstName_ASC
  firstName_DESC
  id_ASC
  id_DESC
  isSuperHost_ASC
  isSuperHost_DESC
  lastName_ASC
  lastName_DESC
  password_ASC
  password_DESC
  phone_ASC
  phone_DESC
  responseRate_ASC
  responseRate_DESC
  responseTime_ASC
  responseTime_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UserownedPlacesPlace {
  description: String!
  maxGuests: Int!
  name: String
  numBaths: Int!
  numBedrooms: Int!
  numBeds: Int!
  popularity: Int!
  shortDescription: String!
  size: PLACE_SIZES
  slug: String!
  amenitiesId: ID
  amenities: PlaceamenitiesAmenities
  guestRequirementsId: ID
  guestRequirements: PlaceguestRequirementsGuestRequirements
  houseRulesId: ID
  houseRules: PlacehouseRulesHouseRules
  locationId: ID
  location: PlacelocationLocation
  policiesId: ID
  policies: PlacepoliciesPolicies
  pricingId: ID
  pricing: PlacepricingPricing
  viewsId: ID
  views: PlaceviewsPlaceViews
  bookingsIds: [ID!]
  bookings: [PlacebookingsBooking!]
  picturesIds: [ID!]
  pictures: [PlacepicturesPicture!]
  reviewsIds: [ID!]
  reviews: [PlacereviewsReview!]
}

input UserpaymentAccountPaymentAccount {
  type: PAYMENT_PROVIDER
  creditcardId: ID
  creditcard: PaymentAccountcreditcardCreditCardInformation
  paypalId: ID
  paypal: PaymentAccountpaypalPaypalInformation
  paymentsIds: [ID!]
  payments: [PaymentAccountpaymentsPayment!]
}

type UserPreviousValues {
  createdAt: DateTime!
  email: String!
  firstName: String!
  id: ID!
  isSuperHost: Boolean!
  lastName: String!
  password: String!
  phone: String!
  responseRate: Float
  responseTime: Int
  updatedAt: DateTime!
}

input UserprofilePicturePicture {
  url: String!
  experienceId: ID
  experience: PictureexperienceExperience
  neighbourHoodId: ID
  neighbourHood: PictureneighbourHoodNeighbourhood
  placeId: ID
  place: PictureplacePlace
  reservationId: ID
  reservation: PicturereservationRestaurant
}

input UserreceivedMessagesMessage {
  deliveredAt: DateTime!
  readAt: DateTime!
  fromId: ID
  from: MessagefromUser
}

input UsersentMessagesMessage {
  deliveredAt: DateTime!
  readAt: DateTime!
  toId: ID
  to: MessagetoUser
}

input UserSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [UserSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [UserSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: UserSubscriptionFilterNode
}

input UserSubscriptionFilterNode {
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  email: String

  # All values that are not equal to given value.
  email_not: String

  # All values that are contained in given list.
  email_in: [String!]

  # All values that are not contained in given list.
  email_not_in: [String!]

  # All values less than the given value.
  email_lt: String

  # All values less than or equal the given value.
  email_lte: String

  # All values greater than the given value.
  email_gt: String

  # All values greater than or equal the given value.
  email_gte: String

  # All values containing the given string.
  email_contains: String

  # All values not containing the given string.
  email_not_contains: String

  # All values starting with the given string.
  email_starts_with: String

  # All values not starting with the given string.
  email_not_starts_with: String

  # All values ending with the given string.
  email_ends_with: String

  # All values not ending with the given string.
  email_not_ends_with: String
  firstName: String

  # All values that are not equal to given value.
  firstName_not: String

  # All values that are contained in given list.
  firstName_in: [String!]

  # All values that are not contained in given list.
  firstName_not_in: [String!]

  # All values less than the given value.
  firstName_lt: String

  # All values less than or equal the given value.
  firstName_lte: String

  # All values greater than the given value.
  firstName_gt: String

  # All values greater than or equal the given value.
  firstName_gte: String

  # All values containing the given string.
  firstName_contains: String

  # All values not containing the given string.
  firstName_not_contains: String

  # All values starting with the given string.
  firstName_starts_with: String

  # All values not starting with the given string.
  firstName_not_starts_with: String

  # All values ending with the given string.
  firstName_ends_with: String

  # All values not ending with the given string.
  firstName_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  isSuperHost: Boolean

  # All values that are not equal to given value.
  isSuperHost_not: Boolean
  lastName: String

  # All values that are not equal to given value.
  lastName_not: String

  # All values that are contained in given list.
  lastName_in: [String!]

  # All values that are not contained in given list.
  lastName_not_in: [String!]

  # All values less than the given value.
  lastName_lt: String

  # All values less than or equal the given value.
  lastName_lte: String

  # All values greater than the given value.
  lastName_gt: String

  # All values greater than or equal the given value.
  lastName_gte: String

  # All values containing the given string.
  lastName_contains: String

  # All values not containing the given string.
  lastName_not_contains: String

  # All values starting with the given string.
  lastName_starts_with: String

  # All values not starting with the given string.
  lastName_not_starts_with: String

  # All values ending with the given string.
  lastName_ends_with: String

  # All values not ending with the given string.
  lastName_not_ends_with: String
  password: String

  # All values that are not equal to given value.
  password_not: String

  # All values that are contained in given list.
  password_in: [String!]

  # All values that are not contained in given list.
  password_not_in: [String!]

  # All values less than the given value.
  password_lt: String

  # All values less than or equal the given value.
  password_lte: String

  # All values greater than the given value.
  password_gt: String

  # All values greater than or equal the given value.
  password_gte: String

  # All values containing the given string.
  password_contains: String

  # All values not containing the given string.
  password_not_contains: String

  # All values starting with the given string.
  password_starts_with: String

  # All values not starting with the given string.
  password_not_starts_with: String

  # All values ending with the given string.
  password_ends_with: String

  # All values not ending with the given string.
  password_not_ends_with: String
  phone: String

  # All values that are not equal to given value.
  phone_not: String

  # All values that are contained in given list.
  phone_in: [String!]

  # All values that are not contained in given list.
  phone_not_in: [String!]

  # All values less than the given value.
  phone_lt: String

  # All values less than or equal the given value.
  phone_lte: String

  # All values greater than the given value.
  phone_gt: String

  # All values greater than or equal the given value.
  phone_gte: String

  # All values containing the given string.
  phone_contains: String

  # All values not containing the given string.
  phone_not_contains: String

  # All values starting with the given string.
  phone_starts_with: String

  # All values not starting with the given string.
  phone_not_starts_with: String

  # All values ending with the given string.
  phone_ends_with: String

  # All values not ending with the given string.
  phone_not_ends_with: String
  responseRate: Float

  # All values that are not equal to given value.
  responseRate_not: Float

  # All values that are contained in given list.
  responseRate_in: [Float!]

  # All values that are not contained in given list.
  responseRate_not_in: [Float!]

  # All values less than the given value.
  responseRate_lt: Float

  # All values less than or equal the given value.
  responseRate_lte: Float

  # All values greater than the given value.
  responseRate_gt: Float

  # All values greater than or equal the given value.
  responseRate_gte: Float
  responseTime: Int

  # All values that are not equal to given value.
  responseTime_not: Int

  # All values that are contained in given list.
  responseTime_in: [Int!]

  # All values that are not contained in given list.
  responseTime_not_in: [Int!]

  # All values less than the given value.
  responseTime_lt: Int

  # All values less than or equal the given value.
  responseTime_lte: Int

  # All values greater than the given value.
  responseTime_gt: Int

  # All values greater than or equal the given value.
  responseTime_gte: Int
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  bookings_every: BookingFilter
  bookings_some: BookingFilter
  bookings_none: BookingFilter
  hostingExperiences_every: ExperienceFilter
  hostingExperiences_some: ExperienceFilter
  hostingExperiences_none: ExperienceFilter
  location: LocationFilter
  notifications_every: NotificationFilter
  notifications_some: NotificationFilter
  notifications_none: NotificationFilter
  ownedPlaces_every: PlaceFilter
  ownedPlaces_some: PlaceFilter
  ownedPlaces_none: PlaceFilter
  paymentAccount_every: PaymentAccountFilter
  paymentAccount_some: PaymentAccountFilter
  paymentAccount_none: PaymentAccountFilter
  profilePicture: PictureFilter
  receivedMessages_every: MessageFilter
  receivedMessages_some: MessageFilter
  receivedMessages_none: MessageFilter
  sentMessages_every: MessageFilter
  sentMessages_some: MessageFilter
  sentMessages_none: MessageFilter
}

type UserSubscriptionPayload {
  mutation: _ModelMutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}
