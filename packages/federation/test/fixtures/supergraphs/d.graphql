schema
  @core(feature: "https://specs.apollo.dev/core/v0.2")
  @core(feature: "https://specs.apollo.dev/join/v0.1", for: EXECUTION)
  @core(feature: "https://specs.apollo.dev/tag/v0.1") {
  query: Query
  mutation: Mutation
}

directive @core(as: String, feature: String!, for: core__Purpose) repeatable on SCHEMA

directive @join__field(
  graph: join__Graph
  provides: join__FieldSet
  requires: join__FieldSet
) on FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__owner(graph: join__Graph!) on INTERFACE | OBJECT

directive @join__type(graph: join__Graph!, key: join__FieldSet) repeatable on INTERFACE | OBJECT

directive @tag(name: String!) repeatable on FIELD_DEFINITION | INTERFACE | OBJECT | UNION

type Mutation {
  setNumber: Int @join__field(graph: PB_BACKEND)
}

type Query {
  getAuthor: ReactionAuthor @join__field(graph: PB_BACKEND)
  node(id: ID!): Node @join__field(graph: NODERESOLVER)
}

scalar Url @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc1738")

interface Node {
  id: ID!
}

enum NotifiableEntityType {
  ITEM
}

interface AppNotification {
  entityType: NotifiableEntityType
}

type OwnerChangedNotification implements AppNotification {
  entityType: NotifiableEntityType
}

type ReactionAuthor implements Node
  @join__owner(graph: PB_BACKEND)
  @join__type(graph: PB_BACKEND, key: "id") {
  id: ID! @join__field(graph: PB_BACKEND)
  avatarUrl: Url! @join__field(graph: PB_BACKEND)
  displayName: String! @join__field(graph: PB_BACKEND)
}

type Handle implements Node
  @join__owner(graph: PB_BACKEND)
  @join__type(graph: PB_BACKEND, key: "id") {
  id: ID! @join__field(graph: PB_BACKEND)
  mentionable: Mentionable @join__field(graph: PB_BACKEND)
}

type Member implements Node
  @join__owner(graph: PB_BACKEND)
  @join__type(graph: PB_BACKEND, key: "id")
  @join__type(graph: PB_SERVICE_B, key: "id") {
  id: ID! @join__field(graph: PB_BACKEND)
  email: String! @join__field(graph: PB_BACKEND)
}

union Mentionable = ReactionAuthor | OwnerChangedNotification

interface Board {
  id: ID!
  isVisible: Boolean!
}

interface SomeBoard {
  # introducing this interface and field causes:
  # Mesh - Supergraph ðŸ’¥ Failed to generate the schema Error: Unknown type: "SomeEntity".
  someEntity: SomeEntity
}

type SomeEntity implements Node
  @join__owner(graph: PB_SERVICE_B)
  @join__type(graph: PB_SERVICE_B, key: "id") {
  id: ID! @join__field(graph: PB_SERVICE_B)
}

type ConcreteBoard implements Board & Node & SomeBoard
  @join__owner(graph: PB_SERVICE_B)
  @join__type(graph: PB_SERVICE_B, key: "id")
  @join__type(graph: PB_BACKEND, key: "id") {
  id: ID! @join__field(graph: PB_SERVICE_B)
  isVisible: Boolean! @join__field(graph: PB_SERVICE_B)
  someEntity: SomeEntity @join__field(graph: PB_SERVICE_B)
}

enum core__Purpose {
  """
  `EXECUTION` features provide metadata necessary to for operation execution.
  """
  EXECUTION
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY
}

scalar join__FieldSet

enum join__Graph {
  NODERESOLVER
    @join__graph(name: "noderesolver", url: "http://graphql-node-resolver.graphql/graphql")
  PB_BACKEND @join__graph(name: "pb-backend", url: "http://pb-backend-web.default/internal/graphql")
  PB_SERVICE_B @join__graph(name: "pb-service-b", url: "http://pb-service-b.default/graphql")
}
