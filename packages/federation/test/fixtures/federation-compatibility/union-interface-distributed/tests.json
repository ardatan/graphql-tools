[
  {
    "query": "\n      query {\n        products {\n          ... on Node {\n            id\n          }\n        }\n      }\n    ",
    "expected": {
      "data": {
        "products": [
          {
            "id": "oven1"
          },
          {
            "id": "oven2"
          },
          {
            "id": "toaster1"
          },
          {
            "id": "toaster2"
          }
        ]
      }
    },
    "plan": "\n    QueryPlan {\n      Fetch(service: \"a\") {\n        {\n          products {\n            __typename\n            # NOTE\n            # not sure to be honest why it converts ...Node to ...Over and ...Toaster\n            ... on Oven {\n              id\n            }\n            ... on Toaster {\n              id\n            }\n          }\n        }\n      },\n    }\n    "
  },
  {
    "query": "\n      query {\n        nodes {\n          ... on Toaster {\n            warranty\n          }\n          ... on Oven {\n            id\n          }\n        }\n      }\n    ",
    "expected": {
      "data": {
        "nodes": [
          {
            "warranty": 3
          },
          {
            "warranty": 4
          }
        ]
      }
    },
    "plan": "\n    QueryPlan {\n      Fetch(service: \"a\") {\n        {\n          nodes {\n            __typename\n            # NOTE\n            # It drops ...Over from the query as it does not implement Node interface in subgraph A\n            # and Query.nodes resolves [Node]\n            ... on Toaster {\n              warranty\n            }\n          }\n        }\n      },\n    }\n    "
  },
  {
    "query": "\n      query {\n        nodes {\n          id\n        }\n      }\n    ",
    "expected": {
      "data": {
        "nodes": [
          {
            "id": "toaster1"
          },
          {
            "id": "toaster2"
          }
        ]
      }
    },
    "plan": "\n    QueryPlan {\n      Fetch(service: \"a\") {\n        {\n          nodes {\n            __typename\n            id\n          }\n        }\n      },\n    }\n    "
  },
  {
    "query": "\n      {\n        toasters {\n          ...ToasterFragment\n          ...NodeFragment\n        }\n      }\n\n      fragment ToasterFragment on Toaster {\n        id\n      }\n\n      fragment NodeFragment on Node {\n        id\n        __typename\n      }\n    ",
    "expected": {
      "data": {
        "toasters": [
          {
            "id": "toaster1",
            "__typename": "Toaster"
          },
          {
            "id": "toaster2",
            "__typename": "Toaster"
          }
        ]
      }
    },
    "plan": "\n    QueryPlan {\n      Fetch(service: \"a\") {\n        {\n          toasters {\n            # NOTE\n            # It merges selection sets from fragments\n            # to optimize the payload size I guess\n            __typename\n            id\n          }\n        }\n      },\n    }\n    "
  },
  {
    "query": "\n      query {\n        node(id: \"oven1\") {\n          ... on Oven {\n            warranty\n          }\n        }\n      }\n    ",
    "expected": {
      "data": {
        "node": null
      },
      "errors": true
    },
    "plan": "\n    QueryPlan {\n      Fetch(service: \"a\") {\n        {\n          node(id: \"oven1\") {\n            # NOTE\n            # It knows that Over is not implemented in subgraph A\n            # but it still sends the query to subgraph A.\n            # Not sure why it does that, it could be prevented by the gateway.\n            # It's really not spec complaint to have an interface in GraphQL API without any implementation.\n            # I know Arda had a case where a Java implementation allowed for that, but that's incorrect...\n            __typename\n          }\n        }\n      },\n    }\n    "
  },
  {
    "query": "\n      query {\n        node(id: \"oven1\") {\n          ... on Toaster {\n            warranty\n          }\n        }\n      }\n    ",
    "expected": {
      "data": {
        "node": null
      },
      "errors": true
    },
    "plan": "\n    QueryPlan {\n      Fetch(service: \"a\") {\n        {\n          node(id: \"oven1\") {\n            __typename\n            ... on Toaster {\n              warranty\n            }\n          }\n        }\n      },\n    }\n    "
  },
  {
    "query": "\n      query {\n        node(id: \"toaster1\") {\n          ... on Toaster {\n            warranty\n          }\n        }\n      }\n    ",
    "expected": {
      "data": {
        "node": {
          "warranty": 3
        }
      }
    },
    "plan": "\n    QueryPlan {\n      Fetch(service: \"a\") {\n        {\n          node(id: \"toaster1\") {\n            __typename\n            ... on Toaster {\n              warranty\n            }\n          }\n        }\n      },\n    }\n    "
  }
]