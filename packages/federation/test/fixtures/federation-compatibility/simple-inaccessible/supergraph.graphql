schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
  @link(url: "https://specs.apollo.dev/inaccessible/v0.2", for: SECURITY)
{
  query: Query
}

directive @inaccessible on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

enum FriendType
  @join__type(graph: FRIENDS)
{
  FAMILY @inaccessible @join__enumValue(graph: FRIENDS)
  FRIEND @join__enumValue(graph: FRIENDS)
}

scalar join__FieldSet

enum join__Graph {
  AGE @join__graph(name: "age", url: "https://federation-compatibility.theguild.workers.dev/simple-inaccessible/age")
  FRIENDS @join__graph(name: "friends", url: "https://federation-compatibility.theguild.workers.dev/simple-inaccessible/friends")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Query
  @join__type(graph: AGE)
  @join__type(graph: FRIENDS)
{
  usersInAge: [User!]! @join__field(graph: AGE)
  usersInFriends: [User!]! @join__field(graph: FRIENDS)
}

type User
  @join__type(graph: AGE, key: "id")
  @join__type(graph: FRIENDS, key: "id")
{
  id: ID
  age: Int @join__field(graph: AGE)
  friends(type: FriendType = FAMILY @inaccessible): [User!]! @join__field(graph: FRIENDS)
  type: FriendType @join__field(graph: FRIENDS)
}