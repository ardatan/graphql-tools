schema
  @core(feature: "https://specs.apollo.dev/core/v0.2")
  @core(feature: "https://specs.apollo.dev/join/v0.1", for: EXECUTION) {
  query: Query
}

directive @core(as: String, feature: String!, for: core__Purpose) repeatable on SCHEMA

directive @join__field(
  graph: join__Graph
  provides: join__FieldSet
  requires: join__FieldSet
) on FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__owner(graph: join__Graph!) on INTERFACE | OBJECT

directive @join__type(graph: join__Graph!, key: join__FieldSet) repeatable on INTERFACE | OBJECT

type Category
  @join__owner(graph: products)
  @join__type(graph: products, key: "id")
  @join__type(graph: discount, key: "id") {
  discounts: [Discount!]! @join__field(graph: discount)
  id: ID! @join__field(graph: products)
  name: String! @join__field(graph: products)
}

type Discount @join__owner(graph: discount) @join__type(graph: discount, key: "id") {
  discount: Int! @join__field(graph: discount)
  id: ID! @join__field(graph: discount)
}

type Product
  @join__owner(graph: products)
  @join__type(graph: products, key: "upc")
  @join__type(graph: discount, key: "upc")
  @join__type(graph: inventory, key: "upc")
  @join__type(graph: reviews, key: "upc") {
  categories: [Category!]! @join__field(graph: products)
  discounts: [Discount!]! @join__field(graph: discount)
  inStock: Boolean @join__field(graph: inventory)
  name: String @join__field(graph: products)
  price: Int @join__field(graph: products)
  reviews: [Review] @join__field(graph: reviews)
  shippingEstimate: Int @join__field(graph: inventory, requires: "price weight")
  upc: String! @join__field(graph: products)
  weight: Int @join__field(graph: products)
}

type Query {
  discounts(first: Int = 5): [Discount] @join__field(graph: discount)
  me: User @join__field(graph: accounts)
  topProducts(first: Int): [Product] @join__field(graph: products)
  users: [User] @join__field(graph: accounts)
}

type Review @join__owner(graph: reviews) @join__type(graph: reviews, key: "id") {
  author: User @join__field(graph: reviews, provides: "username")
  body: String @join__field(graph: reviews)
  id: ID! @join__field(graph: reviews)
  product: Product @join__field(graph: reviews)
}

type User
  @join__owner(graph: accounts)
  @join__type(graph: accounts, key: "id")
  @join__type(graph: reviews, key: "id") {
  birthDate: String @join__field(graph: accounts)
  id: ID! @join__field(graph: accounts)
  name: String @join__field(graph: accounts)
  numberOfReviews: Int @join__field(graph: reviews)
  reviews: [Review] @join__field(graph: reviews)
  username: String @join__field(graph: accounts)
}

enum core__Purpose {
  """
  `EXECUTION` features provide metadata necessary to for operation execution.
  """
  EXECUTION

  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY
}

scalar join__FieldSet

enum join__Graph {
  accounts @join__graph(name: "accounts", url: "http://www.accounts.com")
  discount @join__graph(name: "discount", url: "http://www.discount.com")
  inventory @join__graph(name: "inventory", url: "http://www.inventory.com")
  products @join__graph(name: "products", url: "http://www.products.com")
  reviews @join__graph(name: "reviews", url: "http://www.reviews.com")
}
