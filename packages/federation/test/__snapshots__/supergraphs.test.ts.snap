// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Supergraphs a.graphql subgraphs: a.graphql - SERVICE0 1`] = `
"schema {
  query: Query
}

type Query {
  me: User
  users: [User]
  _entities(representations: [_Any!]!): _Entity
}

type User {
  birthDate: String
  id: ID!
  name: String
  username: String
}

union _Entity = User

scalar _Any"
`;

exports[`Supergraphs a.graphql subgraphs: a.graphql - SERVICE1 1`] = `
"schema {
  query: Query
}

type Product {
  name: String
  price: Int
  upc: String!
  weight: Int
}

type Query {
  topProducts(first: Int): [Product]
  _entities(representations: [_Any!]!): _Entity
}

union _Entity = Product

scalar _Any"
`;

exports[`Supergraphs a.graphql subgraphs: a.graphql - SERVICE2 1`] = `
"schema {
  query: Query
}

enum ReviewsOrder {
  ASC
  DESC
}

input ProductReviewsInput {
  first: Int
  order: ReviewsOrder
}

type AnonymousReview implements Review {
  body: String
  id: ID!
  product: Product
}

type Product {
  reviews(input: ProductReviewsInput): [Review]
  upc: String!
}

type Query {
  _entities(representations: [_Any!]!): _Entity
}

interface Review {
  body: String
  id: ID!
  product: Product
}

scalar Stars

type User {
  id: ID!
  numberOfReviews: Int
  reviews: [Review]
  username: String
}

type UserReview implements Review {
  author: User
  body: String
  id: ID!
  product: Product
  stars: Stars
}

union _Entity = AnonymousReview | Product | User | UserReview

scalar _Any"
`;

exports[`Supergraphs a.graphql subgraphs: a.graphql - SERVICE3 1`] = `
"schema {
  query: Query
}

type Product {
  inStock: Boolean
  shippingEstimate: Int
  upc: String!
}

type Query {
  _entities(representations: [_Any!]!): _Entity
}

union _Entity = Product

scalar _Any"
`;

exports[`Supergraphs b.graphql subgraphs: b.graphql - INVENTORY 1`] = `
"schema {
  query: Query
}

type DeliveryEstimates {
  estimatedDelivery: String
  fastestDelivery: String
}

type Product implements ProductItf {
  id: ID! @tag(name: "hi-from-products")
  delivery(zip: String): DeliveryEstimates
}

type ProductDimension {
  size: String @hello
  weight: Float
}

interface ProductItf {
  id: ID!
  dimensions: ProductDimension
  delivery(zip: String): DeliveryEstimates
}

type Query {
  _entities(representations: [_Any!]!): _Entity
}

union _Entity = Product

scalar _Any"
`;

exports[`Supergraphs b.graphql subgraphs: b.graphql - PANDAS 1`] = `
"schema {
  query: Query
}

type Panda {
  name: ID!
  favoriteFood: String @tag(name: "nom-nom-nom")
}

type Query {
  allPandas: [Panda]
  panda(name: ID!): Panda
  _entities(representations: [_Any!]!): _Entity
}

union _Entity

scalar _Any"
`;

exports[`Supergraphs b.graphql subgraphs: b.graphql - PRODUCTS 1`] = `
"schema {
  query: Query
}

type Product implements ProductItf & SkuItf {
  id: ID! @tag(name: "hi-from-products")
  dimensions: ProductDimension
  sku: String
  name: String @hello
  package: String
  variation: ProductVariation
  createdBy: User
  hidden: String
  oldField: String
}

type ProductDimension {
  size: String @hello
  weight: Float
}

interface ProductItf implements SkuItf {
  id: ID!
  dimensions: ProductDimension
  sku: String
  name: String
  package: String
  variation: ProductVariation
  createdBy: User
  hidden: String @inaccessible
  oldField: String @deprecated(reason: "refactored out")
}

type ProductVariation {
  id: ID!
  name: String
}

type Query {
  allProducts: [ProductItf]
  product(id: ID!): ProductItf
  _entities(representations: [_Any!]!): _Entity
}

interface SkuItf {
  sku: String
}

type User {
  email: ID! @tag(name: "test-from-users")
  totalProductsCreated: Int
}

union _Entity = Product | User

scalar _Any"
`;

exports[`Supergraphs b.graphql subgraphs: b.graphql - REVIEWS 1`] = `
"schema {
  query: Query
}

type Product implements ProductItf {
  id: ID! @tag(name: "hi-from-products")
  reviewsScore: Float!
  reviewsCount: Int!
  reviews: [Review!]!
}

interface ProductItf {
  id: ID!
  reviewsCount: Int!
  reviewsScore: Float!
  reviews: [Review!]!
}

type Query {
  review(id: Int!): Review
  _entities(representations: [_Any!]!): _Entity
}

type Review {
  id: Int!
  body: String!
}

union _Entity = Product

scalar _Any"
`;

exports[`Supergraphs b.graphql subgraphs: b.graphql - USERS 1`] = `
"schema {
  query: Query
}

type Query {
  _entities(representations: [_Any!]!): _Entity
}

type User {
  email: ID! @tag(name: "test-from-users")
  totalProductsCreated: Int
  name: String
}

union _Entity = User

scalar _Any"
`;

exports[`Supergraphs c.graphql subgraphs: c.graphql - ACCOUNTS 1`] = `
"schema {
  query: Query
}

type Query {
  me: User
  throw: String
  fooBar: FooBar
  mustFooBar: FooBar!
  _entities(representations: [_Any!]!): _Entity
}

type User {
  id: ID!
  username: String
}

union FooBar = Foo | Bar

type Foo {
  id: ID!
  name: String
}

type Bar {
  id: ID!
  name: String
}

union _Entity = User | Foo | Bar

scalar _Any"
`;

exports[`Supergraphs d.graphql subgraphs: d.graphql - NODERESOLVER 1`] = `
"schema {
  query: Query
}

type Query {
  node(id: ID!): Node
  _entities(representations: [_Any!]!): _Entity
}

interface Node {
  id: ID!
}

union _Entity

scalar _Any"
`;

exports[`Supergraphs d.graphql subgraphs: d.graphql - PB_BACKEND 1`] = `
"schema {
  query: Query
  mutation: Mutation
}

type Mutation {
  setNumber: Int
}

type Query {
  _entities(representations: [_Any!]!): _Entity
}

type ReactionAuthor implements Node {
  id: ID!
  avatarUrl: Url!
  displayName: String!
}

type Handle implements Node {
  id: ID!
  mentionable: Mentionable
}

type Member implements Node {
  id: ID!
  email: String!
}

type ConcreteBoard implements Board & Node & SomeBoard {
  id: ID!
}

scalar Url @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc1738")

interface Node {
  id: ID!
}

union Mentionable = ReactionAuthor | OwnerChangedNotification

type OwnerChangedNotification implements AppNotification {
  entityType: NotifiableEntityType
}

enum NotifiableEntityType {
  ITEM
}

interface AppNotification {
  entityType: NotifiableEntityType
}

interface Board {
  id: ID!
  isVisible: Boolean!
}

interface SomeBoard

union _Entity = ReactionAuthor | Handle | Member | ConcreteBoard

scalar _Any"
`;

exports[`Supergraphs d.graphql subgraphs: d.graphql - PB_SERVICE_B 1`] = `
"schema {
  query: Query
}

type Query {
  _entities(representations: [_Any!]!): _Entity
}

type Member implements Node {
  id: ID!
}

type SomeEntity implements Node {
  id: ID!
}

type ConcreteBoard implements Board & Node & SomeBoard {
  id: ID!
  isVisible: Boolean!
  someEntity: SomeEntity
}

interface Node {
  id: ID!
}

interface Board {
  id: ID!
  isVisible: Boolean!
}

interface SomeBoard {
  someEntity: SomeEntity
}

union _Entity = Member | SomeEntity | ConcreteBoard

scalar _Any"
`;
