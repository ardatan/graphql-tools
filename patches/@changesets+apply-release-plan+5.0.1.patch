diff --git a/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.dev.js b/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.dev.js
index 5435d7a..a95a3ad 100644
--- a/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.dev.js
+++ b/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.dev.js
@@ -117,7 +117,8 @@ const DEPENDENCY_TYPES = ["dependencies", "devDependencies", "peerDependencies",
 function versionPackage(release, versionsToUpdate, {
   updateInternalDependencies,
   onlyUpdatePeerDependentsWhenOutOfRange,
-  bumpVersionsWithWorkspaceProtocolOnly
+  bumpVersionsWithWorkspaceProtocolOnly,
+  ignoreRange
 }) {
   let {
     newVersion,
@@ -159,7 +160,7 @@ function versionPackage(release, versionsToUpdate, {
         // they probably want it to stay like that
         new semver.Range(depCurrentVersion).range !== "") {
           let rangeType = getVersionRangeType__default['default'](depCurrentVersion);
-          let newNewRange = `${rangeType}${version}`;
+          let newNewRange = ignoreRange ? version : `${rangeType}${version}`;
           if (usesWorkspaceRange) newNewRange = `workspace:${newNewRange}`;
           deps[name] = newNewRange;
         }
@@ -273,7 +274,7 @@ async function getCommitsThatAddChangesets(changesetIds, cwd) {
   return commits;
 }
 
-async function applyReleasePlan(releasePlan, packages, config$1 = config.defaultConfig, snapshot) {
+async function applyReleasePlan(releasePlan, packages, config$1 = config.defaultConfig, snapshot, ignoreRange = false) {
   let cwd = packages.root.dir;
   let touchedFiles = [];
   const packagesByName = new Map(packages.packages.map(x => [x.packageJson.name, x]));
@@ -311,6 +312,7 @@ async function applyReleasePlan(releasePlan, packages, config$1 = config.default
   let finalisedRelease = releaseWithChangelogs.map(release => {
     return versionPackage(release, versionsToUpdate, {
       updateInternalDependencies: config$1.updateInternalDependencies,
+      ignoreRange,
       onlyUpdatePeerDependentsWhenOutOfRange: config$1.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH.onlyUpdatePeerDependentsWhenOutOfRange,
       bumpVersionsWithWorkspaceProtocolOnly: config$1.bumpVersionsWithWorkspaceProtocolOnly
     });
diff --git a/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.prod.js b/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.prod.js
index f83761f..bc94382 100644
--- a/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.prod.js
+++ b/node_modules/@changesets/apply-release-plan/dist/apply-release-plan.cjs.prod.js
@@ -64,7 +64,7 @@ function shouldUpdateDependencyBasedOnConfig(release, {depVersionRange: depVersi
 
 const DEPENDENCY_TYPES = [ "dependencies", "devDependencies", "peerDependencies", "optionalDependencies" ];
 
-function versionPackage(release, versionsToUpdate, {updateInternalDependencies: updateInternalDependencies, onlyUpdatePeerDependentsWhenOutOfRange: onlyUpdatePeerDependentsWhenOutOfRange, bumpVersionsWithWorkspaceProtocolOnly: bumpVersionsWithWorkspaceProtocolOnly}) {
+function versionPackage(release, versionsToUpdate, {ignoreRange, updateInternalDependencies: updateInternalDependencies, onlyUpdatePeerDependentsWhenOutOfRange: onlyUpdatePeerDependentsWhenOutOfRange, bumpVersionsWithWorkspaceProtocolOnly: bumpVersionsWithWorkspaceProtocolOnly}) {
   let {newVersion: newVersion, packageJson: packageJson} = release;
   packageJson.version = newVersion;
   for (let depType of DEPENDENCY_TYPES) {
@@ -84,7 +84,7 @@ function versionPackage(release, versionsToUpdate, {updateInternalDependencies:
       const usesWorkspaceRange = depCurrentVersion.startsWith("workspace:");
       if (usesWorkspaceRange) depCurrentVersion = depCurrentVersion.substr(10); else if (!0 === bumpVersionsWithWorkspaceProtocolOnly) continue;
       if ("" !== new semver.Range(depCurrentVersion).range) {
-        let newNewRange = `${getVersionRangeType__default.default(depCurrentVersion)}${version}`;
+        let newNewRange = ignoreRange ? version : `${getVersionRangeType__default.default(depCurrentVersion)}${version}`;
         usesWorkspaceRange && (newNewRange = "workspace:" + newNewRange), deps[name] = newNewRange;
       }
     }
@@ -161,7 +161,7 @@ async function getCommitsThatAddChangesets(changesetIds, cwd) {
   })), commits;
 }
 
-async function applyReleasePlan(releasePlan, packages, config$1 = config.defaultConfig, snapshot) {
+async function applyReleasePlan(releasePlan, packages, config$1 = config.defaultConfig, snapshot, ignoreRange = false) {
   let cwd = packages.root.dir, touchedFiles = [];
   const packagesByName = new Map(packages.packages.map((x => [ x.packageJson.name, x ])));
   let {releases: releases, changesets: changesets} = releasePlan;
@@ -178,6 +178,7 @@ async function applyReleasePlan(releasePlan, packages, config$1 = config.default
     type: type
   }))), finalisedRelease = releaseWithChangelogs.map((release => versionPackage(release, versionsToUpdate, {
     updateInternalDependencies: config$1.updateInternalDependencies,
+    ignoreRange,
     onlyUpdatePeerDependentsWhenOutOfRange: config$1.___experimentalUnsafeOptions_WILL_CHANGE_IN_PATCH.onlyUpdatePeerDependentsWhenOutOfRange,
     bumpVersionsWithWorkspaceProtocolOnly: config$1.bumpVersionsWithWorkspaceProtocolOnly
   }))), prettierConfig = await prettier__default.default.resolveConfig(cwd);
